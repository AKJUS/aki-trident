// Code generated by go-swagger; DO NOT EDIT.

package security

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSecurityGroupDeleteCollectionParams creates a new SecurityGroupDeleteCollectionParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSecurityGroupDeleteCollectionParams() *SecurityGroupDeleteCollectionParams {
	return &SecurityGroupDeleteCollectionParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSecurityGroupDeleteCollectionParamsWithTimeout creates a new SecurityGroupDeleteCollectionParams object
// with the ability to set a timeout on a request.
func NewSecurityGroupDeleteCollectionParamsWithTimeout(timeout time.Duration) *SecurityGroupDeleteCollectionParams {
	return &SecurityGroupDeleteCollectionParams{
		timeout: timeout,
	}
}

// NewSecurityGroupDeleteCollectionParamsWithContext creates a new SecurityGroupDeleteCollectionParams object
// with the ability to set a context for a request.
func NewSecurityGroupDeleteCollectionParamsWithContext(ctx context.Context) *SecurityGroupDeleteCollectionParams {
	return &SecurityGroupDeleteCollectionParams{
		Context: ctx,
	}
}

// NewSecurityGroupDeleteCollectionParamsWithHTTPClient creates a new SecurityGroupDeleteCollectionParams object
// with the ability to set a custom HTTPClient for a request.
func NewSecurityGroupDeleteCollectionParamsWithHTTPClient(client *http.Client) *SecurityGroupDeleteCollectionParams {
	return &SecurityGroupDeleteCollectionParams{
		HTTPClient: client,
	}
}

/*
SecurityGroupDeleteCollectionParams contains all the parameters to send to the API endpoint

	for the security group delete collection operation.

	Typically these are written to a http.Request.
*/
type SecurityGroupDeleteCollectionParams struct {

	/* Comment.

	   Filter by comment
	*/
	Comment *string

	/* ContinueOnFailure.

	   Continue even when the operation fails on one of the records.
	*/
	ContinueOnFailure *bool

	/* CreateTime.

	   Filter by create_time
	*/
	CreateTime *string

	/* ID.

	   Filter by id
	*/
	ID *int64

	/* Info.

	   Info specification
	*/
	Info SecurityGroupDeleteCollectionBody

	/* Name.

	   Filter by name
	*/
	Name *string

	/* OwnerName.

	   Filter by owner.name
	*/
	OwnerName *string

	/* OwnerUUID.

	   Filter by owner.uuid
	*/
	OwnerUUID *string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* Scope.

	   Filter by scope
	*/
	Scope *string

	/* SerialRecords.

	   Perform the operation on the records synchronously.
	*/
	SerialRecords *bool

	/* Type.

	   Filter by type
	*/
	Type *string

	/* UUID.

	   Filter by uuid
	*/
	UUID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the security group delete collection params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SecurityGroupDeleteCollectionParams) WithDefaults() *SecurityGroupDeleteCollectionParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the security group delete collection params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SecurityGroupDeleteCollectionParams) SetDefaults() {
	var (
		continueOnFailureDefault = bool(false)

		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)

		serialRecordsDefault = bool(false)
	)

	val := SecurityGroupDeleteCollectionParams{
		ContinueOnFailure: &continueOnFailureDefault,
		ReturnRecords:     &returnRecordsDefault,
		ReturnTimeout:     &returnTimeoutDefault,
		SerialRecords:     &serialRecordsDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the security group delete collection params
func (o *SecurityGroupDeleteCollectionParams) WithTimeout(timeout time.Duration) *SecurityGroupDeleteCollectionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the security group delete collection params
func (o *SecurityGroupDeleteCollectionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the security group delete collection params
func (o *SecurityGroupDeleteCollectionParams) WithContext(ctx context.Context) *SecurityGroupDeleteCollectionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the security group delete collection params
func (o *SecurityGroupDeleteCollectionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the security group delete collection params
func (o *SecurityGroupDeleteCollectionParams) WithHTTPClient(client *http.Client) *SecurityGroupDeleteCollectionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the security group delete collection params
func (o *SecurityGroupDeleteCollectionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithComment adds the comment to the security group delete collection params
func (o *SecurityGroupDeleteCollectionParams) WithComment(comment *string) *SecurityGroupDeleteCollectionParams {
	o.SetComment(comment)
	return o
}

// SetComment adds the comment to the security group delete collection params
func (o *SecurityGroupDeleteCollectionParams) SetComment(comment *string) {
	o.Comment = comment
}

// WithContinueOnFailure adds the continueOnFailure to the security group delete collection params
func (o *SecurityGroupDeleteCollectionParams) WithContinueOnFailure(continueOnFailure *bool) *SecurityGroupDeleteCollectionParams {
	o.SetContinueOnFailure(continueOnFailure)
	return o
}

// SetContinueOnFailure adds the continueOnFailure to the security group delete collection params
func (o *SecurityGroupDeleteCollectionParams) SetContinueOnFailure(continueOnFailure *bool) {
	o.ContinueOnFailure = continueOnFailure
}

// WithCreateTime adds the createTime to the security group delete collection params
func (o *SecurityGroupDeleteCollectionParams) WithCreateTime(createTime *string) *SecurityGroupDeleteCollectionParams {
	o.SetCreateTime(createTime)
	return o
}

// SetCreateTime adds the createTime to the security group delete collection params
func (o *SecurityGroupDeleteCollectionParams) SetCreateTime(createTime *string) {
	o.CreateTime = createTime
}

// WithID adds the id to the security group delete collection params
func (o *SecurityGroupDeleteCollectionParams) WithID(id *int64) *SecurityGroupDeleteCollectionParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the security group delete collection params
func (o *SecurityGroupDeleteCollectionParams) SetID(id *int64) {
	o.ID = id
}

// WithInfo adds the info to the security group delete collection params
func (o *SecurityGroupDeleteCollectionParams) WithInfo(info SecurityGroupDeleteCollectionBody) *SecurityGroupDeleteCollectionParams {
	o.SetInfo(info)
	return o
}

// SetInfo adds the info to the security group delete collection params
func (o *SecurityGroupDeleteCollectionParams) SetInfo(info SecurityGroupDeleteCollectionBody) {
	o.Info = info
}

// WithName adds the name to the security group delete collection params
func (o *SecurityGroupDeleteCollectionParams) WithName(name *string) *SecurityGroupDeleteCollectionParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the security group delete collection params
func (o *SecurityGroupDeleteCollectionParams) SetName(name *string) {
	o.Name = name
}

// WithOwnerName adds the ownerName to the security group delete collection params
func (o *SecurityGroupDeleteCollectionParams) WithOwnerName(ownerName *string) *SecurityGroupDeleteCollectionParams {
	o.SetOwnerName(ownerName)
	return o
}

// SetOwnerName adds the ownerName to the security group delete collection params
func (o *SecurityGroupDeleteCollectionParams) SetOwnerName(ownerName *string) {
	o.OwnerName = ownerName
}

// WithOwnerUUID adds the ownerUUID to the security group delete collection params
func (o *SecurityGroupDeleteCollectionParams) WithOwnerUUID(ownerUUID *string) *SecurityGroupDeleteCollectionParams {
	o.SetOwnerUUID(ownerUUID)
	return o
}

// SetOwnerUUID adds the ownerUuid to the security group delete collection params
func (o *SecurityGroupDeleteCollectionParams) SetOwnerUUID(ownerUUID *string) {
	o.OwnerUUID = ownerUUID
}

// WithReturnRecords adds the returnRecords to the security group delete collection params
func (o *SecurityGroupDeleteCollectionParams) WithReturnRecords(returnRecords *bool) *SecurityGroupDeleteCollectionParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the security group delete collection params
func (o *SecurityGroupDeleteCollectionParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the security group delete collection params
func (o *SecurityGroupDeleteCollectionParams) WithReturnTimeout(returnTimeout *int64) *SecurityGroupDeleteCollectionParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the security group delete collection params
func (o *SecurityGroupDeleteCollectionParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithScope adds the scope to the security group delete collection params
func (o *SecurityGroupDeleteCollectionParams) WithScope(scope *string) *SecurityGroupDeleteCollectionParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the security group delete collection params
func (o *SecurityGroupDeleteCollectionParams) SetScope(scope *string) {
	o.Scope = scope
}

// WithSerialRecords adds the serialRecords to the security group delete collection params
func (o *SecurityGroupDeleteCollectionParams) WithSerialRecords(serialRecords *bool) *SecurityGroupDeleteCollectionParams {
	o.SetSerialRecords(serialRecords)
	return o
}

// SetSerialRecords adds the serialRecords to the security group delete collection params
func (o *SecurityGroupDeleteCollectionParams) SetSerialRecords(serialRecords *bool) {
	o.SerialRecords = serialRecords
}

// WithType adds the typeVar to the security group delete collection params
func (o *SecurityGroupDeleteCollectionParams) WithType(typeVar *string) *SecurityGroupDeleteCollectionParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the security group delete collection params
func (o *SecurityGroupDeleteCollectionParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WithUUID adds the uuid to the security group delete collection params
func (o *SecurityGroupDeleteCollectionParams) WithUUID(uuid *string) *SecurityGroupDeleteCollectionParams {
	o.SetUUID(uuid)
	return o
}

// SetUUID adds the uuid to the security group delete collection params
func (o *SecurityGroupDeleteCollectionParams) SetUUID(uuid *string) {
	o.UUID = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *SecurityGroupDeleteCollectionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Comment != nil {

		// query param comment
		var qrComment string

		if o.Comment != nil {
			qrComment = *o.Comment
		}
		qComment := qrComment
		if qComment != "" {

			if err := r.SetQueryParam("comment", qComment); err != nil {
				return err
			}
		}
	}

	if o.ContinueOnFailure != nil {

		// query param continue_on_failure
		var qrContinueOnFailure bool

		if o.ContinueOnFailure != nil {
			qrContinueOnFailure = *o.ContinueOnFailure
		}
		qContinueOnFailure := swag.FormatBool(qrContinueOnFailure)
		if qContinueOnFailure != "" {

			if err := r.SetQueryParam("continue_on_failure", qContinueOnFailure); err != nil {
				return err
			}
		}
	}

	if o.CreateTime != nil {

		// query param create_time
		var qrCreateTime string

		if o.CreateTime != nil {
			qrCreateTime = *o.CreateTime
		}
		qCreateTime := qrCreateTime
		if qCreateTime != "" {

			if err := r.SetQueryParam("create_time", qCreateTime); err != nil {
				return err
			}
		}
	}

	if o.ID != nil {

		// query param id
		var qrID int64

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatInt64(qrID)
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}
	if err := r.SetBodyParam(o.Info); err != nil {
		return err
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.OwnerName != nil {

		// query param owner.name
		var qrOwnerName string

		if o.OwnerName != nil {
			qrOwnerName = *o.OwnerName
		}
		qOwnerName := qrOwnerName
		if qOwnerName != "" {

			if err := r.SetQueryParam("owner.name", qOwnerName); err != nil {
				return err
			}
		}
	}

	if o.OwnerUUID != nil {

		// query param owner.uuid
		var qrOwnerUUID string

		if o.OwnerUUID != nil {
			qrOwnerUUID = *o.OwnerUUID
		}
		qOwnerUUID := qrOwnerUUID
		if qOwnerUUID != "" {

			if err := r.SetQueryParam("owner.uuid", qOwnerUUID); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.Scope != nil {

		// query param scope
		var qrScope string

		if o.Scope != nil {
			qrScope = *o.Scope
		}
		qScope := qrScope
		if qScope != "" {

			if err := r.SetQueryParam("scope", qScope); err != nil {
				return err
			}
		}
	}

	if o.SerialRecords != nil {

		// query param serial_records
		var qrSerialRecords bool

		if o.SerialRecords != nil {
			qrSerialRecords = *o.SerialRecords
		}
		qSerialRecords := swag.FormatBool(qrSerialRecords)
		if qSerialRecords != "" {

			if err := r.SetQueryParam("serial_records", qSerialRecords); err != nil {
				return err
			}
		}
	}

	if o.Type != nil {

		// query param type
		var qrType string

		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if o.UUID != nil {

		// query param uuid
		var qrUUID string

		if o.UUID != nil {
			qrUUID = *o.UUID
		}
		qUUID := qrUUID
		if qUUID != "" {

			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
