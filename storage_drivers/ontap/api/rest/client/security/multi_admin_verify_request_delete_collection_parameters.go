// Code generated by go-swagger; DO NOT EDIT.

package security

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewMultiAdminVerifyRequestDeleteCollectionParams creates a new MultiAdminVerifyRequestDeleteCollectionParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewMultiAdminVerifyRequestDeleteCollectionParams() *MultiAdminVerifyRequestDeleteCollectionParams {
	return &MultiAdminVerifyRequestDeleteCollectionParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewMultiAdminVerifyRequestDeleteCollectionParamsWithTimeout creates a new MultiAdminVerifyRequestDeleteCollectionParams object
// with the ability to set a timeout on a request.
func NewMultiAdminVerifyRequestDeleteCollectionParamsWithTimeout(timeout time.Duration) *MultiAdminVerifyRequestDeleteCollectionParams {
	return &MultiAdminVerifyRequestDeleteCollectionParams{
		timeout: timeout,
	}
}

// NewMultiAdminVerifyRequestDeleteCollectionParamsWithContext creates a new MultiAdminVerifyRequestDeleteCollectionParams object
// with the ability to set a context for a request.
func NewMultiAdminVerifyRequestDeleteCollectionParamsWithContext(ctx context.Context) *MultiAdminVerifyRequestDeleteCollectionParams {
	return &MultiAdminVerifyRequestDeleteCollectionParams{
		Context: ctx,
	}
}

// NewMultiAdminVerifyRequestDeleteCollectionParamsWithHTTPClient creates a new MultiAdminVerifyRequestDeleteCollectionParams object
// with the ability to set a custom HTTPClient for a request.
func NewMultiAdminVerifyRequestDeleteCollectionParamsWithHTTPClient(client *http.Client) *MultiAdminVerifyRequestDeleteCollectionParams {
	return &MultiAdminVerifyRequestDeleteCollectionParams{
		HTTPClient: client,
	}
}

/*
MultiAdminVerifyRequestDeleteCollectionParams contains all the parameters to send to the API endpoint

	for the multi admin verify request delete collection operation.

	Typically these are written to a http.Request.
*/
type MultiAdminVerifyRequestDeleteCollectionParams struct {

	/* ApproveExpiryTime.

	   Filter by approve_expiry_time
	*/
	ApproveExpiryTime *string

	/* ApproveTime.

	   Filter by approve_time
	*/
	ApproveTime *string

	/* ApprovedUsers.

	   Filter by approved_users
	*/
	ApprovedUsers *string

	/* Comment.

	   Filter by comment
	*/
	Comment *string

	/* ContinueOnFailure.

	   Continue even when the operation fails on one of the records.
	*/
	ContinueOnFailure *bool

	/* CreateTime.

	   Filter by create_time
	*/
	CreateTime *string

	/* ExecuteOnApproval.

	   Filter by execute_on_approval
	*/
	ExecuteOnApproval *bool

	/* ExecutionExpiryTime.

	   Filter by execution_expiry_time
	*/
	ExecutionExpiryTime *string

	/* Index.

	   Filter by index
	*/
	Index *int64

	/* Info.

	   Info specification
	*/
	Info MultiAdminVerifyRequestDeleteCollectionBody

	/* Operation.

	   Filter by operation
	*/
	Operation *string

	/* OwnerName.

	   Filter by owner.name
	*/
	OwnerName *string

	/* OwnerUUID.

	   Filter by owner.uuid
	*/
	OwnerUUID *string

	/* PendingApprovers.

	   Filter by pending_approvers
	*/
	PendingApprovers *int64

	/* PermittedUsers.

	   Filter by permitted_users
	*/
	PermittedUsers *string

	/* PotentialApprovers.

	   Filter by potential_approvers
	*/
	PotentialApprovers *string

	/* Query.

	   Filter by query
	*/
	Query *string

	/* RequiredApprovers.

	   Filter by required_approvers
	*/
	RequiredApprovers *int64

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* SerialRecords.

	   Perform the operation on the records synchronously.
	*/
	SerialRecords *bool

	/* State.

	   Filter by state
	*/
	State *string

	/* UserRequested.

	   Filter by user_requested
	*/
	UserRequested *string

	/* UserVetoed.

	   Filter by user_vetoed
	*/
	UserVetoed *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the multi admin verify request delete collection params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *MultiAdminVerifyRequestDeleteCollectionParams) WithDefaults() *MultiAdminVerifyRequestDeleteCollectionParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the multi admin verify request delete collection params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *MultiAdminVerifyRequestDeleteCollectionParams) SetDefaults() {
	var (
		continueOnFailureDefault = bool(false)

		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)

		serialRecordsDefault = bool(false)
	)

	val := MultiAdminVerifyRequestDeleteCollectionParams{
		ContinueOnFailure: &continueOnFailureDefault,
		ReturnRecords:     &returnRecordsDefault,
		ReturnTimeout:     &returnTimeoutDefault,
		SerialRecords:     &serialRecordsDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) WithTimeout(timeout time.Duration) *MultiAdminVerifyRequestDeleteCollectionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) WithContext(ctx context.Context) *MultiAdminVerifyRequestDeleteCollectionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) WithHTTPClient(client *http.Client) *MultiAdminVerifyRequestDeleteCollectionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApproveExpiryTime adds the approveExpiryTime to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) WithApproveExpiryTime(approveExpiryTime *string) *MultiAdminVerifyRequestDeleteCollectionParams {
	o.SetApproveExpiryTime(approveExpiryTime)
	return o
}

// SetApproveExpiryTime adds the approveExpiryTime to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) SetApproveExpiryTime(approveExpiryTime *string) {
	o.ApproveExpiryTime = approveExpiryTime
}

// WithApproveTime adds the approveTime to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) WithApproveTime(approveTime *string) *MultiAdminVerifyRequestDeleteCollectionParams {
	o.SetApproveTime(approveTime)
	return o
}

// SetApproveTime adds the approveTime to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) SetApproveTime(approveTime *string) {
	o.ApproveTime = approveTime
}

// WithApprovedUsers adds the approvedUsers to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) WithApprovedUsers(approvedUsers *string) *MultiAdminVerifyRequestDeleteCollectionParams {
	o.SetApprovedUsers(approvedUsers)
	return o
}

// SetApprovedUsers adds the approvedUsers to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) SetApprovedUsers(approvedUsers *string) {
	o.ApprovedUsers = approvedUsers
}

// WithComment adds the comment to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) WithComment(comment *string) *MultiAdminVerifyRequestDeleteCollectionParams {
	o.SetComment(comment)
	return o
}

// SetComment adds the comment to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) SetComment(comment *string) {
	o.Comment = comment
}

// WithContinueOnFailure adds the continueOnFailure to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) WithContinueOnFailure(continueOnFailure *bool) *MultiAdminVerifyRequestDeleteCollectionParams {
	o.SetContinueOnFailure(continueOnFailure)
	return o
}

// SetContinueOnFailure adds the continueOnFailure to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) SetContinueOnFailure(continueOnFailure *bool) {
	o.ContinueOnFailure = continueOnFailure
}

// WithCreateTime adds the createTime to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) WithCreateTime(createTime *string) *MultiAdminVerifyRequestDeleteCollectionParams {
	o.SetCreateTime(createTime)
	return o
}

// SetCreateTime adds the createTime to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) SetCreateTime(createTime *string) {
	o.CreateTime = createTime
}

// WithExecuteOnApproval adds the executeOnApproval to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) WithExecuteOnApproval(executeOnApproval *bool) *MultiAdminVerifyRequestDeleteCollectionParams {
	o.SetExecuteOnApproval(executeOnApproval)
	return o
}

// SetExecuteOnApproval adds the executeOnApproval to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) SetExecuteOnApproval(executeOnApproval *bool) {
	o.ExecuteOnApproval = executeOnApproval
}

// WithExecutionExpiryTime adds the executionExpiryTime to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) WithExecutionExpiryTime(executionExpiryTime *string) *MultiAdminVerifyRequestDeleteCollectionParams {
	o.SetExecutionExpiryTime(executionExpiryTime)
	return o
}

// SetExecutionExpiryTime adds the executionExpiryTime to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) SetExecutionExpiryTime(executionExpiryTime *string) {
	o.ExecutionExpiryTime = executionExpiryTime
}

// WithIndex adds the index to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) WithIndex(index *int64) *MultiAdminVerifyRequestDeleteCollectionParams {
	o.SetIndex(index)
	return o
}

// SetIndex adds the index to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) SetIndex(index *int64) {
	o.Index = index
}

// WithInfo adds the info to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) WithInfo(info MultiAdminVerifyRequestDeleteCollectionBody) *MultiAdminVerifyRequestDeleteCollectionParams {
	o.SetInfo(info)
	return o
}

// SetInfo adds the info to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) SetInfo(info MultiAdminVerifyRequestDeleteCollectionBody) {
	o.Info = info
}

// WithOperation adds the operation to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) WithOperation(operation *string) *MultiAdminVerifyRequestDeleteCollectionParams {
	o.SetOperation(operation)
	return o
}

// SetOperation adds the operation to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) SetOperation(operation *string) {
	o.Operation = operation
}

// WithOwnerName adds the ownerName to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) WithOwnerName(ownerName *string) *MultiAdminVerifyRequestDeleteCollectionParams {
	o.SetOwnerName(ownerName)
	return o
}

// SetOwnerName adds the ownerName to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) SetOwnerName(ownerName *string) {
	o.OwnerName = ownerName
}

// WithOwnerUUID adds the ownerUUID to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) WithOwnerUUID(ownerUUID *string) *MultiAdminVerifyRequestDeleteCollectionParams {
	o.SetOwnerUUID(ownerUUID)
	return o
}

// SetOwnerUUID adds the ownerUuid to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) SetOwnerUUID(ownerUUID *string) {
	o.OwnerUUID = ownerUUID
}

// WithPendingApprovers adds the pendingApprovers to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) WithPendingApprovers(pendingApprovers *int64) *MultiAdminVerifyRequestDeleteCollectionParams {
	o.SetPendingApprovers(pendingApprovers)
	return o
}

// SetPendingApprovers adds the pendingApprovers to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) SetPendingApprovers(pendingApprovers *int64) {
	o.PendingApprovers = pendingApprovers
}

// WithPermittedUsers adds the permittedUsers to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) WithPermittedUsers(permittedUsers *string) *MultiAdminVerifyRequestDeleteCollectionParams {
	o.SetPermittedUsers(permittedUsers)
	return o
}

// SetPermittedUsers adds the permittedUsers to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) SetPermittedUsers(permittedUsers *string) {
	o.PermittedUsers = permittedUsers
}

// WithPotentialApprovers adds the potentialApprovers to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) WithPotentialApprovers(potentialApprovers *string) *MultiAdminVerifyRequestDeleteCollectionParams {
	o.SetPotentialApprovers(potentialApprovers)
	return o
}

// SetPotentialApprovers adds the potentialApprovers to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) SetPotentialApprovers(potentialApprovers *string) {
	o.PotentialApprovers = potentialApprovers
}

// WithQuery adds the query to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) WithQuery(query *string) *MultiAdminVerifyRequestDeleteCollectionParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) SetQuery(query *string) {
	o.Query = query
}

// WithRequiredApprovers adds the requiredApprovers to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) WithRequiredApprovers(requiredApprovers *int64) *MultiAdminVerifyRequestDeleteCollectionParams {
	o.SetRequiredApprovers(requiredApprovers)
	return o
}

// SetRequiredApprovers adds the requiredApprovers to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) SetRequiredApprovers(requiredApprovers *int64) {
	o.RequiredApprovers = requiredApprovers
}

// WithReturnRecords adds the returnRecords to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) WithReturnRecords(returnRecords *bool) *MultiAdminVerifyRequestDeleteCollectionParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) WithReturnTimeout(returnTimeout *int64) *MultiAdminVerifyRequestDeleteCollectionParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithSerialRecords adds the serialRecords to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) WithSerialRecords(serialRecords *bool) *MultiAdminVerifyRequestDeleteCollectionParams {
	o.SetSerialRecords(serialRecords)
	return o
}

// SetSerialRecords adds the serialRecords to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) SetSerialRecords(serialRecords *bool) {
	o.SerialRecords = serialRecords
}

// WithState adds the state to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) WithState(state *string) *MultiAdminVerifyRequestDeleteCollectionParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) SetState(state *string) {
	o.State = state
}

// WithUserRequested adds the userRequested to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) WithUserRequested(userRequested *string) *MultiAdminVerifyRequestDeleteCollectionParams {
	o.SetUserRequested(userRequested)
	return o
}

// SetUserRequested adds the userRequested to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) SetUserRequested(userRequested *string) {
	o.UserRequested = userRequested
}

// WithUserVetoed adds the userVetoed to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) WithUserVetoed(userVetoed *string) *MultiAdminVerifyRequestDeleteCollectionParams {
	o.SetUserVetoed(userVetoed)
	return o
}

// SetUserVetoed adds the userVetoed to the multi admin verify request delete collection params
func (o *MultiAdminVerifyRequestDeleteCollectionParams) SetUserVetoed(userVetoed *string) {
	o.UserVetoed = userVetoed
}

// WriteToRequest writes these params to a swagger request
func (o *MultiAdminVerifyRequestDeleteCollectionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ApproveExpiryTime != nil {

		// query param approve_expiry_time
		var qrApproveExpiryTime string

		if o.ApproveExpiryTime != nil {
			qrApproveExpiryTime = *o.ApproveExpiryTime
		}
		qApproveExpiryTime := qrApproveExpiryTime
		if qApproveExpiryTime != "" {

			if err := r.SetQueryParam("approve_expiry_time", qApproveExpiryTime); err != nil {
				return err
			}
		}
	}

	if o.ApproveTime != nil {

		// query param approve_time
		var qrApproveTime string

		if o.ApproveTime != nil {
			qrApproveTime = *o.ApproveTime
		}
		qApproveTime := qrApproveTime
		if qApproveTime != "" {

			if err := r.SetQueryParam("approve_time", qApproveTime); err != nil {
				return err
			}
		}
	}

	if o.ApprovedUsers != nil {

		// query param approved_users
		var qrApprovedUsers string

		if o.ApprovedUsers != nil {
			qrApprovedUsers = *o.ApprovedUsers
		}
		qApprovedUsers := qrApprovedUsers
		if qApprovedUsers != "" {

			if err := r.SetQueryParam("approved_users", qApprovedUsers); err != nil {
				return err
			}
		}
	}

	if o.Comment != nil {

		// query param comment
		var qrComment string

		if o.Comment != nil {
			qrComment = *o.Comment
		}
		qComment := qrComment
		if qComment != "" {

			if err := r.SetQueryParam("comment", qComment); err != nil {
				return err
			}
		}
	}

	if o.ContinueOnFailure != nil {

		// query param continue_on_failure
		var qrContinueOnFailure bool

		if o.ContinueOnFailure != nil {
			qrContinueOnFailure = *o.ContinueOnFailure
		}
		qContinueOnFailure := swag.FormatBool(qrContinueOnFailure)
		if qContinueOnFailure != "" {

			if err := r.SetQueryParam("continue_on_failure", qContinueOnFailure); err != nil {
				return err
			}
		}
	}

	if o.CreateTime != nil {

		// query param create_time
		var qrCreateTime string

		if o.CreateTime != nil {
			qrCreateTime = *o.CreateTime
		}
		qCreateTime := qrCreateTime
		if qCreateTime != "" {

			if err := r.SetQueryParam("create_time", qCreateTime); err != nil {
				return err
			}
		}
	}

	if o.ExecuteOnApproval != nil {

		// query param execute_on_approval
		var qrExecuteOnApproval bool

		if o.ExecuteOnApproval != nil {
			qrExecuteOnApproval = *o.ExecuteOnApproval
		}
		qExecuteOnApproval := swag.FormatBool(qrExecuteOnApproval)
		if qExecuteOnApproval != "" {

			if err := r.SetQueryParam("execute_on_approval", qExecuteOnApproval); err != nil {
				return err
			}
		}
	}

	if o.ExecutionExpiryTime != nil {

		// query param execution_expiry_time
		var qrExecutionExpiryTime string

		if o.ExecutionExpiryTime != nil {
			qrExecutionExpiryTime = *o.ExecutionExpiryTime
		}
		qExecutionExpiryTime := qrExecutionExpiryTime
		if qExecutionExpiryTime != "" {

			if err := r.SetQueryParam("execution_expiry_time", qExecutionExpiryTime); err != nil {
				return err
			}
		}
	}

	if o.Index != nil {

		// query param index
		var qrIndex int64

		if o.Index != nil {
			qrIndex = *o.Index
		}
		qIndex := swag.FormatInt64(qrIndex)
		if qIndex != "" {

			if err := r.SetQueryParam("index", qIndex); err != nil {
				return err
			}
		}
	}
	if err := r.SetBodyParam(o.Info); err != nil {
		return err
	}

	if o.Operation != nil {

		// query param operation
		var qrOperation string

		if o.Operation != nil {
			qrOperation = *o.Operation
		}
		qOperation := qrOperation
		if qOperation != "" {

			if err := r.SetQueryParam("operation", qOperation); err != nil {
				return err
			}
		}
	}

	if o.OwnerName != nil {

		// query param owner.name
		var qrOwnerName string

		if o.OwnerName != nil {
			qrOwnerName = *o.OwnerName
		}
		qOwnerName := qrOwnerName
		if qOwnerName != "" {

			if err := r.SetQueryParam("owner.name", qOwnerName); err != nil {
				return err
			}
		}
	}

	if o.OwnerUUID != nil {

		// query param owner.uuid
		var qrOwnerUUID string

		if o.OwnerUUID != nil {
			qrOwnerUUID = *o.OwnerUUID
		}
		qOwnerUUID := qrOwnerUUID
		if qOwnerUUID != "" {

			if err := r.SetQueryParam("owner.uuid", qOwnerUUID); err != nil {
				return err
			}
		}
	}

	if o.PendingApprovers != nil {

		// query param pending_approvers
		var qrPendingApprovers int64

		if o.PendingApprovers != nil {
			qrPendingApprovers = *o.PendingApprovers
		}
		qPendingApprovers := swag.FormatInt64(qrPendingApprovers)
		if qPendingApprovers != "" {

			if err := r.SetQueryParam("pending_approvers", qPendingApprovers); err != nil {
				return err
			}
		}
	}

	if o.PermittedUsers != nil {

		// query param permitted_users
		var qrPermittedUsers string

		if o.PermittedUsers != nil {
			qrPermittedUsers = *o.PermittedUsers
		}
		qPermittedUsers := qrPermittedUsers
		if qPermittedUsers != "" {

			if err := r.SetQueryParam("permitted_users", qPermittedUsers); err != nil {
				return err
			}
		}
	}

	if o.PotentialApprovers != nil {

		// query param potential_approvers
		var qrPotentialApprovers string

		if o.PotentialApprovers != nil {
			qrPotentialApprovers = *o.PotentialApprovers
		}
		qPotentialApprovers := qrPotentialApprovers
		if qPotentialApprovers != "" {

			if err := r.SetQueryParam("potential_approvers", qPotentialApprovers); err != nil {
				return err
			}
		}
	}

	if o.Query != nil {

		// query param query
		var qrQuery string

		if o.Query != nil {
			qrQuery = *o.Query
		}
		qQuery := qrQuery
		if qQuery != "" {

			if err := r.SetQueryParam("query", qQuery); err != nil {
				return err
			}
		}
	}

	if o.RequiredApprovers != nil {

		// query param required_approvers
		var qrRequiredApprovers int64

		if o.RequiredApprovers != nil {
			qrRequiredApprovers = *o.RequiredApprovers
		}
		qRequiredApprovers := swag.FormatInt64(qrRequiredApprovers)
		if qRequiredApprovers != "" {

			if err := r.SetQueryParam("required_approvers", qRequiredApprovers); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SerialRecords != nil {

		// query param serial_records
		var qrSerialRecords bool

		if o.SerialRecords != nil {
			qrSerialRecords = *o.SerialRecords
		}
		qSerialRecords := swag.FormatBool(qrSerialRecords)
		if qSerialRecords != "" {

			if err := r.SetQueryParam("serial_records", qSerialRecords); err != nil {
				return err
			}
		}
	}

	if o.State != nil {

		// query param state
		var qrState string

		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.UserRequested != nil {

		// query param user_requested
		var qrUserRequested string

		if o.UserRequested != nil {
			qrUserRequested = *o.UserRequested
		}
		qUserRequested := qrUserRequested
		if qUserRequested != "" {

			if err := r.SetQueryParam("user_requested", qUserRequested); err != nil {
				return err
			}
		}
	}

	if o.UserVetoed != nil {

		// query param user_vetoed
		var qrUserVetoed string

		if o.UserVetoed != nil {
			qrUserVetoed = *o.UserVetoed
		}
		qUserVetoed := qrUserVetoed
		if qUserVetoed != "" {

			if err := r.SetQueryParam("user_vetoed", qUserVetoed); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
