// Code generated by go-swagger; DO NOT EDIT.

package n_v_me

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewNvmeServiceModifyCollectionParams creates a new NvmeServiceModifyCollectionParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewNvmeServiceModifyCollectionParams() *NvmeServiceModifyCollectionParams {
	return &NvmeServiceModifyCollectionParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewNvmeServiceModifyCollectionParamsWithTimeout creates a new NvmeServiceModifyCollectionParams object
// with the ability to set a timeout on a request.
func NewNvmeServiceModifyCollectionParamsWithTimeout(timeout time.Duration) *NvmeServiceModifyCollectionParams {
	return &NvmeServiceModifyCollectionParams{
		timeout: timeout,
	}
}

// NewNvmeServiceModifyCollectionParamsWithContext creates a new NvmeServiceModifyCollectionParams object
// with the ability to set a context for a request.
func NewNvmeServiceModifyCollectionParamsWithContext(ctx context.Context) *NvmeServiceModifyCollectionParams {
	return &NvmeServiceModifyCollectionParams{
		Context: ctx,
	}
}

// NewNvmeServiceModifyCollectionParamsWithHTTPClient creates a new NvmeServiceModifyCollectionParams object
// with the ability to set a custom HTTPClient for a request.
func NewNvmeServiceModifyCollectionParamsWithHTTPClient(client *http.Client) *NvmeServiceModifyCollectionParams {
	return &NvmeServiceModifyCollectionParams{
		HTTPClient: client,
	}
}

/*
NvmeServiceModifyCollectionParams contains all the parameters to send to the API endpoint

	for the nvme service modify collection operation.

	Typically these are written to a http.Request.
*/
type NvmeServiceModifyCollectionParams struct {

	/* ContinueOnFailure.

	   Continue even when the operation fails on one of the records.
	*/
	ContinueOnFailure *bool

	/* Enabled.

	   Filter by enabled
	*/
	Enabled *bool

	/* Info.

	   Info specification
	*/
	Info NvmeServiceModifyCollectionBody

	/* MetricDuration.

	   Filter by metric.duration
	*/
	MetricDuration *string

	/* MetricFcDuration.

	   Filter by metric.fc.duration
	*/
	MetricFcDuration *string

	/* MetricFcIopsOther.

	   Filter by metric.fc.iops.other
	*/
	MetricFcIopsOther *int64

	/* MetricFcIopsRead.

	   Filter by metric.fc.iops.read
	*/
	MetricFcIopsRead *int64

	/* MetricFcIopsTotal.

	   Filter by metric.fc.iops.total
	*/
	MetricFcIopsTotal *int64

	/* MetricFcIopsWrite.

	   Filter by metric.fc.iops.write
	*/
	MetricFcIopsWrite *int64

	/* MetricFcLatencyOther.

	   Filter by metric.fc.latency.other
	*/
	MetricFcLatencyOther *int64

	/* MetricFcLatencyRead.

	   Filter by metric.fc.latency.read
	*/
	MetricFcLatencyRead *int64

	/* MetricFcLatencyTotal.

	   Filter by metric.fc.latency.total
	*/
	MetricFcLatencyTotal *int64

	/* MetricFcLatencyWrite.

	   Filter by metric.fc.latency.write
	*/
	MetricFcLatencyWrite *int64

	/* MetricFcStatus.

	   Filter by metric.fc.status
	*/
	MetricFcStatus *string

	/* MetricFcThroughputRead.

	   Filter by metric.fc.throughput.read
	*/
	MetricFcThroughputRead *int64

	/* MetricFcThroughputTotal.

	   Filter by metric.fc.throughput.total
	*/
	MetricFcThroughputTotal *int64

	/* MetricFcThroughputWrite.

	   Filter by metric.fc.throughput.write
	*/
	MetricFcThroughputWrite *int64

	/* MetricFcTimestamp.

	   Filter by metric.fc.timestamp
	*/
	MetricFcTimestamp *string

	/* MetricIopsOther.

	   Filter by metric.iops.other
	*/
	MetricIopsOther *int64

	/* MetricIopsRead.

	   Filter by metric.iops.read
	*/
	MetricIopsRead *int64

	/* MetricIopsTotal.

	   Filter by metric.iops.total
	*/
	MetricIopsTotal *int64

	/* MetricIopsWrite.

	   Filter by metric.iops.write
	*/
	MetricIopsWrite *int64

	/* MetricLatencyOther.

	   Filter by metric.latency.other
	*/
	MetricLatencyOther *int64

	/* MetricLatencyRead.

	   Filter by metric.latency.read
	*/
	MetricLatencyRead *int64

	/* MetricLatencyTotal.

	   Filter by metric.latency.total
	*/
	MetricLatencyTotal *int64

	/* MetricLatencyWrite.

	   Filter by metric.latency.write
	*/
	MetricLatencyWrite *int64

	/* MetricStatus.

	   Filter by metric.status
	*/
	MetricStatus *string

	/* MetricTCPDuration.

	   Filter by metric.tcp.duration
	*/
	MetricTCPDuration *string

	/* MetricTCPIopsOther.

	   Filter by metric.tcp.iops.other
	*/
	MetricTCPIopsOther *int64

	/* MetricTCPIopsRead.

	   Filter by metric.tcp.iops.read
	*/
	MetricTCPIopsRead *int64

	/* MetricTCPIopsTotal.

	   Filter by metric.tcp.iops.total
	*/
	MetricTCPIopsTotal *int64

	/* MetricTCPIopsWrite.

	   Filter by metric.tcp.iops.write
	*/
	MetricTCPIopsWrite *int64

	/* MetricTCPLatencyOther.

	   Filter by metric.tcp.latency.other
	*/
	MetricTCPLatencyOther *int64

	/* MetricTCPLatencyRead.

	   Filter by metric.tcp.latency.read
	*/
	MetricTCPLatencyRead *int64

	/* MetricTCPLatencyTotal.

	   Filter by metric.tcp.latency.total
	*/
	MetricTCPLatencyTotal *int64

	/* MetricTCPLatencyWrite.

	   Filter by metric.tcp.latency.write
	*/
	MetricTCPLatencyWrite *int64

	/* MetricTCPStatus.

	   Filter by metric.tcp.status
	*/
	MetricTCPStatus *string

	/* MetricTCPThroughputRead.

	   Filter by metric.tcp.throughput.read
	*/
	MetricTCPThroughputRead *int64

	/* MetricTCPThroughputTotal.

	   Filter by metric.tcp.throughput.total
	*/
	MetricTCPThroughputTotal *int64

	/* MetricTCPThroughputWrite.

	   Filter by metric.tcp.throughput.write
	*/
	MetricTCPThroughputWrite *int64

	/* MetricTCPTimestamp.

	   Filter by metric.tcp.timestamp
	*/
	MetricTCPTimestamp *string

	/* MetricThroughputRead.

	   Filter by metric.throughput.read
	*/
	MetricThroughputRead *int64

	/* MetricThroughputTotal.

	   Filter by metric.throughput.total
	*/
	MetricThroughputTotal *int64

	/* MetricThroughputWrite.

	   Filter by metric.throughput.write
	*/
	MetricThroughputWrite *int64

	/* MetricTimestamp.

	   Filter by metric.timestamp
	*/
	MetricTimestamp *string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* SerialRecords.

	   Perform the operation on the records synchronously.
	*/
	SerialRecords *bool

	/* StatisticsFcIopsRawOther.

	   Filter by statistics.fc.iops_raw.other
	*/
	StatisticsFcIopsRawOther *int64

	/* StatisticsFcIopsRawRead.

	   Filter by statistics.fc.iops_raw.read
	*/
	StatisticsFcIopsRawRead *int64

	/* StatisticsFcIopsRawTotal.

	   Filter by statistics.fc.iops_raw.total
	*/
	StatisticsFcIopsRawTotal *int64

	/* StatisticsFcIopsRawWrite.

	   Filter by statistics.fc.iops_raw.write
	*/
	StatisticsFcIopsRawWrite *int64

	/* StatisticsFcLatencyRawOther.

	   Filter by statistics.fc.latency_raw.other
	*/
	StatisticsFcLatencyRawOther *int64

	/* StatisticsFcLatencyRawRead.

	   Filter by statistics.fc.latency_raw.read
	*/
	StatisticsFcLatencyRawRead *int64

	/* StatisticsFcLatencyRawTotal.

	   Filter by statistics.fc.latency_raw.total
	*/
	StatisticsFcLatencyRawTotal *int64

	/* StatisticsFcLatencyRawWrite.

	   Filter by statistics.fc.latency_raw.write
	*/
	StatisticsFcLatencyRawWrite *int64

	/* StatisticsFcStatus.

	   Filter by statistics.fc.status
	*/
	StatisticsFcStatus *string

	/* StatisticsFcThroughputRawRead.

	   Filter by statistics.fc.throughput_raw.read
	*/
	StatisticsFcThroughputRawRead *int64

	/* StatisticsFcThroughputRawTotal.

	   Filter by statistics.fc.throughput_raw.total
	*/
	StatisticsFcThroughputRawTotal *int64

	/* StatisticsFcThroughputRawWrite.

	   Filter by statistics.fc.throughput_raw.write
	*/
	StatisticsFcThroughputRawWrite *int64

	/* StatisticsFcTimestamp.

	   Filter by statistics.fc.timestamp
	*/
	StatisticsFcTimestamp *string

	/* StatisticsIopsRawOther.

	   Filter by statistics.iops_raw.other
	*/
	StatisticsIopsRawOther *int64

	/* StatisticsIopsRawRead.

	   Filter by statistics.iops_raw.read
	*/
	StatisticsIopsRawRead *int64

	/* StatisticsIopsRawTotal.

	   Filter by statistics.iops_raw.total
	*/
	StatisticsIopsRawTotal *int64

	/* StatisticsIopsRawWrite.

	   Filter by statistics.iops_raw.write
	*/
	StatisticsIopsRawWrite *int64

	/* StatisticsLatencyRawOther.

	   Filter by statistics.latency_raw.other
	*/
	StatisticsLatencyRawOther *int64

	/* StatisticsLatencyRawRead.

	   Filter by statistics.latency_raw.read
	*/
	StatisticsLatencyRawRead *int64

	/* StatisticsLatencyRawTotal.

	   Filter by statistics.latency_raw.total
	*/
	StatisticsLatencyRawTotal *int64

	/* StatisticsLatencyRawWrite.

	   Filter by statistics.latency_raw.write
	*/
	StatisticsLatencyRawWrite *int64

	/* StatisticsStatus.

	   Filter by statistics.status
	*/
	StatisticsStatus *string

	/* StatisticsTCPIopsRawOther.

	   Filter by statistics.tcp.iops_raw.other
	*/
	StatisticsTCPIopsRawOther *int64

	/* StatisticsTCPIopsRawRead.

	   Filter by statistics.tcp.iops_raw.read
	*/
	StatisticsTCPIopsRawRead *int64

	/* StatisticsTCPIopsRawTotal.

	   Filter by statistics.tcp.iops_raw.total
	*/
	StatisticsTCPIopsRawTotal *int64

	/* StatisticsTCPIopsRawWrite.

	   Filter by statistics.tcp.iops_raw.write
	*/
	StatisticsTCPIopsRawWrite *int64

	/* StatisticsTCPLatencyRawOther.

	   Filter by statistics.tcp.latency_raw.other
	*/
	StatisticsTCPLatencyRawOther *int64

	/* StatisticsTCPLatencyRawRead.

	   Filter by statistics.tcp.latency_raw.read
	*/
	StatisticsTCPLatencyRawRead *int64

	/* StatisticsTCPLatencyRawTotal.

	   Filter by statistics.tcp.latency_raw.total
	*/
	StatisticsTCPLatencyRawTotal *int64

	/* StatisticsTCPLatencyRawWrite.

	   Filter by statistics.tcp.latency_raw.write
	*/
	StatisticsTCPLatencyRawWrite *int64

	/* StatisticsTCPStatus.

	   Filter by statistics.tcp.status
	*/
	StatisticsTCPStatus *string

	/* StatisticsTCPThroughputRawRead.

	   Filter by statistics.tcp.throughput_raw.read
	*/
	StatisticsTCPThroughputRawRead *int64

	/* StatisticsTCPThroughputRawTotal.

	   Filter by statistics.tcp.throughput_raw.total
	*/
	StatisticsTCPThroughputRawTotal *int64

	/* StatisticsTCPThroughputRawWrite.

	   Filter by statistics.tcp.throughput_raw.write
	*/
	StatisticsTCPThroughputRawWrite *int64

	/* StatisticsTCPTimestamp.

	   Filter by statistics.tcp.timestamp
	*/
	StatisticsTCPTimestamp *string

	/* StatisticsThroughputRawRead.

	   Filter by statistics.throughput_raw.read
	*/
	StatisticsThroughputRawRead *int64

	/* StatisticsThroughputRawTotal.

	   Filter by statistics.throughput_raw.total
	*/
	StatisticsThroughputRawTotal *int64

	/* StatisticsThroughputRawWrite.

	   Filter by statistics.throughput_raw.write
	*/
	StatisticsThroughputRawWrite *int64

	/* StatisticsTimestamp.

	   Filter by statistics.timestamp
	*/
	StatisticsTimestamp *string

	/* SvmName.

	   Filter by svm.name
	*/
	SvmName *string

	/* SvmUUID.

	   Filter by svm.uuid
	*/
	SvmUUID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the nvme service modify collection params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NvmeServiceModifyCollectionParams) WithDefaults() *NvmeServiceModifyCollectionParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the nvme service modify collection params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NvmeServiceModifyCollectionParams) SetDefaults() {
	var (
		continueOnFailureDefault = bool(false)

		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)

		serialRecordsDefault = bool(false)
	)

	val := NvmeServiceModifyCollectionParams{
		ContinueOnFailure: &continueOnFailureDefault,
		ReturnRecords:     &returnRecordsDefault,
		ReturnTimeout:     &returnTimeoutDefault,
		SerialRecords:     &serialRecordsDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithTimeout(timeout time.Duration) *NvmeServiceModifyCollectionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithContext(ctx context.Context) *NvmeServiceModifyCollectionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithHTTPClient(client *http.Client) *NvmeServiceModifyCollectionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContinueOnFailure adds the continueOnFailure to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithContinueOnFailure(continueOnFailure *bool) *NvmeServiceModifyCollectionParams {
	o.SetContinueOnFailure(continueOnFailure)
	return o
}

// SetContinueOnFailure adds the continueOnFailure to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetContinueOnFailure(continueOnFailure *bool) {
	o.ContinueOnFailure = continueOnFailure
}

// WithEnabled adds the enabled to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithEnabled(enabled *bool) *NvmeServiceModifyCollectionParams {
	o.SetEnabled(enabled)
	return o
}

// SetEnabled adds the enabled to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetEnabled(enabled *bool) {
	o.Enabled = enabled
}

// WithInfo adds the info to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithInfo(info NvmeServiceModifyCollectionBody) *NvmeServiceModifyCollectionParams {
	o.SetInfo(info)
	return o
}

// SetInfo adds the info to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetInfo(info NvmeServiceModifyCollectionBody) {
	o.Info = info
}

// WithMetricDuration adds the metricDuration to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricDuration(metricDuration *string) *NvmeServiceModifyCollectionParams {
	o.SetMetricDuration(metricDuration)
	return o
}

// SetMetricDuration adds the metricDuration to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricDuration(metricDuration *string) {
	o.MetricDuration = metricDuration
}

// WithMetricFcDuration adds the metricFcDuration to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricFcDuration(metricFcDuration *string) *NvmeServiceModifyCollectionParams {
	o.SetMetricFcDuration(metricFcDuration)
	return o
}

// SetMetricFcDuration adds the metricFcDuration to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricFcDuration(metricFcDuration *string) {
	o.MetricFcDuration = metricFcDuration
}

// WithMetricFcIopsOther adds the metricFcIopsOther to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricFcIopsOther(metricFcIopsOther *int64) *NvmeServiceModifyCollectionParams {
	o.SetMetricFcIopsOther(metricFcIopsOther)
	return o
}

// SetMetricFcIopsOther adds the metricFcIopsOther to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricFcIopsOther(metricFcIopsOther *int64) {
	o.MetricFcIopsOther = metricFcIopsOther
}

// WithMetricFcIopsRead adds the metricFcIopsRead to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricFcIopsRead(metricFcIopsRead *int64) *NvmeServiceModifyCollectionParams {
	o.SetMetricFcIopsRead(metricFcIopsRead)
	return o
}

// SetMetricFcIopsRead adds the metricFcIopsRead to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricFcIopsRead(metricFcIopsRead *int64) {
	o.MetricFcIopsRead = metricFcIopsRead
}

// WithMetricFcIopsTotal adds the metricFcIopsTotal to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricFcIopsTotal(metricFcIopsTotal *int64) *NvmeServiceModifyCollectionParams {
	o.SetMetricFcIopsTotal(metricFcIopsTotal)
	return o
}

// SetMetricFcIopsTotal adds the metricFcIopsTotal to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricFcIopsTotal(metricFcIopsTotal *int64) {
	o.MetricFcIopsTotal = metricFcIopsTotal
}

// WithMetricFcIopsWrite adds the metricFcIopsWrite to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricFcIopsWrite(metricFcIopsWrite *int64) *NvmeServiceModifyCollectionParams {
	o.SetMetricFcIopsWrite(metricFcIopsWrite)
	return o
}

// SetMetricFcIopsWrite adds the metricFcIopsWrite to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricFcIopsWrite(metricFcIopsWrite *int64) {
	o.MetricFcIopsWrite = metricFcIopsWrite
}

// WithMetricFcLatencyOther adds the metricFcLatencyOther to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricFcLatencyOther(metricFcLatencyOther *int64) *NvmeServiceModifyCollectionParams {
	o.SetMetricFcLatencyOther(metricFcLatencyOther)
	return o
}

// SetMetricFcLatencyOther adds the metricFcLatencyOther to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricFcLatencyOther(metricFcLatencyOther *int64) {
	o.MetricFcLatencyOther = metricFcLatencyOther
}

// WithMetricFcLatencyRead adds the metricFcLatencyRead to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricFcLatencyRead(metricFcLatencyRead *int64) *NvmeServiceModifyCollectionParams {
	o.SetMetricFcLatencyRead(metricFcLatencyRead)
	return o
}

// SetMetricFcLatencyRead adds the metricFcLatencyRead to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricFcLatencyRead(metricFcLatencyRead *int64) {
	o.MetricFcLatencyRead = metricFcLatencyRead
}

// WithMetricFcLatencyTotal adds the metricFcLatencyTotal to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricFcLatencyTotal(metricFcLatencyTotal *int64) *NvmeServiceModifyCollectionParams {
	o.SetMetricFcLatencyTotal(metricFcLatencyTotal)
	return o
}

// SetMetricFcLatencyTotal adds the metricFcLatencyTotal to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricFcLatencyTotal(metricFcLatencyTotal *int64) {
	o.MetricFcLatencyTotal = metricFcLatencyTotal
}

// WithMetricFcLatencyWrite adds the metricFcLatencyWrite to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricFcLatencyWrite(metricFcLatencyWrite *int64) *NvmeServiceModifyCollectionParams {
	o.SetMetricFcLatencyWrite(metricFcLatencyWrite)
	return o
}

// SetMetricFcLatencyWrite adds the metricFcLatencyWrite to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricFcLatencyWrite(metricFcLatencyWrite *int64) {
	o.MetricFcLatencyWrite = metricFcLatencyWrite
}

// WithMetricFcStatus adds the metricFcStatus to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricFcStatus(metricFcStatus *string) *NvmeServiceModifyCollectionParams {
	o.SetMetricFcStatus(metricFcStatus)
	return o
}

// SetMetricFcStatus adds the metricFcStatus to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricFcStatus(metricFcStatus *string) {
	o.MetricFcStatus = metricFcStatus
}

// WithMetricFcThroughputRead adds the metricFcThroughputRead to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricFcThroughputRead(metricFcThroughputRead *int64) *NvmeServiceModifyCollectionParams {
	o.SetMetricFcThroughputRead(metricFcThroughputRead)
	return o
}

// SetMetricFcThroughputRead adds the metricFcThroughputRead to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricFcThroughputRead(metricFcThroughputRead *int64) {
	o.MetricFcThroughputRead = metricFcThroughputRead
}

// WithMetricFcThroughputTotal adds the metricFcThroughputTotal to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricFcThroughputTotal(metricFcThroughputTotal *int64) *NvmeServiceModifyCollectionParams {
	o.SetMetricFcThroughputTotal(metricFcThroughputTotal)
	return o
}

// SetMetricFcThroughputTotal adds the metricFcThroughputTotal to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricFcThroughputTotal(metricFcThroughputTotal *int64) {
	o.MetricFcThroughputTotal = metricFcThroughputTotal
}

// WithMetricFcThroughputWrite adds the metricFcThroughputWrite to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricFcThroughputWrite(metricFcThroughputWrite *int64) *NvmeServiceModifyCollectionParams {
	o.SetMetricFcThroughputWrite(metricFcThroughputWrite)
	return o
}

// SetMetricFcThroughputWrite adds the metricFcThroughputWrite to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricFcThroughputWrite(metricFcThroughputWrite *int64) {
	o.MetricFcThroughputWrite = metricFcThroughputWrite
}

// WithMetricFcTimestamp adds the metricFcTimestamp to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricFcTimestamp(metricFcTimestamp *string) *NvmeServiceModifyCollectionParams {
	o.SetMetricFcTimestamp(metricFcTimestamp)
	return o
}

// SetMetricFcTimestamp adds the metricFcTimestamp to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricFcTimestamp(metricFcTimestamp *string) {
	o.MetricFcTimestamp = metricFcTimestamp
}

// WithMetricIopsOther adds the metricIopsOther to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricIopsOther(metricIopsOther *int64) *NvmeServiceModifyCollectionParams {
	o.SetMetricIopsOther(metricIopsOther)
	return o
}

// SetMetricIopsOther adds the metricIopsOther to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricIopsOther(metricIopsOther *int64) {
	o.MetricIopsOther = metricIopsOther
}

// WithMetricIopsRead adds the metricIopsRead to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricIopsRead(metricIopsRead *int64) *NvmeServiceModifyCollectionParams {
	o.SetMetricIopsRead(metricIopsRead)
	return o
}

// SetMetricIopsRead adds the metricIopsRead to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricIopsRead(metricIopsRead *int64) {
	o.MetricIopsRead = metricIopsRead
}

// WithMetricIopsTotal adds the metricIopsTotal to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricIopsTotal(metricIopsTotal *int64) *NvmeServiceModifyCollectionParams {
	o.SetMetricIopsTotal(metricIopsTotal)
	return o
}

// SetMetricIopsTotal adds the metricIopsTotal to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricIopsTotal(metricIopsTotal *int64) {
	o.MetricIopsTotal = metricIopsTotal
}

// WithMetricIopsWrite adds the metricIopsWrite to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricIopsWrite(metricIopsWrite *int64) *NvmeServiceModifyCollectionParams {
	o.SetMetricIopsWrite(metricIopsWrite)
	return o
}

// SetMetricIopsWrite adds the metricIopsWrite to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricIopsWrite(metricIopsWrite *int64) {
	o.MetricIopsWrite = metricIopsWrite
}

// WithMetricLatencyOther adds the metricLatencyOther to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricLatencyOther(metricLatencyOther *int64) *NvmeServiceModifyCollectionParams {
	o.SetMetricLatencyOther(metricLatencyOther)
	return o
}

// SetMetricLatencyOther adds the metricLatencyOther to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricLatencyOther(metricLatencyOther *int64) {
	o.MetricLatencyOther = metricLatencyOther
}

// WithMetricLatencyRead adds the metricLatencyRead to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricLatencyRead(metricLatencyRead *int64) *NvmeServiceModifyCollectionParams {
	o.SetMetricLatencyRead(metricLatencyRead)
	return o
}

// SetMetricLatencyRead adds the metricLatencyRead to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricLatencyRead(metricLatencyRead *int64) {
	o.MetricLatencyRead = metricLatencyRead
}

// WithMetricLatencyTotal adds the metricLatencyTotal to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricLatencyTotal(metricLatencyTotal *int64) *NvmeServiceModifyCollectionParams {
	o.SetMetricLatencyTotal(metricLatencyTotal)
	return o
}

// SetMetricLatencyTotal adds the metricLatencyTotal to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricLatencyTotal(metricLatencyTotal *int64) {
	o.MetricLatencyTotal = metricLatencyTotal
}

// WithMetricLatencyWrite adds the metricLatencyWrite to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricLatencyWrite(metricLatencyWrite *int64) *NvmeServiceModifyCollectionParams {
	o.SetMetricLatencyWrite(metricLatencyWrite)
	return o
}

// SetMetricLatencyWrite adds the metricLatencyWrite to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricLatencyWrite(metricLatencyWrite *int64) {
	o.MetricLatencyWrite = metricLatencyWrite
}

// WithMetricStatus adds the metricStatus to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricStatus(metricStatus *string) *NvmeServiceModifyCollectionParams {
	o.SetMetricStatus(metricStatus)
	return o
}

// SetMetricStatus adds the metricStatus to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricStatus(metricStatus *string) {
	o.MetricStatus = metricStatus
}

// WithMetricTCPDuration adds the metricTCPDuration to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricTCPDuration(metricTCPDuration *string) *NvmeServiceModifyCollectionParams {
	o.SetMetricTCPDuration(metricTCPDuration)
	return o
}

// SetMetricTCPDuration adds the metricTcpDuration to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricTCPDuration(metricTCPDuration *string) {
	o.MetricTCPDuration = metricTCPDuration
}

// WithMetricTCPIopsOther adds the metricTCPIopsOther to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricTCPIopsOther(metricTCPIopsOther *int64) *NvmeServiceModifyCollectionParams {
	o.SetMetricTCPIopsOther(metricTCPIopsOther)
	return o
}

// SetMetricTCPIopsOther adds the metricTcpIopsOther to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricTCPIopsOther(metricTCPIopsOther *int64) {
	o.MetricTCPIopsOther = metricTCPIopsOther
}

// WithMetricTCPIopsRead adds the metricTCPIopsRead to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricTCPIopsRead(metricTCPIopsRead *int64) *NvmeServiceModifyCollectionParams {
	o.SetMetricTCPIopsRead(metricTCPIopsRead)
	return o
}

// SetMetricTCPIopsRead adds the metricTcpIopsRead to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricTCPIopsRead(metricTCPIopsRead *int64) {
	o.MetricTCPIopsRead = metricTCPIopsRead
}

// WithMetricTCPIopsTotal adds the metricTCPIopsTotal to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricTCPIopsTotal(metricTCPIopsTotal *int64) *NvmeServiceModifyCollectionParams {
	o.SetMetricTCPIopsTotal(metricTCPIopsTotal)
	return o
}

// SetMetricTCPIopsTotal adds the metricTcpIopsTotal to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricTCPIopsTotal(metricTCPIopsTotal *int64) {
	o.MetricTCPIopsTotal = metricTCPIopsTotal
}

// WithMetricTCPIopsWrite adds the metricTCPIopsWrite to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricTCPIopsWrite(metricTCPIopsWrite *int64) *NvmeServiceModifyCollectionParams {
	o.SetMetricTCPIopsWrite(metricTCPIopsWrite)
	return o
}

// SetMetricTCPIopsWrite adds the metricTcpIopsWrite to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricTCPIopsWrite(metricTCPIopsWrite *int64) {
	o.MetricTCPIopsWrite = metricTCPIopsWrite
}

// WithMetricTCPLatencyOther adds the metricTCPLatencyOther to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricTCPLatencyOther(metricTCPLatencyOther *int64) *NvmeServiceModifyCollectionParams {
	o.SetMetricTCPLatencyOther(metricTCPLatencyOther)
	return o
}

// SetMetricTCPLatencyOther adds the metricTcpLatencyOther to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricTCPLatencyOther(metricTCPLatencyOther *int64) {
	o.MetricTCPLatencyOther = metricTCPLatencyOther
}

// WithMetricTCPLatencyRead adds the metricTCPLatencyRead to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricTCPLatencyRead(metricTCPLatencyRead *int64) *NvmeServiceModifyCollectionParams {
	o.SetMetricTCPLatencyRead(metricTCPLatencyRead)
	return o
}

// SetMetricTCPLatencyRead adds the metricTcpLatencyRead to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricTCPLatencyRead(metricTCPLatencyRead *int64) {
	o.MetricTCPLatencyRead = metricTCPLatencyRead
}

// WithMetricTCPLatencyTotal adds the metricTCPLatencyTotal to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricTCPLatencyTotal(metricTCPLatencyTotal *int64) *NvmeServiceModifyCollectionParams {
	o.SetMetricTCPLatencyTotal(metricTCPLatencyTotal)
	return o
}

// SetMetricTCPLatencyTotal adds the metricTcpLatencyTotal to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricTCPLatencyTotal(metricTCPLatencyTotal *int64) {
	o.MetricTCPLatencyTotal = metricTCPLatencyTotal
}

// WithMetricTCPLatencyWrite adds the metricTCPLatencyWrite to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricTCPLatencyWrite(metricTCPLatencyWrite *int64) *NvmeServiceModifyCollectionParams {
	o.SetMetricTCPLatencyWrite(metricTCPLatencyWrite)
	return o
}

// SetMetricTCPLatencyWrite adds the metricTcpLatencyWrite to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricTCPLatencyWrite(metricTCPLatencyWrite *int64) {
	o.MetricTCPLatencyWrite = metricTCPLatencyWrite
}

// WithMetricTCPStatus adds the metricTCPStatus to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricTCPStatus(metricTCPStatus *string) *NvmeServiceModifyCollectionParams {
	o.SetMetricTCPStatus(metricTCPStatus)
	return o
}

// SetMetricTCPStatus adds the metricTcpStatus to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricTCPStatus(metricTCPStatus *string) {
	o.MetricTCPStatus = metricTCPStatus
}

// WithMetricTCPThroughputRead adds the metricTCPThroughputRead to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricTCPThroughputRead(metricTCPThroughputRead *int64) *NvmeServiceModifyCollectionParams {
	o.SetMetricTCPThroughputRead(metricTCPThroughputRead)
	return o
}

// SetMetricTCPThroughputRead adds the metricTcpThroughputRead to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricTCPThroughputRead(metricTCPThroughputRead *int64) {
	o.MetricTCPThroughputRead = metricTCPThroughputRead
}

// WithMetricTCPThroughputTotal adds the metricTCPThroughputTotal to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricTCPThroughputTotal(metricTCPThroughputTotal *int64) *NvmeServiceModifyCollectionParams {
	o.SetMetricTCPThroughputTotal(metricTCPThroughputTotal)
	return o
}

// SetMetricTCPThroughputTotal adds the metricTcpThroughputTotal to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricTCPThroughputTotal(metricTCPThroughputTotal *int64) {
	o.MetricTCPThroughputTotal = metricTCPThroughputTotal
}

// WithMetricTCPThroughputWrite adds the metricTCPThroughputWrite to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricTCPThroughputWrite(metricTCPThroughputWrite *int64) *NvmeServiceModifyCollectionParams {
	o.SetMetricTCPThroughputWrite(metricTCPThroughputWrite)
	return o
}

// SetMetricTCPThroughputWrite adds the metricTcpThroughputWrite to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricTCPThroughputWrite(metricTCPThroughputWrite *int64) {
	o.MetricTCPThroughputWrite = metricTCPThroughputWrite
}

// WithMetricTCPTimestamp adds the metricTCPTimestamp to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricTCPTimestamp(metricTCPTimestamp *string) *NvmeServiceModifyCollectionParams {
	o.SetMetricTCPTimestamp(metricTCPTimestamp)
	return o
}

// SetMetricTCPTimestamp adds the metricTcpTimestamp to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricTCPTimestamp(metricTCPTimestamp *string) {
	o.MetricTCPTimestamp = metricTCPTimestamp
}

// WithMetricThroughputRead adds the metricThroughputRead to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricThroughputRead(metricThroughputRead *int64) *NvmeServiceModifyCollectionParams {
	o.SetMetricThroughputRead(metricThroughputRead)
	return o
}

// SetMetricThroughputRead adds the metricThroughputRead to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricThroughputRead(metricThroughputRead *int64) {
	o.MetricThroughputRead = metricThroughputRead
}

// WithMetricThroughputTotal adds the metricThroughputTotal to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricThroughputTotal(metricThroughputTotal *int64) *NvmeServiceModifyCollectionParams {
	o.SetMetricThroughputTotal(metricThroughputTotal)
	return o
}

// SetMetricThroughputTotal adds the metricThroughputTotal to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricThroughputTotal(metricThroughputTotal *int64) {
	o.MetricThroughputTotal = metricThroughputTotal
}

// WithMetricThroughputWrite adds the metricThroughputWrite to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricThroughputWrite(metricThroughputWrite *int64) *NvmeServiceModifyCollectionParams {
	o.SetMetricThroughputWrite(metricThroughputWrite)
	return o
}

// SetMetricThroughputWrite adds the metricThroughputWrite to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricThroughputWrite(metricThroughputWrite *int64) {
	o.MetricThroughputWrite = metricThroughputWrite
}

// WithMetricTimestamp adds the metricTimestamp to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithMetricTimestamp(metricTimestamp *string) *NvmeServiceModifyCollectionParams {
	o.SetMetricTimestamp(metricTimestamp)
	return o
}

// SetMetricTimestamp adds the metricTimestamp to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetMetricTimestamp(metricTimestamp *string) {
	o.MetricTimestamp = metricTimestamp
}

// WithReturnRecords adds the returnRecords to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithReturnRecords(returnRecords *bool) *NvmeServiceModifyCollectionParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithReturnTimeout(returnTimeout *int64) *NvmeServiceModifyCollectionParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithSerialRecords adds the serialRecords to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithSerialRecords(serialRecords *bool) *NvmeServiceModifyCollectionParams {
	o.SetSerialRecords(serialRecords)
	return o
}

// SetSerialRecords adds the serialRecords to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetSerialRecords(serialRecords *bool) {
	o.SerialRecords = serialRecords
}

// WithStatisticsFcIopsRawOther adds the statisticsFcIopsRawOther to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithStatisticsFcIopsRawOther(statisticsFcIopsRawOther *int64) *NvmeServiceModifyCollectionParams {
	o.SetStatisticsFcIopsRawOther(statisticsFcIopsRawOther)
	return o
}

// SetStatisticsFcIopsRawOther adds the statisticsFcIopsRawOther to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetStatisticsFcIopsRawOther(statisticsFcIopsRawOther *int64) {
	o.StatisticsFcIopsRawOther = statisticsFcIopsRawOther
}

// WithStatisticsFcIopsRawRead adds the statisticsFcIopsRawRead to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithStatisticsFcIopsRawRead(statisticsFcIopsRawRead *int64) *NvmeServiceModifyCollectionParams {
	o.SetStatisticsFcIopsRawRead(statisticsFcIopsRawRead)
	return o
}

// SetStatisticsFcIopsRawRead adds the statisticsFcIopsRawRead to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetStatisticsFcIopsRawRead(statisticsFcIopsRawRead *int64) {
	o.StatisticsFcIopsRawRead = statisticsFcIopsRawRead
}

// WithStatisticsFcIopsRawTotal adds the statisticsFcIopsRawTotal to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithStatisticsFcIopsRawTotal(statisticsFcIopsRawTotal *int64) *NvmeServiceModifyCollectionParams {
	o.SetStatisticsFcIopsRawTotal(statisticsFcIopsRawTotal)
	return o
}

// SetStatisticsFcIopsRawTotal adds the statisticsFcIopsRawTotal to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetStatisticsFcIopsRawTotal(statisticsFcIopsRawTotal *int64) {
	o.StatisticsFcIopsRawTotal = statisticsFcIopsRawTotal
}

// WithStatisticsFcIopsRawWrite adds the statisticsFcIopsRawWrite to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithStatisticsFcIopsRawWrite(statisticsFcIopsRawWrite *int64) *NvmeServiceModifyCollectionParams {
	o.SetStatisticsFcIopsRawWrite(statisticsFcIopsRawWrite)
	return o
}

// SetStatisticsFcIopsRawWrite adds the statisticsFcIopsRawWrite to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetStatisticsFcIopsRawWrite(statisticsFcIopsRawWrite *int64) {
	o.StatisticsFcIopsRawWrite = statisticsFcIopsRawWrite
}

// WithStatisticsFcLatencyRawOther adds the statisticsFcLatencyRawOther to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithStatisticsFcLatencyRawOther(statisticsFcLatencyRawOther *int64) *NvmeServiceModifyCollectionParams {
	o.SetStatisticsFcLatencyRawOther(statisticsFcLatencyRawOther)
	return o
}

// SetStatisticsFcLatencyRawOther adds the statisticsFcLatencyRawOther to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetStatisticsFcLatencyRawOther(statisticsFcLatencyRawOther *int64) {
	o.StatisticsFcLatencyRawOther = statisticsFcLatencyRawOther
}

// WithStatisticsFcLatencyRawRead adds the statisticsFcLatencyRawRead to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithStatisticsFcLatencyRawRead(statisticsFcLatencyRawRead *int64) *NvmeServiceModifyCollectionParams {
	o.SetStatisticsFcLatencyRawRead(statisticsFcLatencyRawRead)
	return o
}

// SetStatisticsFcLatencyRawRead adds the statisticsFcLatencyRawRead to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetStatisticsFcLatencyRawRead(statisticsFcLatencyRawRead *int64) {
	o.StatisticsFcLatencyRawRead = statisticsFcLatencyRawRead
}

// WithStatisticsFcLatencyRawTotal adds the statisticsFcLatencyRawTotal to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithStatisticsFcLatencyRawTotal(statisticsFcLatencyRawTotal *int64) *NvmeServiceModifyCollectionParams {
	o.SetStatisticsFcLatencyRawTotal(statisticsFcLatencyRawTotal)
	return o
}

// SetStatisticsFcLatencyRawTotal adds the statisticsFcLatencyRawTotal to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetStatisticsFcLatencyRawTotal(statisticsFcLatencyRawTotal *int64) {
	o.StatisticsFcLatencyRawTotal = statisticsFcLatencyRawTotal
}

// WithStatisticsFcLatencyRawWrite adds the statisticsFcLatencyRawWrite to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithStatisticsFcLatencyRawWrite(statisticsFcLatencyRawWrite *int64) *NvmeServiceModifyCollectionParams {
	o.SetStatisticsFcLatencyRawWrite(statisticsFcLatencyRawWrite)
	return o
}

// SetStatisticsFcLatencyRawWrite adds the statisticsFcLatencyRawWrite to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetStatisticsFcLatencyRawWrite(statisticsFcLatencyRawWrite *int64) {
	o.StatisticsFcLatencyRawWrite = statisticsFcLatencyRawWrite
}

// WithStatisticsFcStatus adds the statisticsFcStatus to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithStatisticsFcStatus(statisticsFcStatus *string) *NvmeServiceModifyCollectionParams {
	o.SetStatisticsFcStatus(statisticsFcStatus)
	return o
}

// SetStatisticsFcStatus adds the statisticsFcStatus to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetStatisticsFcStatus(statisticsFcStatus *string) {
	o.StatisticsFcStatus = statisticsFcStatus
}

// WithStatisticsFcThroughputRawRead adds the statisticsFcThroughputRawRead to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithStatisticsFcThroughputRawRead(statisticsFcThroughputRawRead *int64) *NvmeServiceModifyCollectionParams {
	o.SetStatisticsFcThroughputRawRead(statisticsFcThroughputRawRead)
	return o
}

// SetStatisticsFcThroughputRawRead adds the statisticsFcThroughputRawRead to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetStatisticsFcThroughputRawRead(statisticsFcThroughputRawRead *int64) {
	o.StatisticsFcThroughputRawRead = statisticsFcThroughputRawRead
}

// WithStatisticsFcThroughputRawTotal adds the statisticsFcThroughputRawTotal to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithStatisticsFcThroughputRawTotal(statisticsFcThroughputRawTotal *int64) *NvmeServiceModifyCollectionParams {
	o.SetStatisticsFcThroughputRawTotal(statisticsFcThroughputRawTotal)
	return o
}

// SetStatisticsFcThroughputRawTotal adds the statisticsFcThroughputRawTotal to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetStatisticsFcThroughputRawTotal(statisticsFcThroughputRawTotal *int64) {
	o.StatisticsFcThroughputRawTotal = statisticsFcThroughputRawTotal
}

// WithStatisticsFcThroughputRawWrite adds the statisticsFcThroughputRawWrite to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithStatisticsFcThroughputRawWrite(statisticsFcThroughputRawWrite *int64) *NvmeServiceModifyCollectionParams {
	o.SetStatisticsFcThroughputRawWrite(statisticsFcThroughputRawWrite)
	return o
}

// SetStatisticsFcThroughputRawWrite adds the statisticsFcThroughputRawWrite to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetStatisticsFcThroughputRawWrite(statisticsFcThroughputRawWrite *int64) {
	o.StatisticsFcThroughputRawWrite = statisticsFcThroughputRawWrite
}

// WithStatisticsFcTimestamp adds the statisticsFcTimestamp to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithStatisticsFcTimestamp(statisticsFcTimestamp *string) *NvmeServiceModifyCollectionParams {
	o.SetStatisticsFcTimestamp(statisticsFcTimestamp)
	return o
}

// SetStatisticsFcTimestamp adds the statisticsFcTimestamp to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetStatisticsFcTimestamp(statisticsFcTimestamp *string) {
	o.StatisticsFcTimestamp = statisticsFcTimestamp
}

// WithStatisticsIopsRawOther adds the statisticsIopsRawOther to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithStatisticsIopsRawOther(statisticsIopsRawOther *int64) *NvmeServiceModifyCollectionParams {
	o.SetStatisticsIopsRawOther(statisticsIopsRawOther)
	return o
}

// SetStatisticsIopsRawOther adds the statisticsIopsRawOther to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetStatisticsIopsRawOther(statisticsIopsRawOther *int64) {
	o.StatisticsIopsRawOther = statisticsIopsRawOther
}

// WithStatisticsIopsRawRead adds the statisticsIopsRawRead to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithStatisticsIopsRawRead(statisticsIopsRawRead *int64) *NvmeServiceModifyCollectionParams {
	o.SetStatisticsIopsRawRead(statisticsIopsRawRead)
	return o
}

// SetStatisticsIopsRawRead adds the statisticsIopsRawRead to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetStatisticsIopsRawRead(statisticsIopsRawRead *int64) {
	o.StatisticsIopsRawRead = statisticsIopsRawRead
}

// WithStatisticsIopsRawTotal adds the statisticsIopsRawTotal to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithStatisticsIopsRawTotal(statisticsIopsRawTotal *int64) *NvmeServiceModifyCollectionParams {
	o.SetStatisticsIopsRawTotal(statisticsIopsRawTotal)
	return o
}

// SetStatisticsIopsRawTotal adds the statisticsIopsRawTotal to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetStatisticsIopsRawTotal(statisticsIopsRawTotal *int64) {
	o.StatisticsIopsRawTotal = statisticsIopsRawTotal
}

// WithStatisticsIopsRawWrite adds the statisticsIopsRawWrite to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithStatisticsIopsRawWrite(statisticsIopsRawWrite *int64) *NvmeServiceModifyCollectionParams {
	o.SetStatisticsIopsRawWrite(statisticsIopsRawWrite)
	return o
}

// SetStatisticsIopsRawWrite adds the statisticsIopsRawWrite to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetStatisticsIopsRawWrite(statisticsIopsRawWrite *int64) {
	o.StatisticsIopsRawWrite = statisticsIopsRawWrite
}

// WithStatisticsLatencyRawOther adds the statisticsLatencyRawOther to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithStatisticsLatencyRawOther(statisticsLatencyRawOther *int64) *NvmeServiceModifyCollectionParams {
	o.SetStatisticsLatencyRawOther(statisticsLatencyRawOther)
	return o
}

// SetStatisticsLatencyRawOther adds the statisticsLatencyRawOther to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetStatisticsLatencyRawOther(statisticsLatencyRawOther *int64) {
	o.StatisticsLatencyRawOther = statisticsLatencyRawOther
}

// WithStatisticsLatencyRawRead adds the statisticsLatencyRawRead to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithStatisticsLatencyRawRead(statisticsLatencyRawRead *int64) *NvmeServiceModifyCollectionParams {
	o.SetStatisticsLatencyRawRead(statisticsLatencyRawRead)
	return o
}

// SetStatisticsLatencyRawRead adds the statisticsLatencyRawRead to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetStatisticsLatencyRawRead(statisticsLatencyRawRead *int64) {
	o.StatisticsLatencyRawRead = statisticsLatencyRawRead
}

// WithStatisticsLatencyRawTotal adds the statisticsLatencyRawTotal to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithStatisticsLatencyRawTotal(statisticsLatencyRawTotal *int64) *NvmeServiceModifyCollectionParams {
	o.SetStatisticsLatencyRawTotal(statisticsLatencyRawTotal)
	return o
}

// SetStatisticsLatencyRawTotal adds the statisticsLatencyRawTotal to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetStatisticsLatencyRawTotal(statisticsLatencyRawTotal *int64) {
	o.StatisticsLatencyRawTotal = statisticsLatencyRawTotal
}

// WithStatisticsLatencyRawWrite adds the statisticsLatencyRawWrite to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithStatisticsLatencyRawWrite(statisticsLatencyRawWrite *int64) *NvmeServiceModifyCollectionParams {
	o.SetStatisticsLatencyRawWrite(statisticsLatencyRawWrite)
	return o
}

// SetStatisticsLatencyRawWrite adds the statisticsLatencyRawWrite to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetStatisticsLatencyRawWrite(statisticsLatencyRawWrite *int64) {
	o.StatisticsLatencyRawWrite = statisticsLatencyRawWrite
}

// WithStatisticsStatus adds the statisticsStatus to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithStatisticsStatus(statisticsStatus *string) *NvmeServiceModifyCollectionParams {
	o.SetStatisticsStatus(statisticsStatus)
	return o
}

// SetStatisticsStatus adds the statisticsStatus to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetStatisticsStatus(statisticsStatus *string) {
	o.StatisticsStatus = statisticsStatus
}

// WithStatisticsTCPIopsRawOther adds the statisticsTCPIopsRawOther to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithStatisticsTCPIopsRawOther(statisticsTCPIopsRawOther *int64) *NvmeServiceModifyCollectionParams {
	o.SetStatisticsTCPIopsRawOther(statisticsTCPIopsRawOther)
	return o
}

// SetStatisticsTCPIopsRawOther adds the statisticsTcpIopsRawOther to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetStatisticsTCPIopsRawOther(statisticsTCPIopsRawOther *int64) {
	o.StatisticsTCPIopsRawOther = statisticsTCPIopsRawOther
}

// WithStatisticsTCPIopsRawRead adds the statisticsTCPIopsRawRead to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithStatisticsTCPIopsRawRead(statisticsTCPIopsRawRead *int64) *NvmeServiceModifyCollectionParams {
	o.SetStatisticsTCPIopsRawRead(statisticsTCPIopsRawRead)
	return o
}

// SetStatisticsTCPIopsRawRead adds the statisticsTcpIopsRawRead to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetStatisticsTCPIopsRawRead(statisticsTCPIopsRawRead *int64) {
	o.StatisticsTCPIopsRawRead = statisticsTCPIopsRawRead
}

// WithStatisticsTCPIopsRawTotal adds the statisticsTCPIopsRawTotal to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithStatisticsTCPIopsRawTotal(statisticsTCPIopsRawTotal *int64) *NvmeServiceModifyCollectionParams {
	o.SetStatisticsTCPIopsRawTotal(statisticsTCPIopsRawTotal)
	return o
}

// SetStatisticsTCPIopsRawTotal adds the statisticsTcpIopsRawTotal to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetStatisticsTCPIopsRawTotal(statisticsTCPIopsRawTotal *int64) {
	o.StatisticsTCPIopsRawTotal = statisticsTCPIopsRawTotal
}

// WithStatisticsTCPIopsRawWrite adds the statisticsTCPIopsRawWrite to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithStatisticsTCPIopsRawWrite(statisticsTCPIopsRawWrite *int64) *NvmeServiceModifyCollectionParams {
	o.SetStatisticsTCPIopsRawWrite(statisticsTCPIopsRawWrite)
	return o
}

// SetStatisticsTCPIopsRawWrite adds the statisticsTcpIopsRawWrite to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetStatisticsTCPIopsRawWrite(statisticsTCPIopsRawWrite *int64) {
	o.StatisticsTCPIopsRawWrite = statisticsTCPIopsRawWrite
}

// WithStatisticsTCPLatencyRawOther adds the statisticsTCPLatencyRawOther to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithStatisticsTCPLatencyRawOther(statisticsTCPLatencyRawOther *int64) *NvmeServiceModifyCollectionParams {
	o.SetStatisticsTCPLatencyRawOther(statisticsTCPLatencyRawOther)
	return o
}

// SetStatisticsTCPLatencyRawOther adds the statisticsTcpLatencyRawOther to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetStatisticsTCPLatencyRawOther(statisticsTCPLatencyRawOther *int64) {
	o.StatisticsTCPLatencyRawOther = statisticsTCPLatencyRawOther
}

// WithStatisticsTCPLatencyRawRead adds the statisticsTCPLatencyRawRead to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithStatisticsTCPLatencyRawRead(statisticsTCPLatencyRawRead *int64) *NvmeServiceModifyCollectionParams {
	o.SetStatisticsTCPLatencyRawRead(statisticsTCPLatencyRawRead)
	return o
}

// SetStatisticsTCPLatencyRawRead adds the statisticsTcpLatencyRawRead to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetStatisticsTCPLatencyRawRead(statisticsTCPLatencyRawRead *int64) {
	o.StatisticsTCPLatencyRawRead = statisticsTCPLatencyRawRead
}

// WithStatisticsTCPLatencyRawTotal adds the statisticsTCPLatencyRawTotal to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithStatisticsTCPLatencyRawTotal(statisticsTCPLatencyRawTotal *int64) *NvmeServiceModifyCollectionParams {
	o.SetStatisticsTCPLatencyRawTotal(statisticsTCPLatencyRawTotal)
	return o
}

// SetStatisticsTCPLatencyRawTotal adds the statisticsTcpLatencyRawTotal to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetStatisticsTCPLatencyRawTotal(statisticsTCPLatencyRawTotal *int64) {
	o.StatisticsTCPLatencyRawTotal = statisticsTCPLatencyRawTotal
}

// WithStatisticsTCPLatencyRawWrite adds the statisticsTCPLatencyRawWrite to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithStatisticsTCPLatencyRawWrite(statisticsTCPLatencyRawWrite *int64) *NvmeServiceModifyCollectionParams {
	o.SetStatisticsTCPLatencyRawWrite(statisticsTCPLatencyRawWrite)
	return o
}

// SetStatisticsTCPLatencyRawWrite adds the statisticsTcpLatencyRawWrite to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetStatisticsTCPLatencyRawWrite(statisticsTCPLatencyRawWrite *int64) {
	o.StatisticsTCPLatencyRawWrite = statisticsTCPLatencyRawWrite
}

// WithStatisticsTCPStatus adds the statisticsTCPStatus to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithStatisticsTCPStatus(statisticsTCPStatus *string) *NvmeServiceModifyCollectionParams {
	o.SetStatisticsTCPStatus(statisticsTCPStatus)
	return o
}

// SetStatisticsTCPStatus adds the statisticsTcpStatus to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetStatisticsTCPStatus(statisticsTCPStatus *string) {
	o.StatisticsTCPStatus = statisticsTCPStatus
}

// WithStatisticsTCPThroughputRawRead adds the statisticsTCPThroughputRawRead to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithStatisticsTCPThroughputRawRead(statisticsTCPThroughputRawRead *int64) *NvmeServiceModifyCollectionParams {
	o.SetStatisticsTCPThroughputRawRead(statisticsTCPThroughputRawRead)
	return o
}

// SetStatisticsTCPThroughputRawRead adds the statisticsTcpThroughputRawRead to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetStatisticsTCPThroughputRawRead(statisticsTCPThroughputRawRead *int64) {
	o.StatisticsTCPThroughputRawRead = statisticsTCPThroughputRawRead
}

// WithStatisticsTCPThroughputRawTotal adds the statisticsTCPThroughputRawTotal to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithStatisticsTCPThroughputRawTotal(statisticsTCPThroughputRawTotal *int64) *NvmeServiceModifyCollectionParams {
	o.SetStatisticsTCPThroughputRawTotal(statisticsTCPThroughputRawTotal)
	return o
}

// SetStatisticsTCPThroughputRawTotal adds the statisticsTcpThroughputRawTotal to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetStatisticsTCPThroughputRawTotal(statisticsTCPThroughputRawTotal *int64) {
	o.StatisticsTCPThroughputRawTotal = statisticsTCPThroughputRawTotal
}

// WithStatisticsTCPThroughputRawWrite adds the statisticsTCPThroughputRawWrite to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithStatisticsTCPThroughputRawWrite(statisticsTCPThroughputRawWrite *int64) *NvmeServiceModifyCollectionParams {
	o.SetStatisticsTCPThroughputRawWrite(statisticsTCPThroughputRawWrite)
	return o
}

// SetStatisticsTCPThroughputRawWrite adds the statisticsTcpThroughputRawWrite to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetStatisticsTCPThroughputRawWrite(statisticsTCPThroughputRawWrite *int64) {
	o.StatisticsTCPThroughputRawWrite = statisticsTCPThroughputRawWrite
}

// WithStatisticsTCPTimestamp adds the statisticsTCPTimestamp to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithStatisticsTCPTimestamp(statisticsTCPTimestamp *string) *NvmeServiceModifyCollectionParams {
	o.SetStatisticsTCPTimestamp(statisticsTCPTimestamp)
	return o
}

// SetStatisticsTCPTimestamp adds the statisticsTcpTimestamp to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetStatisticsTCPTimestamp(statisticsTCPTimestamp *string) {
	o.StatisticsTCPTimestamp = statisticsTCPTimestamp
}

// WithStatisticsThroughputRawRead adds the statisticsThroughputRawRead to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithStatisticsThroughputRawRead(statisticsThroughputRawRead *int64) *NvmeServiceModifyCollectionParams {
	o.SetStatisticsThroughputRawRead(statisticsThroughputRawRead)
	return o
}

// SetStatisticsThroughputRawRead adds the statisticsThroughputRawRead to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetStatisticsThroughputRawRead(statisticsThroughputRawRead *int64) {
	o.StatisticsThroughputRawRead = statisticsThroughputRawRead
}

// WithStatisticsThroughputRawTotal adds the statisticsThroughputRawTotal to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithStatisticsThroughputRawTotal(statisticsThroughputRawTotal *int64) *NvmeServiceModifyCollectionParams {
	o.SetStatisticsThroughputRawTotal(statisticsThroughputRawTotal)
	return o
}

// SetStatisticsThroughputRawTotal adds the statisticsThroughputRawTotal to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetStatisticsThroughputRawTotal(statisticsThroughputRawTotal *int64) {
	o.StatisticsThroughputRawTotal = statisticsThroughputRawTotal
}

// WithStatisticsThroughputRawWrite adds the statisticsThroughputRawWrite to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithStatisticsThroughputRawWrite(statisticsThroughputRawWrite *int64) *NvmeServiceModifyCollectionParams {
	o.SetStatisticsThroughputRawWrite(statisticsThroughputRawWrite)
	return o
}

// SetStatisticsThroughputRawWrite adds the statisticsThroughputRawWrite to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetStatisticsThroughputRawWrite(statisticsThroughputRawWrite *int64) {
	o.StatisticsThroughputRawWrite = statisticsThroughputRawWrite
}

// WithStatisticsTimestamp adds the statisticsTimestamp to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithStatisticsTimestamp(statisticsTimestamp *string) *NvmeServiceModifyCollectionParams {
	o.SetStatisticsTimestamp(statisticsTimestamp)
	return o
}

// SetStatisticsTimestamp adds the statisticsTimestamp to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetStatisticsTimestamp(statisticsTimestamp *string) {
	o.StatisticsTimestamp = statisticsTimestamp
}

// WithSvmName adds the svmName to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithSvmName(svmName *string) *NvmeServiceModifyCollectionParams {
	o.SetSvmName(svmName)
	return o
}

// SetSvmName adds the svmName to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetSvmName(svmName *string) {
	o.SvmName = svmName
}

// WithSvmUUID adds the svmUUID to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) WithSvmUUID(svmUUID *string) *NvmeServiceModifyCollectionParams {
	o.SetSvmUUID(svmUUID)
	return o
}

// SetSvmUUID adds the svmUuid to the nvme service modify collection params
func (o *NvmeServiceModifyCollectionParams) SetSvmUUID(svmUUID *string) {
	o.SvmUUID = svmUUID
}

// WriteToRequest writes these params to a swagger request
func (o *NvmeServiceModifyCollectionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ContinueOnFailure != nil {

		// query param continue_on_failure
		var qrContinueOnFailure bool

		if o.ContinueOnFailure != nil {
			qrContinueOnFailure = *o.ContinueOnFailure
		}
		qContinueOnFailure := swag.FormatBool(qrContinueOnFailure)
		if qContinueOnFailure != "" {

			if err := r.SetQueryParam("continue_on_failure", qContinueOnFailure); err != nil {
				return err
			}
		}
	}

	if o.Enabled != nil {

		// query param enabled
		var qrEnabled bool

		if o.Enabled != nil {
			qrEnabled = *o.Enabled
		}
		qEnabled := swag.FormatBool(qrEnabled)
		if qEnabled != "" {

			if err := r.SetQueryParam("enabled", qEnabled); err != nil {
				return err
			}
		}
	}
	if err := r.SetBodyParam(o.Info); err != nil {
		return err
	}

	if o.MetricDuration != nil {

		// query param metric.duration
		var qrMetricDuration string

		if o.MetricDuration != nil {
			qrMetricDuration = *o.MetricDuration
		}
		qMetricDuration := qrMetricDuration
		if qMetricDuration != "" {

			if err := r.SetQueryParam("metric.duration", qMetricDuration); err != nil {
				return err
			}
		}
	}

	if o.MetricFcDuration != nil {

		// query param metric.fc.duration
		var qrMetricFcDuration string

		if o.MetricFcDuration != nil {
			qrMetricFcDuration = *o.MetricFcDuration
		}
		qMetricFcDuration := qrMetricFcDuration
		if qMetricFcDuration != "" {

			if err := r.SetQueryParam("metric.fc.duration", qMetricFcDuration); err != nil {
				return err
			}
		}
	}

	if o.MetricFcIopsOther != nil {

		// query param metric.fc.iops.other
		var qrMetricFcIopsOther int64

		if o.MetricFcIopsOther != nil {
			qrMetricFcIopsOther = *o.MetricFcIopsOther
		}
		qMetricFcIopsOther := swag.FormatInt64(qrMetricFcIopsOther)
		if qMetricFcIopsOther != "" {

			if err := r.SetQueryParam("metric.fc.iops.other", qMetricFcIopsOther); err != nil {
				return err
			}
		}
	}

	if o.MetricFcIopsRead != nil {

		// query param metric.fc.iops.read
		var qrMetricFcIopsRead int64

		if o.MetricFcIopsRead != nil {
			qrMetricFcIopsRead = *o.MetricFcIopsRead
		}
		qMetricFcIopsRead := swag.FormatInt64(qrMetricFcIopsRead)
		if qMetricFcIopsRead != "" {

			if err := r.SetQueryParam("metric.fc.iops.read", qMetricFcIopsRead); err != nil {
				return err
			}
		}
	}

	if o.MetricFcIopsTotal != nil {

		// query param metric.fc.iops.total
		var qrMetricFcIopsTotal int64

		if o.MetricFcIopsTotal != nil {
			qrMetricFcIopsTotal = *o.MetricFcIopsTotal
		}
		qMetricFcIopsTotal := swag.FormatInt64(qrMetricFcIopsTotal)
		if qMetricFcIopsTotal != "" {

			if err := r.SetQueryParam("metric.fc.iops.total", qMetricFcIopsTotal); err != nil {
				return err
			}
		}
	}

	if o.MetricFcIopsWrite != nil {

		// query param metric.fc.iops.write
		var qrMetricFcIopsWrite int64

		if o.MetricFcIopsWrite != nil {
			qrMetricFcIopsWrite = *o.MetricFcIopsWrite
		}
		qMetricFcIopsWrite := swag.FormatInt64(qrMetricFcIopsWrite)
		if qMetricFcIopsWrite != "" {

			if err := r.SetQueryParam("metric.fc.iops.write", qMetricFcIopsWrite); err != nil {
				return err
			}
		}
	}

	if o.MetricFcLatencyOther != nil {

		// query param metric.fc.latency.other
		var qrMetricFcLatencyOther int64

		if o.MetricFcLatencyOther != nil {
			qrMetricFcLatencyOther = *o.MetricFcLatencyOther
		}
		qMetricFcLatencyOther := swag.FormatInt64(qrMetricFcLatencyOther)
		if qMetricFcLatencyOther != "" {

			if err := r.SetQueryParam("metric.fc.latency.other", qMetricFcLatencyOther); err != nil {
				return err
			}
		}
	}

	if o.MetricFcLatencyRead != nil {

		// query param metric.fc.latency.read
		var qrMetricFcLatencyRead int64

		if o.MetricFcLatencyRead != nil {
			qrMetricFcLatencyRead = *o.MetricFcLatencyRead
		}
		qMetricFcLatencyRead := swag.FormatInt64(qrMetricFcLatencyRead)
		if qMetricFcLatencyRead != "" {

			if err := r.SetQueryParam("metric.fc.latency.read", qMetricFcLatencyRead); err != nil {
				return err
			}
		}
	}

	if o.MetricFcLatencyTotal != nil {

		// query param metric.fc.latency.total
		var qrMetricFcLatencyTotal int64

		if o.MetricFcLatencyTotal != nil {
			qrMetricFcLatencyTotal = *o.MetricFcLatencyTotal
		}
		qMetricFcLatencyTotal := swag.FormatInt64(qrMetricFcLatencyTotal)
		if qMetricFcLatencyTotal != "" {

			if err := r.SetQueryParam("metric.fc.latency.total", qMetricFcLatencyTotal); err != nil {
				return err
			}
		}
	}

	if o.MetricFcLatencyWrite != nil {

		// query param metric.fc.latency.write
		var qrMetricFcLatencyWrite int64

		if o.MetricFcLatencyWrite != nil {
			qrMetricFcLatencyWrite = *o.MetricFcLatencyWrite
		}
		qMetricFcLatencyWrite := swag.FormatInt64(qrMetricFcLatencyWrite)
		if qMetricFcLatencyWrite != "" {

			if err := r.SetQueryParam("metric.fc.latency.write", qMetricFcLatencyWrite); err != nil {
				return err
			}
		}
	}

	if o.MetricFcStatus != nil {

		// query param metric.fc.status
		var qrMetricFcStatus string

		if o.MetricFcStatus != nil {
			qrMetricFcStatus = *o.MetricFcStatus
		}
		qMetricFcStatus := qrMetricFcStatus
		if qMetricFcStatus != "" {

			if err := r.SetQueryParam("metric.fc.status", qMetricFcStatus); err != nil {
				return err
			}
		}
	}

	if o.MetricFcThroughputRead != nil {

		// query param metric.fc.throughput.read
		var qrMetricFcThroughputRead int64

		if o.MetricFcThroughputRead != nil {
			qrMetricFcThroughputRead = *o.MetricFcThroughputRead
		}
		qMetricFcThroughputRead := swag.FormatInt64(qrMetricFcThroughputRead)
		if qMetricFcThroughputRead != "" {

			if err := r.SetQueryParam("metric.fc.throughput.read", qMetricFcThroughputRead); err != nil {
				return err
			}
		}
	}

	if o.MetricFcThroughputTotal != nil {

		// query param metric.fc.throughput.total
		var qrMetricFcThroughputTotal int64

		if o.MetricFcThroughputTotal != nil {
			qrMetricFcThroughputTotal = *o.MetricFcThroughputTotal
		}
		qMetricFcThroughputTotal := swag.FormatInt64(qrMetricFcThroughputTotal)
		if qMetricFcThroughputTotal != "" {

			if err := r.SetQueryParam("metric.fc.throughput.total", qMetricFcThroughputTotal); err != nil {
				return err
			}
		}
	}

	if o.MetricFcThroughputWrite != nil {

		// query param metric.fc.throughput.write
		var qrMetricFcThroughputWrite int64

		if o.MetricFcThroughputWrite != nil {
			qrMetricFcThroughputWrite = *o.MetricFcThroughputWrite
		}
		qMetricFcThroughputWrite := swag.FormatInt64(qrMetricFcThroughputWrite)
		if qMetricFcThroughputWrite != "" {

			if err := r.SetQueryParam("metric.fc.throughput.write", qMetricFcThroughputWrite); err != nil {
				return err
			}
		}
	}

	if o.MetricFcTimestamp != nil {

		// query param metric.fc.timestamp
		var qrMetricFcTimestamp string

		if o.MetricFcTimestamp != nil {
			qrMetricFcTimestamp = *o.MetricFcTimestamp
		}
		qMetricFcTimestamp := qrMetricFcTimestamp
		if qMetricFcTimestamp != "" {

			if err := r.SetQueryParam("metric.fc.timestamp", qMetricFcTimestamp); err != nil {
				return err
			}
		}
	}

	if o.MetricIopsOther != nil {

		// query param metric.iops.other
		var qrMetricIopsOther int64

		if o.MetricIopsOther != nil {
			qrMetricIopsOther = *o.MetricIopsOther
		}
		qMetricIopsOther := swag.FormatInt64(qrMetricIopsOther)
		if qMetricIopsOther != "" {

			if err := r.SetQueryParam("metric.iops.other", qMetricIopsOther); err != nil {
				return err
			}
		}
	}

	if o.MetricIopsRead != nil {

		// query param metric.iops.read
		var qrMetricIopsRead int64

		if o.MetricIopsRead != nil {
			qrMetricIopsRead = *o.MetricIopsRead
		}
		qMetricIopsRead := swag.FormatInt64(qrMetricIopsRead)
		if qMetricIopsRead != "" {

			if err := r.SetQueryParam("metric.iops.read", qMetricIopsRead); err != nil {
				return err
			}
		}
	}

	if o.MetricIopsTotal != nil {

		// query param metric.iops.total
		var qrMetricIopsTotal int64

		if o.MetricIopsTotal != nil {
			qrMetricIopsTotal = *o.MetricIopsTotal
		}
		qMetricIopsTotal := swag.FormatInt64(qrMetricIopsTotal)
		if qMetricIopsTotal != "" {

			if err := r.SetQueryParam("metric.iops.total", qMetricIopsTotal); err != nil {
				return err
			}
		}
	}

	if o.MetricIopsWrite != nil {

		// query param metric.iops.write
		var qrMetricIopsWrite int64

		if o.MetricIopsWrite != nil {
			qrMetricIopsWrite = *o.MetricIopsWrite
		}
		qMetricIopsWrite := swag.FormatInt64(qrMetricIopsWrite)
		if qMetricIopsWrite != "" {

			if err := r.SetQueryParam("metric.iops.write", qMetricIopsWrite); err != nil {
				return err
			}
		}
	}

	if o.MetricLatencyOther != nil {

		// query param metric.latency.other
		var qrMetricLatencyOther int64

		if o.MetricLatencyOther != nil {
			qrMetricLatencyOther = *o.MetricLatencyOther
		}
		qMetricLatencyOther := swag.FormatInt64(qrMetricLatencyOther)
		if qMetricLatencyOther != "" {

			if err := r.SetQueryParam("metric.latency.other", qMetricLatencyOther); err != nil {
				return err
			}
		}
	}

	if o.MetricLatencyRead != nil {

		// query param metric.latency.read
		var qrMetricLatencyRead int64

		if o.MetricLatencyRead != nil {
			qrMetricLatencyRead = *o.MetricLatencyRead
		}
		qMetricLatencyRead := swag.FormatInt64(qrMetricLatencyRead)
		if qMetricLatencyRead != "" {

			if err := r.SetQueryParam("metric.latency.read", qMetricLatencyRead); err != nil {
				return err
			}
		}
	}

	if o.MetricLatencyTotal != nil {

		// query param metric.latency.total
		var qrMetricLatencyTotal int64

		if o.MetricLatencyTotal != nil {
			qrMetricLatencyTotal = *o.MetricLatencyTotal
		}
		qMetricLatencyTotal := swag.FormatInt64(qrMetricLatencyTotal)
		if qMetricLatencyTotal != "" {

			if err := r.SetQueryParam("metric.latency.total", qMetricLatencyTotal); err != nil {
				return err
			}
		}
	}

	if o.MetricLatencyWrite != nil {

		// query param metric.latency.write
		var qrMetricLatencyWrite int64

		if o.MetricLatencyWrite != nil {
			qrMetricLatencyWrite = *o.MetricLatencyWrite
		}
		qMetricLatencyWrite := swag.FormatInt64(qrMetricLatencyWrite)
		if qMetricLatencyWrite != "" {

			if err := r.SetQueryParam("metric.latency.write", qMetricLatencyWrite); err != nil {
				return err
			}
		}
	}

	if o.MetricStatus != nil {

		// query param metric.status
		var qrMetricStatus string

		if o.MetricStatus != nil {
			qrMetricStatus = *o.MetricStatus
		}
		qMetricStatus := qrMetricStatus
		if qMetricStatus != "" {

			if err := r.SetQueryParam("metric.status", qMetricStatus); err != nil {
				return err
			}
		}
	}

	if o.MetricTCPDuration != nil {

		// query param metric.tcp.duration
		var qrMetricTCPDuration string

		if o.MetricTCPDuration != nil {
			qrMetricTCPDuration = *o.MetricTCPDuration
		}
		qMetricTCPDuration := qrMetricTCPDuration
		if qMetricTCPDuration != "" {

			if err := r.SetQueryParam("metric.tcp.duration", qMetricTCPDuration); err != nil {
				return err
			}
		}
	}

	if o.MetricTCPIopsOther != nil {

		// query param metric.tcp.iops.other
		var qrMetricTCPIopsOther int64

		if o.MetricTCPIopsOther != nil {
			qrMetricTCPIopsOther = *o.MetricTCPIopsOther
		}
		qMetricTCPIopsOther := swag.FormatInt64(qrMetricTCPIopsOther)
		if qMetricTCPIopsOther != "" {

			if err := r.SetQueryParam("metric.tcp.iops.other", qMetricTCPIopsOther); err != nil {
				return err
			}
		}
	}

	if o.MetricTCPIopsRead != nil {

		// query param metric.tcp.iops.read
		var qrMetricTCPIopsRead int64

		if o.MetricTCPIopsRead != nil {
			qrMetricTCPIopsRead = *o.MetricTCPIopsRead
		}
		qMetricTCPIopsRead := swag.FormatInt64(qrMetricTCPIopsRead)
		if qMetricTCPIopsRead != "" {

			if err := r.SetQueryParam("metric.tcp.iops.read", qMetricTCPIopsRead); err != nil {
				return err
			}
		}
	}

	if o.MetricTCPIopsTotal != nil {

		// query param metric.tcp.iops.total
		var qrMetricTCPIopsTotal int64

		if o.MetricTCPIopsTotal != nil {
			qrMetricTCPIopsTotal = *o.MetricTCPIopsTotal
		}
		qMetricTCPIopsTotal := swag.FormatInt64(qrMetricTCPIopsTotal)
		if qMetricTCPIopsTotal != "" {

			if err := r.SetQueryParam("metric.tcp.iops.total", qMetricTCPIopsTotal); err != nil {
				return err
			}
		}
	}

	if o.MetricTCPIopsWrite != nil {

		// query param metric.tcp.iops.write
		var qrMetricTCPIopsWrite int64

		if o.MetricTCPIopsWrite != nil {
			qrMetricTCPIopsWrite = *o.MetricTCPIopsWrite
		}
		qMetricTCPIopsWrite := swag.FormatInt64(qrMetricTCPIopsWrite)
		if qMetricTCPIopsWrite != "" {

			if err := r.SetQueryParam("metric.tcp.iops.write", qMetricTCPIopsWrite); err != nil {
				return err
			}
		}
	}

	if o.MetricTCPLatencyOther != nil {

		// query param metric.tcp.latency.other
		var qrMetricTCPLatencyOther int64

		if o.MetricTCPLatencyOther != nil {
			qrMetricTCPLatencyOther = *o.MetricTCPLatencyOther
		}
		qMetricTCPLatencyOther := swag.FormatInt64(qrMetricTCPLatencyOther)
		if qMetricTCPLatencyOther != "" {

			if err := r.SetQueryParam("metric.tcp.latency.other", qMetricTCPLatencyOther); err != nil {
				return err
			}
		}
	}

	if o.MetricTCPLatencyRead != nil {

		// query param metric.tcp.latency.read
		var qrMetricTCPLatencyRead int64

		if o.MetricTCPLatencyRead != nil {
			qrMetricTCPLatencyRead = *o.MetricTCPLatencyRead
		}
		qMetricTCPLatencyRead := swag.FormatInt64(qrMetricTCPLatencyRead)
		if qMetricTCPLatencyRead != "" {

			if err := r.SetQueryParam("metric.tcp.latency.read", qMetricTCPLatencyRead); err != nil {
				return err
			}
		}
	}

	if o.MetricTCPLatencyTotal != nil {

		// query param metric.tcp.latency.total
		var qrMetricTCPLatencyTotal int64

		if o.MetricTCPLatencyTotal != nil {
			qrMetricTCPLatencyTotal = *o.MetricTCPLatencyTotal
		}
		qMetricTCPLatencyTotal := swag.FormatInt64(qrMetricTCPLatencyTotal)
		if qMetricTCPLatencyTotal != "" {

			if err := r.SetQueryParam("metric.tcp.latency.total", qMetricTCPLatencyTotal); err != nil {
				return err
			}
		}
	}

	if o.MetricTCPLatencyWrite != nil {

		// query param metric.tcp.latency.write
		var qrMetricTCPLatencyWrite int64

		if o.MetricTCPLatencyWrite != nil {
			qrMetricTCPLatencyWrite = *o.MetricTCPLatencyWrite
		}
		qMetricTCPLatencyWrite := swag.FormatInt64(qrMetricTCPLatencyWrite)
		if qMetricTCPLatencyWrite != "" {

			if err := r.SetQueryParam("metric.tcp.latency.write", qMetricTCPLatencyWrite); err != nil {
				return err
			}
		}
	}

	if o.MetricTCPStatus != nil {

		// query param metric.tcp.status
		var qrMetricTCPStatus string

		if o.MetricTCPStatus != nil {
			qrMetricTCPStatus = *o.MetricTCPStatus
		}
		qMetricTCPStatus := qrMetricTCPStatus
		if qMetricTCPStatus != "" {

			if err := r.SetQueryParam("metric.tcp.status", qMetricTCPStatus); err != nil {
				return err
			}
		}
	}

	if o.MetricTCPThroughputRead != nil {

		// query param metric.tcp.throughput.read
		var qrMetricTCPThroughputRead int64

		if o.MetricTCPThroughputRead != nil {
			qrMetricTCPThroughputRead = *o.MetricTCPThroughputRead
		}
		qMetricTCPThroughputRead := swag.FormatInt64(qrMetricTCPThroughputRead)
		if qMetricTCPThroughputRead != "" {

			if err := r.SetQueryParam("metric.tcp.throughput.read", qMetricTCPThroughputRead); err != nil {
				return err
			}
		}
	}

	if o.MetricTCPThroughputTotal != nil {

		// query param metric.tcp.throughput.total
		var qrMetricTCPThroughputTotal int64

		if o.MetricTCPThroughputTotal != nil {
			qrMetricTCPThroughputTotal = *o.MetricTCPThroughputTotal
		}
		qMetricTCPThroughputTotal := swag.FormatInt64(qrMetricTCPThroughputTotal)
		if qMetricTCPThroughputTotal != "" {

			if err := r.SetQueryParam("metric.tcp.throughput.total", qMetricTCPThroughputTotal); err != nil {
				return err
			}
		}
	}

	if o.MetricTCPThroughputWrite != nil {

		// query param metric.tcp.throughput.write
		var qrMetricTCPThroughputWrite int64

		if o.MetricTCPThroughputWrite != nil {
			qrMetricTCPThroughputWrite = *o.MetricTCPThroughputWrite
		}
		qMetricTCPThroughputWrite := swag.FormatInt64(qrMetricTCPThroughputWrite)
		if qMetricTCPThroughputWrite != "" {

			if err := r.SetQueryParam("metric.tcp.throughput.write", qMetricTCPThroughputWrite); err != nil {
				return err
			}
		}
	}

	if o.MetricTCPTimestamp != nil {

		// query param metric.tcp.timestamp
		var qrMetricTCPTimestamp string

		if o.MetricTCPTimestamp != nil {
			qrMetricTCPTimestamp = *o.MetricTCPTimestamp
		}
		qMetricTCPTimestamp := qrMetricTCPTimestamp
		if qMetricTCPTimestamp != "" {

			if err := r.SetQueryParam("metric.tcp.timestamp", qMetricTCPTimestamp); err != nil {
				return err
			}
		}
	}

	if o.MetricThroughputRead != nil {

		// query param metric.throughput.read
		var qrMetricThroughputRead int64

		if o.MetricThroughputRead != nil {
			qrMetricThroughputRead = *o.MetricThroughputRead
		}
		qMetricThroughputRead := swag.FormatInt64(qrMetricThroughputRead)
		if qMetricThroughputRead != "" {

			if err := r.SetQueryParam("metric.throughput.read", qMetricThroughputRead); err != nil {
				return err
			}
		}
	}

	if o.MetricThroughputTotal != nil {

		// query param metric.throughput.total
		var qrMetricThroughputTotal int64

		if o.MetricThroughputTotal != nil {
			qrMetricThroughputTotal = *o.MetricThroughputTotal
		}
		qMetricThroughputTotal := swag.FormatInt64(qrMetricThroughputTotal)
		if qMetricThroughputTotal != "" {

			if err := r.SetQueryParam("metric.throughput.total", qMetricThroughputTotal); err != nil {
				return err
			}
		}
	}

	if o.MetricThroughputWrite != nil {

		// query param metric.throughput.write
		var qrMetricThroughputWrite int64

		if o.MetricThroughputWrite != nil {
			qrMetricThroughputWrite = *o.MetricThroughputWrite
		}
		qMetricThroughputWrite := swag.FormatInt64(qrMetricThroughputWrite)
		if qMetricThroughputWrite != "" {

			if err := r.SetQueryParam("metric.throughput.write", qMetricThroughputWrite); err != nil {
				return err
			}
		}
	}

	if o.MetricTimestamp != nil {

		// query param metric.timestamp
		var qrMetricTimestamp string

		if o.MetricTimestamp != nil {
			qrMetricTimestamp = *o.MetricTimestamp
		}
		qMetricTimestamp := qrMetricTimestamp
		if qMetricTimestamp != "" {

			if err := r.SetQueryParam("metric.timestamp", qMetricTimestamp); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SerialRecords != nil {

		// query param serial_records
		var qrSerialRecords bool

		if o.SerialRecords != nil {
			qrSerialRecords = *o.SerialRecords
		}
		qSerialRecords := swag.FormatBool(qrSerialRecords)
		if qSerialRecords != "" {

			if err := r.SetQueryParam("serial_records", qSerialRecords); err != nil {
				return err
			}
		}
	}

	if o.StatisticsFcIopsRawOther != nil {

		// query param statistics.fc.iops_raw.other
		var qrStatisticsFcIopsRawOther int64

		if o.StatisticsFcIopsRawOther != nil {
			qrStatisticsFcIopsRawOther = *o.StatisticsFcIopsRawOther
		}
		qStatisticsFcIopsRawOther := swag.FormatInt64(qrStatisticsFcIopsRawOther)
		if qStatisticsFcIopsRawOther != "" {

			if err := r.SetQueryParam("statistics.fc.iops_raw.other", qStatisticsFcIopsRawOther); err != nil {
				return err
			}
		}
	}

	if o.StatisticsFcIopsRawRead != nil {

		// query param statistics.fc.iops_raw.read
		var qrStatisticsFcIopsRawRead int64

		if o.StatisticsFcIopsRawRead != nil {
			qrStatisticsFcIopsRawRead = *o.StatisticsFcIopsRawRead
		}
		qStatisticsFcIopsRawRead := swag.FormatInt64(qrStatisticsFcIopsRawRead)
		if qStatisticsFcIopsRawRead != "" {

			if err := r.SetQueryParam("statistics.fc.iops_raw.read", qStatisticsFcIopsRawRead); err != nil {
				return err
			}
		}
	}

	if o.StatisticsFcIopsRawTotal != nil {

		// query param statistics.fc.iops_raw.total
		var qrStatisticsFcIopsRawTotal int64

		if o.StatisticsFcIopsRawTotal != nil {
			qrStatisticsFcIopsRawTotal = *o.StatisticsFcIopsRawTotal
		}
		qStatisticsFcIopsRawTotal := swag.FormatInt64(qrStatisticsFcIopsRawTotal)
		if qStatisticsFcIopsRawTotal != "" {

			if err := r.SetQueryParam("statistics.fc.iops_raw.total", qStatisticsFcIopsRawTotal); err != nil {
				return err
			}
		}
	}

	if o.StatisticsFcIopsRawWrite != nil {

		// query param statistics.fc.iops_raw.write
		var qrStatisticsFcIopsRawWrite int64

		if o.StatisticsFcIopsRawWrite != nil {
			qrStatisticsFcIopsRawWrite = *o.StatisticsFcIopsRawWrite
		}
		qStatisticsFcIopsRawWrite := swag.FormatInt64(qrStatisticsFcIopsRawWrite)
		if qStatisticsFcIopsRawWrite != "" {

			if err := r.SetQueryParam("statistics.fc.iops_raw.write", qStatisticsFcIopsRawWrite); err != nil {
				return err
			}
		}
	}

	if o.StatisticsFcLatencyRawOther != nil {

		// query param statistics.fc.latency_raw.other
		var qrStatisticsFcLatencyRawOther int64

		if o.StatisticsFcLatencyRawOther != nil {
			qrStatisticsFcLatencyRawOther = *o.StatisticsFcLatencyRawOther
		}
		qStatisticsFcLatencyRawOther := swag.FormatInt64(qrStatisticsFcLatencyRawOther)
		if qStatisticsFcLatencyRawOther != "" {

			if err := r.SetQueryParam("statistics.fc.latency_raw.other", qStatisticsFcLatencyRawOther); err != nil {
				return err
			}
		}
	}

	if o.StatisticsFcLatencyRawRead != nil {

		// query param statistics.fc.latency_raw.read
		var qrStatisticsFcLatencyRawRead int64

		if o.StatisticsFcLatencyRawRead != nil {
			qrStatisticsFcLatencyRawRead = *o.StatisticsFcLatencyRawRead
		}
		qStatisticsFcLatencyRawRead := swag.FormatInt64(qrStatisticsFcLatencyRawRead)
		if qStatisticsFcLatencyRawRead != "" {

			if err := r.SetQueryParam("statistics.fc.latency_raw.read", qStatisticsFcLatencyRawRead); err != nil {
				return err
			}
		}
	}

	if o.StatisticsFcLatencyRawTotal != nil {

		// query param statistics.fc.latency_raw.total
		var qrStatisticsFcLatencyRawTotal int64

		if o.StatisticsFcLatencyRawTotal != nil {
			qrStatisticsFcLatencyRawTotal = *o.StatisticsFcLatencyRawTotal
		}
		qStatisticsFcLatencyRawTotal := swag.FormatInt64(qrStatisticsFcLatencyRawTotal)
		if qStatisticsFcLatencyRawTotal != "" {

			if err := r.SetQueryParam("statistics.fc.latency_raw.total", qStatisticsFcLatencyRawTotal); err != nil {
				return err
			}
		}
	}

	if o.StatisticsFcLatencyRawWrite != nil {

		// query param statistics.fc.latency_raw.write
		var qrStatisticsFcLatencyRawWrite int64

		if o.StatisticsFcLatencyRawWrite != nil {
			qrStatisticsFcLatencyRawWrite = *o.StatisticsFcLatencyRawWrite
		}
		qStatisticsFcLatencyRawWrite := swag.FormatInt64(qrStatisticsFcLatencyRawWrite)
		if qStatisticsFcLatencyRawWrite != "" {

			if err := r.SetQueryParam("statistics.fc.latency_raw.write", qStatisticsFcLatencyRawWrite); err != nil {
				return err
			}
		}
	}

	if o.StatisticsFcStatus != nil {

		// query param statistics.fc.status
		var qrStatisticsFcStatus string

		if o.StatisticsFcStatus != nil {
			qrStatisticsFcStatus = *o.StatisticsFcStatus
		}
		qStatisticsFcStatus := qrStatisticsFcStatus
		if qStatisticsFcStatus != "" {

			if err := r.SetQueryParam("statistics.fc.status", qStatisticsFcStatus); err != nil {
				return err
			}
		}
	}

	if o.StatisticsFcThroughputRawRead != nil {

		// query param statistics.fc.throughput_raw.read
		var qrStatisticsFcThroughputRawRead int64

		if o.StatisticsFcThroughputRawRead != nil {
			qrStatisticsFcThroughputRawRead = *o.StatisticsFcThroughputRawRead
		}
		qStatisticsFcThroughputRawRead := swag.FormatInt64(qrStatisticsFcThroughputRawRead)
		if qStatisticsFcThroughputRawRead != "" {

			if err := r.SetQueryParam("statistics.fc.throughput_raw.read", qStatisticsFcThroughputRawRead); err != nil {
				return err
			}
		}
	}

	if o.StatisticsFcThroughputRawTotal != nil {

		// query param statistics.fc.throughput_raw.total
		var qrStatisticsFcThroughputRawTotal int64

		if o.StatisticsFcThroughputRawTotal != nil {
			qrStatisticsFcThroughputRawTotal = *o.StatisticsFcThroughputRawTotal
		}
		qStatisticsFcThroughputRawTotal := swag.FormatInt64(qrStatisticsFcThroughputRawTotal)
		if qStatisticsFcThroughputRawTotal != "" {

			if err := r.SetQueryParam("statistics.fc.throughput_raw.total", qStatisticsFcThroughputRawTotal); err != nil {
				return err
			}
		}
	}

	if o.StatisticsFcThroughputRawWrite != nil {

		// query param statistics.fc.throughput_raw.write
		var qrStatisticsFcThroughputRawWrite int64

		if o.StatisticsFcThroughputRawWrite != nil {
			qrStatisticsFcThroughputRawWrite = *o.StatisticsFcThroughputRawWrite
		}
		qStatisticsFcThroughputRawWrite := swag.FormatInt64(qrStatisticsFcThroughputRawWrite)
		if qStatisticsFcThroughputRawWrite != "" {

			if err := r.SetQueryParam("statistics.fc.throughput_raw.write", qStatisticsFcThroughputRawWrite); err != nil {
				return err
			}
		}
	}

	if o.StatisticsFcTimestamp != nil {

		// query param statistics.fc.timestamp
		var qrStatisticsFcTimestamp string

		if o.StatisticsFcTimestamp != nil {
			qrStatisticsFcTimestamp = *o.StatisticsFcTimestamp
		}
		qStatisticsFcTimestamp := qrStatisticsFcTimestamp
		if qStatisticsFcTimestamp != "" {

			if err := r.SetQueryParam("statistics.fc.timestamp", qStatisticsFcTimestamp); err != nil {
				return err
			}
		}
	}

	if o.StatisticsIopsRawOther != nil {

		// query param statistics.iops_raw.other
		var qrStatisticsIopsRawOther int64

		if o.StatisticsIopsRawOther != nil {
			qrStatisticsIopsRawOther = *o.StatisticsIopsRawOther
		}
		qStatisticsIopsRawOther := swag.FormatInt64(qrStatisticsIopsRawOther)
		if qStatisticsIopsRawOther != "" {

			if err := r.SetQueryParam("statistics.iops_raw.other", qStatisticsIopsRawOther); err != nil {
				return err
			}
		}
	}

	if o.StatisticsIopsRawRead != nil {

		// query param statistics.iops_raw.read
		var qrStatisticsIopsRawRead int64

		if o.StatisticsIopsRawRead != nil {
			qrStatisticsIopsRawRead = *o.StatisticsIopsRawRead
		}
		qStatisticsIopsRawRead := swag.FormatInt64(qrStatisticsIopsRawRead)
		if qStatisticsIopsRawRead != "" {

			if err := r.SetQueryParam("statistics.iops_raw.read", qStatisticsIopsRawRead); err != nil {
				return err
			}
		}
	}

	if o.StatisticsIopsRawTotal != nil {

		// query param statistics.iops_raw.total
		var qrStatisticsIopsRawTotal int64

		if o.StatisticsIopsRawTotal != nil {
			qrStatisticsIopsRawTotal = *o.StatisticsIopsRawTotal
		}
		qStatisticsIopsRawTotal := swag.FormatInt64(qrStatisticsIopsRawTotal)
		if qStatisticsIopsRawTotal != "" {

			if err := r.SetQueryParam("statistics.iops_raw.total", qStatisticsIopsRawTotal); err != nil {
				return err
			}
		}
	}

	if o.StatisticsIopsRawWrite != nil {

		// query param statistics.iops_raw.write
		var qrStatisticsIopsRawWrite int64

		if o.StatisticsIopsRawWrite != nil {
			qrStatisticsIopsRawWrite = *o.StatisticsIopsRawWrite
		}
		qStatisticsIopsRawWrite := swag.FormatInt64(qrStatisticsIopsRawWrite)
		if qStatisticsIopsRawWrite != "" {

			if err := r.SetQueryParam("statistics.iops_raw.write", qStatisticsIopsRawWrite); err != nil {
				return err
			}
		}
	}

	if o.StatisticsLatencyRawOther != nil {

		// query param statistics.latency_raw.other
		var qrStatisticsLatencyRawOther int64

		if o.StatisticsLatencyRawOther != nil {
			qrStatisticsLatencyRawOther = *o.StatisticsLatencyRawOther
		}
		qStatisticsLatencyRawOther := swag.FormatInt64(qrStatisticsLatencyRawOther)
		if qStatisticsLatencyRawOther != "" {

			if err := r.SetQueryParam("statistics.latency_raw.other", qStatisticsLatencyRawOther); err != nil {
				return err
			}
		}
	}

	if o.StatisticsLatencyRawRead != nil {

		// query param statistics.latency_raw.read
		var qrStatisticsLatencyRawRead int64

		if o.StatisticsLatencyRawRead != nil {
			qrStatisticsLatencyRawRead = *o.StatisticsLatencyRawRead
		}
		qStatisticsLatencyRawRead := swag.FormatInt64(qrStatisticsLatencyRawRead)
		if qStatisticsLatencyRawRead != "" {

			if err := r.SetQueryParam("statistics.latency_raw.read", qStatisticsLatencyRawRead); err != nil {
				return err
			}
		}
	}

	if o.StatisticsLatencyRawTotal != nil {

		// query param statistics.latency_raw.total
		var qrStatisticsLatencyRawTotal int64

		if o.StatisticsLatencyRawTotal != nil {
			qrStatisticsLatencyRawTotal = *o.StatisticsLatencyRawTotal
		}
		qStatisticsLatencyRawTotal := swag.FormatInt64(qrStatisticsLatencyRawTotal)
		if qStatisticsLatencyRawTotal != "" {

			if err := r.SetQueryParam("statistics.latency_raw.total", qStatisticsLatencyRawTotal); err != nil {
				return err
			}
		}
	}

	if o.StatisticsLatencyRawWrite != nil {

		// query param statistics.latency_raw.write
		var qrStatisticsLatencyRawWrite int64

		if o.StatisticsLatencyRawWrite != nil {
			qrStatisticsLatencyRawWrite = *o.StatisticsLatencyRawWrite
		}
		qStatisticsLatencyRawWrite := swag.FormatInt64(qrStatisticsLatencyRawWrite)
		if qStatisticsLatencyRawWrite != "" {

			if err := r.SetQueryParam("statistics.latency_raw.write", qStatisticsLatencyRawWrite); err != nil {
				return err
			}
		}
	}

	if o.StatisticsStatus != nil {

		// query param statistics.status
		var qrStatisticsStatus string

		if o.StatisticsStatus != nil {
			qrStatisticsStatus = *o.StatisticsStatus
		}
		qStatisticsStatus := qrStatisticsStatus
		if qStatisticsStatus != "" {

			if err := r.SetQueryParam("statistics.status", qStatisticsStatus); err != nil {
				return err
			}
		}
	}

	if o.StatisticsTCPIopsRawOther != nil {

		// query param statistics.tcp.iops_raw.other
		var qrStatisticsTCPIopsRawOther int64

		if o.StatisticsTCPIopsRawOther != nil {
			qrStatisticsTCPIopsRawOther = *o.StatisticsTCPIopsRawOther
		}
		qStatisticsTCPIopsRawOther := swag.FormatInt64(qrStatisticsTCPIopsRawOther)
		if qStatisticsTCPIopsRawOther != "" {

			if err := r.SetQueryParam("statistics.tcp.iops_raw.other", qStatisticsTCPIopsRawOther); err != nil {
				return err
			}
		}
	}

	if o.StatisticsTCPIopsRawRead != nil {

		// query param statistics.tcp.iops_raw.read
		var qrStatisticsTCPIopsRawRead int64

		if o.StatisticsTCPIopsRawRead != nil {
			qrStatisticsTCPIopsRawRead = *o.StatisticsTCPIopsRawRead
		}
		qStatisticsTCPIopsRawRead := swag.FormatInt64(qrStatisticsTCPIopsRawRead)
		if qStatisticsTCPIopsRawRead != "" {

			if err := r.SetQueryParam("statistics.tcp.iops_raw.read", qStatisticsTCPIopsRawRead); err != nil {
				return err
			}
		}
	}

	if o.StatisticsTCPIopsRawTotal != nil {

		// query param statistics.tcp.iops_raw.total
		var qrStatisticsTCPIopsRawTotal int64

		if o.StatisticsTCPIopsRawTotal != nil {
			qrStatisticsTCPIopsRawTotal = *o.StatisticsTCPIopsRawTotal
		}
		qStatisticsTCPIopsRawTotal := swag.FormatInt64(qrStatisticsTCPIopsRawTotal)
		if qStatisticsTCPIopsRawTotal != "" {

			if err := r.SetQueryParam("statistics.tcp.iops_raw.total", qStatisticsTCPIopsRawTotal); err != nil {
				return err
			}
		}
	}

	if o.StatisticsTCPIopsRawWrite != nil {

		// query param statistics.tcp.iops_raw.write
		var qrStatisticsTCPIopsRawWrite int64

		if o.StatisticsTCPIopsRawWrite != nil {
			qrStatisticsTCPIopsRawWrite = *o.StatisticsTCPIopsRawWrite
		}
		qStatisticsTCPIopsRawWrite := swag.FormatInt64(qrStatisticsTCPIopsRawWrite)
		if qStatisticsTCPIopsRawWrite != "" {

			if err := r.SetQueryParam("statistics.tcp.iops_raw.write", qStatisticsTCPIopsRawWrite); err != nil {
				return err
			}
		}
	}

	if o.StatisticsTCPLatencyRawOther != nil {

		// query param statistics.tcp.latency_raw.other
		var qrStatisticsTCPLatencyRawOther int64

		if o.StatisticsTCPLatencyRawOther != nil {
			qrStatisticsTCPLatencyRawOther = *o.StatisticsTCPLatencyRawOther
		}
		qStatisticsTCPLatencyRawOther := swag.FormatInt64(qrStatisticsTCPLatencyRawOther)
		if qStatisticsTCPLatencyRawOther != "" {

			if err := r.SetQueryParam("statistics.tcp.latency_raw.other", qStatisticsTCPLatencyRawOther); err != nil {
				return err
			}
		}
	}

	if o.StatisticsTCPLatencyRawRead != nil {

		// query param statistics.tcp.latency_raw.read
		var qrStatisticsTCPLatencyRawRead int64

		if o.StatisticsTCPLatencyRawRead != nil {
			qrStatisticsTCPLatencyRawRead = *o.StatisticsTCPLatencyRawRead
		}
		qStatisticsTCPLatencyRawRead := swag.FormatInt64(qrStatisticsTCPLatencyRawRead)
		if qStatisticsTCPLatencyRawRead != "" {

			if err := r.SetQueryParam("statistics.tcp.latency_raw.read", qStatisticsTCPLatencyRawRead); err != nil {
				return err
			}
		}
	}

	if o.StatisticsTCPLatencyRawTotal != nil {

		// query param statistics.tcp.latency_raw.total
		var qrStatisticsTCPLatencyRawTotal int64

		if o.StatisticsTCPLatencyRawTotal != nil {
			qrStatisticsTCPLatencyRawTotal = *o.StatisticsTCPLatencyRawTotal
		}
		qStatisticsTCPLatencyRawTotal := swag.FormatInt64(qrStatisticsTCPLatencyRawTotal)
		if qStatisticsTCPLatencyRawTotal != "" {

			if err := r.SetQueryParam("statistics.tcp.latency_raw.total", qStatisticsTCPLatencyRawTotal); err != nil {
				return err
			}
		}
	}

	if o.StatisticsTCPLatencyRawWrite != nil {

		// query param statistics.tcp.latency_raw.write
		var qrStatisticsTCPLatencyRawWrite int64

		if o.StatisticsTCPLatencyRawWrite != nil {
			qrStatisticsTCPLatencyRawWrite = *o.StatisticsTCPLatencyRawWrite
		}
		qStatisticsTCPLatencyRawWrite := swag.FormatInt64(qrStatisticsTCPLatencyRawWrite)
		if qStatisticsTCPLatencyRawWrite != "" {

			if err := r.SetQueryParam("statistics.tcp.latency_raw.write", qStatisticsTCPLatencyRawWrite); err != nil {
				return err
			}
		}
	}

	if o.StatisticsTCPStatus != nil {

		// query param statistics.tcp.status
		var qrStatisticsTCPStatus string

		if o.StatisticsTCPStatus != nil {
			qrStatisticsTCPStatus = *o.StatisticsTCPStatus
		}
		qStatisticsTCPStatus := qrStatisticsTCPStatus
		if qStatisticsTCPStatus != "" {

			if err := r.SetQueryParam("statistics.tcp.status", qStatisticsTCPStatus); err != nil {
				return err
			}
		}
	}

	if o.StatisticsTCPThroughputRawRead != nil {

		// query param statistics.tcp.throughput_raw.read
		var qrStatisticsTCPThroughputRawRead int64

		if o.StatisticsTCPThroughputRawRead != nil {
			qrStatisticsTCPThroughputRawRead = *o.StatisticsTCPThroughputRawRead
		}
		qStatisticsTCPThroughputRawRead := swag.FormatInt64(qrStatisticsTCPThroughputRawRead)
		if qStatisticsTCPThroughputRawRead != "" {

			if err := r.SetQueryParam("statistics.tcp.throughput_raw.read", qStatisticsTCPThroughputRawRead); err != nil {
				return err
			}
		}
	}

	if o.StatisticsTCPThroughputRawTotal != nil {

		// query param statistics.tcp.throughput_raw.total
		var qrStatisticsTCPThroughputRawTotal int64

		if o.StatisticsTCPThroughputRawTotal != nil {
			qrStatisticsTCPThroughputRawTotal = *o.StatisticsTCPThroughputRawTotal
		}
		qStatisticsTCPThroughputRawTotal := swag.FormatInt64(qrStatisticsTCPThroughputRawTotal)
		if qStatisticsTCPThroughputRawTotal != "" {

			if err := r.SetQueryParam("statistics.tcp.throughput_raw.total", qStatisticsTCPThroughputRawTotal); err != nil {
				return err
			}
		}
	}

	if o.StatisticsTCPThroughputRawWrite != nil {

		// query param statistics.tcp.throughput_raw.write
		var qrStatisticsTCPThroughputRawWrite int64

		if o.StatisticsTCPThroughputRawWrite != nil {
			qrStatisticsTCPThroughputRawWrite = *o.StatisticsTCPThroughputRawWrite
		}
		qStatisticsTCPThroughputRawWrite := swag.FormatInt64(qrStatisticsTCPThroughputRawWrite)
		if qStatisticsTCPThroughputRawWrite != "" {

			if err := r.SetQueryParam("statistics.tcp.throughput_raw.write", qStatisticsTCPThroughputRawWrite); err != nil {
				return err
			}
		}
	}

	if o.StatisticsTCPTimestamp != nil {

		// query param statistics.tcp.timestamp
		var qrStatisticsTCPTimestamp string

		if o.StatisticsTCPTimestamp != nil {
			qrStatisticsTCPTimestamp = *o.StatisticsTCPTimestamp
		}
		qStatisticsTCPTimestamp := qrStatisticsTCPTimestamp
		if qStatisticsTCPTimestamp != "" {

			if err := r.SetQueryParam("statistics.tcp.timestamp", qStatisticsTCPTimestamp); err != nil {
				return err
			}
		}
	}

	if o.StatisticsThroughputRawRead != nil {

		// query param statistics.throughput_raw.read
		var qrStatisticsThroughputRawRead int64

		if o.StatisticsThroughputRawRead != nil {
			qrStatisticsThroughputRawRead = *o.StatisticsThroughputRawRead
		}
		qStatisticsThroughputRawRead := swag.FormatInt64(qrStatisticsThroughputRawRead)
		if qStatisticsThroughputRawRead != "" {

			if err := r.SetQueryParam("statistics.throughput_raw.read", qStatisticsThroughputRawRead); err != nil {
				return err
			}
		}
	}

	if o.StatisticsThroughputRawTotal != nil {

		// query param statistics.throughput_raw.total
		var qrStatisticsThroughputRawTotal int64

		if o.StatisticsThroughputRawTotal != nil {
			qrStatisticsThroughputRawTotal = *o.StatisticsThroughputRawTotal
		}
		qStatisticsThroughputRawTotal := swag.FormatInt64(qrStatisticsThroughputRawTotal)
		if qStatisticsThroughputRawTotal != "" {

			if err := r.SetQueryParam("statistics.throughput_raw.total", qStatisticsThroughputRawTotal); err != nil {
				return err
			}
		}
	}

	if o.StatisticsThroughputRawWrite != nil {

		// query param statistics.throughput_raw.write
		var qrStatisticsThroughputRawWrite int64

		if o.StatisticsThroughputRawWrite != nil {
			qrStatisticsThroughputRawWrite = *o.StatisticsThroughputRawWrite
		}
		qStatisticsThroughputRawWrite := swag.FormatInt64(qrStatisticsThroughputRawWrite)
		if qStatisticsThroughputRawWrite != "" {

			if err := r.SetQueryParam("statistics.throughput_raw.write", qStatisticsThroughputRawWrite); err != nil {
				return err
			}
		}
	}

	if o.StatisticsTimestamp != nil {

		// query param statistics.timestamp
		var qrStatisticsTimestamp string

		if o.StatisticsTimestamp != nil {
			qrStatisticsTimestamp = *o.StatisticsTimestamp
		}
		qStatisticsTimestamp := qrStatisticsTimestamp
		if qStatisticsTimestamp != "" {

			if err := r.SetQueryParam("statistics.timestamp", qStatisticsTimestamp); err != nil {
				return err
			}
		}
	}

	if o.SvmName != nil {

		// query param svm.name
		var qrSvmName string

		if o.SvmName != nil {
			qrSvmName = *o.SvmName
		}
		qSvmName := qrSvmName
		if qSvmName != "" {

			if err := r.SetQueryParam("svm.name", qSvmName); err != nil {
				return err
			}
		}
	}

	if o.SvmUUID != nil {

		// query param svm.uuid
		var qrSvmUUID string

		if o.SvmUUID != nil {
			qrSvmUUID = *o.SvmUUID
		}
		qSvmUUID := qrSvmUUID
		if qSvmUUID != "" {

			if err := r.SetQueryParam("svm.uuid", qSvmUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
