// Code generated by go-swagger; DO NOT EDIT.

package n_a_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewLocalCifsUserDeleteCollectionParams creates a new LocalCifsUserDeleteCollectionParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewLocalCifsUserDeleteCollectionParams() *LocalCifsUserDeleteCollectionParams {
	return &LocalCifsUserDeleteCollectionParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewLocalCifsUserDeleteCollectionParamsWithTimeout creates a new LocalCifsUserDeleteCollectionParams object
// with the ability to set a timeout on a request.
func NewLocalCifsUserDeleteCollectionParamsWithTimeout(timeout time.Duration) *LocalCifsUserDeleteCollectionParams {
	return &LocalCifsUserDeleteCollectionParams{
		timeout: timeout,
	}
}

// NewLocalCifsUserDeleteCollectionParamsWithContext creates a new LocalCifsUserDeleteCollectionParams object
// with the ability to set a context for a request.
func NewLocalCifsUserDeleteCollectionParamsWithContext(ctx context.Context) *LocalCifsUserDeleteCollectionParams {
	return &LocalCifsUserDeleteCollectionParams{
		Context: ctx,
	}
}

// NewLocalCifsUserDeleteCollectionParamsWithHTTPClient creates a new LocalCifsUserDeleteCollectionParams object
// with the ability to set a custom HTTPClient for a request.
func NewLocalCifsUserDeleteCollectionParamsWithHTTPClient(client *http.Client) *LocalCifsUserDeleteCollectionParams {
	return &LocalCifsUserDeleteCollectionParams{
		HTTPClient: client,
	}
}

/*
LocalCifsUserDeleteCollectionParams contains all the parameters to send to the API endpoint

	for the local cifs user delete collection operation.

	Typically these are written to a http.Request.
*/
type LocalCifsUserDeleteCollectionParams struct {

	/* AccountDisabled.

	   Filter by account_disabled
	*/
	AccountDisabled *bool

	/* ContinueOnFailure.

	   Continue even when the operation fails on one of the records.
	*/
	ContinueOnFailure *bool

	/* Description.

	   Filter by description
	*/
	Description *string

	/* FullName.

	   Filter by full_name
	*/
	FullName *string

	/* Info.

	   Info specification
	*/
	Info LocalCifsUserDeleteCollectionBody

	/* MembershipName.

	   Filter by membership.name
	*/
	MembershipName *string

	/* MembershipSid.

	   Filter by membership.sid
	*/
	MembershipSid *string

	/* Name.

	   Filter by name
	*/
	Name *string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* SerialRecords.

	   Perform the operation on the records synchronously.
	*/
	SerialRecords *bool

	/* Sid.

	   Filter by sid
	*/
	Sid *string

	/* SvmName.

	   Filter by svm.name
	*/
	SvmName *string

	/* SvmUUID.

	   Filter by svm.uuid
	*/
	SvmUUID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the local cifs user delete collection params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *LocalCifsUserDeleteCollectionParams) WithDefaults() *LocalCifsUserDeleteCollectionParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the local cifs user delete collection params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *LocalCifsUserDeleteCollectionParams) SetDefaults() {
	var (
		continueOnFailureDefault = bool(false)

		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)

		serialRecordsDefault = bool(false)
	)

	val := LocalCifsUserDeleteCollectionParams{
		ContinueOnFailure: &continueOnFailureDefault,
		ReturnRecords:     &returnRecordsDefault,
		ReturnTimeout:     &returnTimeoutDefault,
		SerialRecords:     &serialRecordsDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the local cifs user delete collection params
func (o *LocalCifsUserDeleteCollectionParams) WithTimeout(timeout time.Duration) *LocalCifsUserDeleteCollectionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the local cifs user delete collection params
func (o *LocalCifsUserDeleteCollectionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the local cifs user delete collection params
func (o *LocalCifsUserDeleteCollectionParams) WithContext(ctx context.Context) *LocalCifsUserDeleteCollectionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the local cifs user delete collection params
func (o *LocalCifsUserDeleteCollectionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the local cifs user delete collection params
func (o *LocalCifsUserDeleteCollectionParams) WithHTTPClient(client *http.Client) *LocalCifsUserDeleteCollectionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the local cifs user delete collection params
func (o *LocalCifsUserDeleteCollectionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountDisabled adds the accountDisabled to the local cifs user delete collection params
func (o *LocalCifsUserDeleteCollectionParams) WithAccountDisabled(accountDisabled *bool) *LocalCifsUserDeleteCollectionParams {
	o.SetAccountDisabled(accountDisabled)
	return o
}

// SetAccountDisabled adds the accountDisabled to the local cifs user delete collection params
func (o *LocalCifsUserDeleteCollectionParams) SetAccountDisabled(accountDisabled *bool) {
	o.AccountDisabled = accountDisabled
}

// WithContinueOnFailure adds the continueOnFailure to the local cifs user delete collection params
func (o *LocalCifsUserDeleteCollectionParams) WithContinueOnFailure(continueOnFailure *bool) *LocalCifsUserDeleteCollectionParams {
	o.SetContinueOnFailure(continueOnFailure)
	return o
}

// SetContinueOnFailure adds the continueOnFailure to the local cifs user delete collection params
func (o *LocalCifsUserDeleteCollectionParams) SetContinueOnFailure(continueOnFailure *bool) {
	o.ContinueOnFailure = continueOnFailure
}

// WithDescription adds the description to the local cifs user delete collection params
func (o *LocalCifsUserDeleteCollectionParams) WithDescription(description *string) *LocalCifsUserDeleteCollectionParams {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the local cifs user delete collection params
func (o *LocalCifsUserDeleteCollectionParams) SetDescription(description *string) {
	o.Description = description
}

// WithFullName adds the fullName to the local cifs user delete collection params
func (o *LocalCifsUserDeleteCollectionParams) WithFullName(fullName *string) *LocalCifsUserDeleteCollectionParams {
	o.SetFullName(fullName)
	return o
}

// SetFullName adds the fullName to the local cifs user delete collection params
func (o *LocalCifsUserDeleteCollectionParams) SetFullName(fullName *string) {
	o.FullName = fullName
}

// WithInfo adds the info to the local cifs user delete collection params
func (o *LocalCifsUserDeleteCollectionParams) WithInfo(info LocalCifsUserDeleteCollectionBody) *LocalCifsUserDeleteCollectionParams {
	o.SetInfo(info)
	return o
}

// SetInfo adds the info to the local cifs user delete collection params
func (o *LocalCifsUserDeleteCollectionParams) SetInfo(info LocalCifsUserDeleteCollectionBody) {
	o.Info = info
}

// WithMembershipName adds the membershipName to the local cifs user delete collection params
func (o *LocalCifsUserDeleteCollectionParams) WithMembershipName(membershipName *string) *LocalCifsUserDeleteCollectionParams {
	o.SetMembershipName(membershipName)
	return o
}

// SetMembershipName adds the membershipName to the local cifs user delete collection params
func (o *LocalCifsUserDeleteCollectionParams) SetMembershipName(membershipName *string) {
	o.MembershipName = membershipName
}

// WithMembershipSid adds the membershipSid to the local cifs user delete collection params
func (o *LocalCifsUserDeleteCollectionParams) WithMembershipSid(membershipSid *string) *LocalCifsUserDeleteCollectionParams {
	o.SetMembershipSid(membershipSid)
	return o
}

// SetMembershipSid adds the membershipSid to the local cifs user delete collection params
func (o *LocalCifsUserDeleteCollectionParams) SetMembershipSid(membershipSid *string) {
	o.MembershipSid = membershipSid
}

// WithName adds the name to the local cifs user delete collection params
func (o *LocalCifsUserDeleteCollectionParams) WithName(name *string) *LocalCifsUserDeleteCollectionParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the local cifs user delete collection params
func (o *LocalCifsUserDeleteCollectionParams) SetName(name *string) {
	o.Name = name
}

// WithReturnRecords adds the returnRecords to the local cifs user delete collection params
func (o *LocalCifsUserDeleteCollectionParams) WithReturnRecords(returnRecords *bool) *LocalCifsUserDeleteCollectionParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the local cifs user delete collection params
func (o *LocalCifsUserDeleteCollectionParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the local cifs user delete collection params
func (o *LocalCifsUserDeleteCollectionParams) WithReturnTimeout(returnTimeout *int64) *LocalCifsUserDeleteCollectionParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the local cifs user delete collection params
func (o *LocalCifsUserDeleteCollectionParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithSerialRecords adds the serialRecords to the local cifs user delete collection params
func (o *LocalCifsUserDeleteCollectionParams) WithSerialRecords(serialRecords *bool) *LocalCifsUserDeleteCollectionParams {
	o.SetSerialRecords(serialRecords)
	return o
}

// SetSerialRecords adds the serialRecords to the local cifs user delete collection params
func (o *LocalCifsUserDeleteCollectionParams) SetSerialRecords(serialRecords *bool) {
	o.SerialRecords = serialRecords
}

// WithSid adds the sid to the local cifs user delete collection params
func (o *LocalCifsUserDeleteCollectionParams) WithSid(sid *string) *LocalCifsUserDeleteCollectionParams {
	o.SetSid(sid)
	return o
}

// SetSid adds the sid to the local cifs user delete collection params
func (o *LocalCifsUserDeleteCollectionParams) SetSid(sid *string) {
	o.Sid = sid
}

// WithSvmName adds the svmName to the local cifs user delete collection params
func (o *LocalCifsUserDeleteCollectionParams) WithSvmName(svmName *string) *LocalCifsUserDeleteCollectionParams {
	o.SetSvmName(svmName)
	return o
}

// SetSvmName adds the svmName to the local cifs user delete collection params
func (o *LocalCifsUserDeleteCollectionParams) SetSvmName(svmName *string) {
	o.SvmName = svmName
}

// WithSvmUUID adds the svmUUID to the local cifs user delete collection params
func (o *LocalCifsUserDeleteCollectionParams) WithSvmUUID(svmUUID *string) *LocalCifsUserDeleteCollectionParams {
	o.SetSvmUUID(svmUUID)
	return o
}

// SetSvmUUID adds the svmUuid to the local cifs user delete collection params
func (o *LocalCifsUserDeleteCollectionParams) SetSvmUUID(svmUUID *string) {
	o.SvmUUID = svmUUID
}

// WriteToRequest writes these params to a swagger request
func (o *LocalCifsUserDeleteCollectionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccountDisabled != nil {

		// query param account_disabled
		var qrAccountDisabled bool

		if o.AccountDisabled != nil {
			qrAccountDisabled = *o.AccountDisabled
		}
		qAccountDisabled := swag.FormatBool(qrAccountDisabled)
		if qAccountDisabled != "" {

			if err := r.SetQueryParam("account_disabled", qAccountDisabled); err != nil {
				return err
			}
		}
	}

	if o.ContinueOnFailure != nil {

		// query param continue_on_failure
		var qrContinueOnFailure bool

		if o.ContinueOnFailure != nil {
			qrContinueOnFailure = *o.ContinueOnFailure
		}
		qContinueOnFailure := swag.FormatBool(qrContinueOnFailure)
		if qContinueOnFailure != "" {

			if err := r.SetQueryParam("continue_on_failure", qContinueOnFailure); err != nil {
				return err
			}
		}
	}

	if o.Description != nil {

		// query param description
		var qrDescription string

		if o.Description != nil {
			qrDescription = *o.Description
		}
		qDescription := qrDescription
		if qDescription != "" {

			if err := r.SetQueryParam("description", qDescription); err != nil {
				return err
			}
		}
	}

	if o.FullName != nil {

		// query param full_name
		var qrFullName string

		if o.FullName != nil {
			qrFullName = *o.FullName
		}
		qFullName := qrFullName
		if qFullName != "" {

			if err := r.SetQueryParam("full_name", qFullName); err != nil {
				return err
			}
		}
	}
	if err := r.SetBodyParam(o.Info); err != nil {
		return err
	}

	if o.MembershipName != nil {

		// query param membership.name
		var qrMembershipName string

		if o.MembershipName != nil {
			qrMembershipName = *o.MembershipName
		}
		qMembershipName := qrMembershipName
		if qMembershipName != "" {

			if err := r.SetQueryParam("membership.name", qMembershipName); err != nil {
				return err
			}
		}
	}

	if o.MembershipSid != nil {

		// query param membership.sid
		var qrMembershipSid string

		if o.MembershipSid != nil {
			qrMembershipSid = *o.MembershipSid
		}
		qMembershipSid := qrMembershipSid
		if qMembershipSid != "" {

			if err := r.SetQueryParam("membership.sid", qMembershipSid); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SerialRecords != nil {

		// query param serial_records
		var qrSerialRecords bool

		if o.SerialRecords != nil {
			qrSerialRecords = *o.SerialRecords
		}
		qSerialRecords := swag.FormatBool(qrSerialRecords)
		if qSerialRecords != "" {

			if err := r.SetQueryParam("serial_records", qSerialRecords); err != nil {
				return err
			}
		}
	}

	if o.Sid != nil {

		// query param sid
		var qrSid string

		if o.Sid != nil {
			qrSid = *o.Sid
		}
		qSid := qrSid
		if qSid != "" {

			if err := r.SetQueryParam("sid", qSid); err != nil {
				return err
			}
		}
	}

	if o.SvmName != nil {

		// query param svm.name
		var qrSvmName string

		if o.SvmName != nil {
			qrSvmName = *o.SvmName
		}
		qSvmName := qrSvmName
		if qSvmName != "" {

			if err := r.SetQueryParam("svm.name", qSvmName); err != nil {
				return err
			}
		}
	}

	if o.SvmUUID != nil {

		// query param svm.uuid
		var qrSvmUUID string

		if o.SvmUUID != nil {
			qrSvmUUID = *o.SvmUUID
		}
		qSvmUUID := qrSvmUUID
		if qSvmUUID != "" {

			if err := r.SetQueryParam("svm.uuid", qSvmUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
