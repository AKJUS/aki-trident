// Code generated by go-swagger; DO NOT EDIT.

package n_a_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCifsShareModifyCollectionParams creates a new CifsShareModifyCollectionParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCifsShareModifyCollectionParams() *CifsShareModifyCollectionParams {
	return &CifsShareModifyCollectionParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCifsShareModifyCollectionParamsWithTimeout creates a new CifsShareModifyCollectionParams object
// with the ability to set a timeout on a request.
func NewCifsShareModifyCollectionParamsWithTimeout(timeout time.Duration) *CifsShareModifyCollectionParams {
	return &CifsShareModifyCollectionParams{
		timeout: timeout,
	}
}

// NewCifsShareModifyCollectionParamsWithContext creates a new CifsShareModifyCollectionParams object
// with the ability to set a context for a request.
func NewCifsShareModifyCollectionParamsWithContext(ctx context.Context) *CifsShareModifyCollectionParams {
	return &CifsShareModifyCollectionParams{
		Context: ctx,
	}
}

// NewCifsShareModifyCollectionParamsWithHTTPClient creates a new CifsShareModifyCollectionParams object
// with the ability to set a custom HTTPClient for a request.
func NewCifsShareModifyCollectionParamsWithHTTPClient(client *http.Client) *CifsShareModifyCollectionParams {
	return &CifsShareModifyCollectionParams{
		HTTPClient: client,
	}
}

/*
CifsShareModifyCollectionParams contains all the parameters to send to the API endpoint

	for the cifs share modify collection operation.

	Typically these are written to a http.Request.
*/
type CifsShareModifyCollectionParams struct {

	/* AccessBasedEnumeration.

	   Filter by access_based_enumeration
	*/
	AccessBasedEnumeration *bool

	/* AclsPermission.

	   Filter by acls.permission
	*/
	AclsPermission *string

	/* AclsType.

	   Filter by acls.type
	*/
	AclsType *string

	/* AclsUserOrGroup.

	   Filter by acls.user_or_group
	*/
	AclsUserOrGroup *string

	/* AclsWinSidUnixID.

	   Filter by acls.win_sid_unix_id
	*/
	AclsWinSidUnixID *string

	/* AllowUnencryptedAccess.

	   Filter by allow_unencrypted_access
	*/
	AllowUnencryptedAccess *bool

	/* AttributeCache.

	   Filter by attribute_cache
	*/
	AttributeCache *bool

	/* Browsable.

	   Filter by browsable
	*/
	Browsable *bool

	/* ChangeNotify.

	   Filter by change_notify
	*/
	ChangeNotify *bool

	/* Comment.

	   Filter by comment
	*/
	Comment *string

	/* ContinueOnFailure.

	   Continue even when the operation fails on one of the records.
	*/
	ContinueOnFailure *bool

	/* ContinuouslyAvailable.

	   Filter by continuously_available
	*/
	ContinuouslyAvailable *bool

	/* DirUmask.

	   Filter by dir_umask
	*/
	DirUmask *string

	/* Encryption.

	   Filter by encryption
	*/
	Encryption *bool

	/* FileUmask.

	   Filter by file_umask
	*/
	FileUmask *string

	/* ForceGroupForCreate.

	   Filter by force_group_for_create
	*/
	ForceGroupForCreate *string

	/* HomeDirectory.

	   Filter by home_directory
	*/
	HomeDirectory *bool

	/* Info.

	   Info specification
	*/
	Info CifsShareModifyCollectionBody

	/* MaxConnectionsPerShare.

	   Filter by max_connections_per_share
	*/
	MaxConnectionsPerShare *int64

	/* Name.

	   Filter by name
	*/
	Name *string

	/* NamespaceCaching.

	   Filter by namespace_caching
	*/
	NamespaceCaching *bool

	/* NoStrictSecurity.

	   Filter by no_strict_security
	*/
	NoStrictSecurity *bool

	/* OfflineFiles.

	   Filter by offline_files
	*/
	OfflineFiles *string

	/* Oplocks.

	   Filter by oplocks
	*/
	Oplocks *bool

	/* Path.

	   Filter by path
	*/
	Path *string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* SerialRecords.

	   Perform the operation on the records synchronously.
	*/
	SerialRecords *bool

	/* ShowPreviousVersions.

	   Filter by show_previous_versions
	*/
	ShowPreviousVersions *bool

	/* ShowSnapshot.

	   Filter by show_snapshot
	*/
	ShowSnapshot *bool

	/* SvmName.

	   Filter by svm.name
	*/
	SvmName *string

	/* SvmUUID.

	   Filter by svm.uuid
	*/
	SvmUUID *string

	/* UnixSymlink.

	   Filter by unix_symlink
	*/
	UnixSymlink *string

	/* VolumeName.

	   Filter by volume.name
	*/
	VolumeName *string

	/* VolumeUUID.

	   Filter by volume.uuid
	*/
	VolumeUUID *string

	/* VscanProfile.

	   Filter by vscan_profile
	*/
	VscanProfile *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the cifs share modify collection params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CifsShareModifyCollectionParams) WithDefaults() *CifsShareModifyCollectionParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the cifs share modify collection params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CifsShareModifyCollectionParams) SetDefaults() {
	var (
		continueOnFailureDefault = bool(false)

		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)

		serialRecordsDefault = bool(false)
	)

	val := CifsShareModifyCollectionParams{
		ContinueOnFailure: &continueOnFailureDefault,
		ReturnRecords:     &returnRecordsDefault,
		ReturnTimeout:     &returnTimeoutDefault,
		SerialRecords:     &serialRecordsDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) WithTimeout(timeout time.Duration) *CifsShareModifyCollectionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) WithContext(ctx context.Context) *CifsShareModifyCollectionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) WithHTTPClient(client *http.Client) *CifsShareModifyCollectionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccessBasedEnumeration adds the accessBasedEnumeration to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) WithAccessBasedEnumeration(accessBasedEnumeration *bool) *CifsShareModifyCollectionParams {
	o.SetAccessBasedEnumeration(accessBasedEnumeration)
	return o
}

// SetAccessBasedEnumeration adds the accessBasedEnumeration to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) SetAccessBasedEnumeration(accessBasedEnumeration *bool) {
	o.AccessBasedEnumeration = accessBasedEnumeration
}

// WithAclsPermission adds the aclsPermission to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) WithAclsPermission(aclsPermission *string) *CifsShareModifyCollectionParams {
	o.SetAclsPermission(aclsPermission)
	return o
}

// SetAclsPermission adds the aclsPermission to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) SetAclsPermission(aclsPermission *string) {
	o.AclsPermission = aclsPermission
}

// WithAclsType adds the aclsType to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) WithAclsType(aclsType *string) *CifsShareModifyCollectionParams {
	o.SetAclsType(aclsType)
	return o
}

// SetAclsType adds the aclsType to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) SetAclsType(aclsType *string) {
	o.AclsType = aclsType
}

// WithAclsUserOrGroup adds the aclsUserOrGroup to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) WithAclsUserOrGroup(aclsUserOrGroup *string) *CifsShareModifyCollectionParams {
	o.SetAclsUserOrGroup(aclsUserOrGroup)
	return o
}

// SetAclsUserOrGroup adds the aclsUserOrGroup to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) SetAclsUserOrGroup(aclsUserOrGroup *string) {
	o.AclsUserOrGroup = aclsUserOrGroup
}

// WithAclsWinSidUnixID adds the aclsWinSidUnixID to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) WithAclsWinSidUnixID(aclsWinSidUnixID *string) *CifsShareModifyCollectionParams {
	o.SetAclsWinSidUnixID(aclsWinSidUnixID)
	return o
}

// SetAclsWinSidUnixID adds the aclsWinSidUnixId to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) SetAclsWinSidUnixID(aclsWinSidUnixID *string) {
	o.AclsWinSidUnixID = aclsWinSidUnixID
}

// WithAllowUnencryptedAccess adds the allowUnencryptedAccess to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) WithAllowUnencryptedAccess(allowUnencryptedAccess *bool) *CifsShareModifyCollectionParams {
	o.SetAllowUnencryptedAccess(allowUnencryptedAccess)
	return o
}

// SetAllowUnencryptedAccess adds the allowUnencryptedAccess to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) SetAllowUnencryptedAccess(allowUnencryptedAccess *bool) {
	o.AllowUnencryptedAccess = allowUnencryptedAccess
}

// WithAttributeCache adds the attributeCache to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) WithAttributeCache(attributeCache *bool) *CifsShareModifyCollectionParams {
	o.SetAttributeCache(attributeCache)
	return o
}

// SetAttributeCache adds the attributeCache to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) SetAttributeCache(attributeCache *bool) {
	o.AttributeCache = attributeCache
}

// WithBrowsable adds the browsable to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) WithBrowsable(browsable *bool) *CifsShareModifyCollectionParams {
	o.SetBrowsable(browsable)
	return o
}

// SetBrowsable adds the browsable to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) SetBrowsable(browsable *bool) {
	o.Browsable = browsable
}

// WithChangeNotify adds the changeNotify to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) WithChangeNotify(changeNotify *bool) *CifsShareModifyCollectionParams {
	o.SetChangeNotify(changeNotify)
	return o
}

// SetChangeNotify adds the changeNotify to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) SetChangeNotify(changeNotify *bool) {
	o.ChangeNotify = changeNotify
}

// WithComment adds the comment to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) WithComment(comment *string) *CifsShareModifyCollectionParams {
	o.SetComment(comment)
	return o
}

// SetComment adds the comment to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) SetComment(comment *string) {
	o.Comment = comment
}

// WithContinueOnFailure adds the continueOnFailure to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) WithContinueOnFailure(continueOnFailure *bool) *CifsShareModifyCollectionParams {
	o.SetContinueOnFailure(continueOnFailure)
	return o
}

// SetContinueOnFailure adds the continueOnFailure to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) SetContinueOnFailure(continueOnFailure *bool) {
	o.ContinueOnFailure = continueOnFailure
}

// WithContinuouslyAvailable adds the continuouslyAvailable to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) WithContinuouslyAvailable(continuouslyAvailable *bool) *CifsShareModifyCollectionParams {
	o.SetContinuouslyAvailable(continuouslyAvailable)
	return o
}

// SetContinuouslyAvailable adds the continuouslyAvailable to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) SetContinuouslyAvailable(continuouslyAvailable *bool) {
	o.ContinuouslyAvailable = continuouslyAvailable
}

// WithDirUmask adds the dirUmask to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) WithDirUmask(dirUmask *string) *CifsShareModifyCollectionParams {
	o.SetDirUmask(dirUmask)
	return o
}

// SetDirUmask adds the dirUmask to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) SetDirUmask(dirUmask *string) {
	o.DirUmask = dirUmask
}

// WithEncryption adds the encryption to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) WithEncryption(encryption *bool) *CifsShareModifyCollectionParams {
	o.SetEncryption(encryption)
	return o
}

// SetEncryption adds the encryption to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) SetEncryption(encryption *bool) {
	o.Encryption = encryption
}

// WithFileUmask adds the fileUmask to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) WithFileUmask(fileUmask *string) *CifsShareModifyCollectionParams {
	o.SetFileUmask(fileUmask)
	return o
}

// SetFileUmask adds the fileUmask to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) SetFileUmask(fileUmask *string) {
	o.FileUmask = fileUmask
}

// WithForceGroupForCreate adds the forceGroupForCreate to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) WithForceGroupForCreate(forceGroupForCreate *string) *CifsShareModifyCollectionParams {
	o.SetForceGroupForCreate(forceGroupForCreate)
	return o
}

// SetForceGroupForCreate adds the forceGroupForCreate to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) SetForceGroupForCreate(forceGroupForCreate *string) {
	o.ForceGroupForCreate = forceGroupForCreate
}

// WithHomeDirectory adds the homeDirectory to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) WithHomeDirectory(homeDirectory *bool) *CifsShareModifyCollectionParams {
	o.SetHomeDirectory(homeDirectory)
	return o
}

// SetHomeDirectory adds the homeDirectory to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) SetHomeDirectory(homeDirectory *bool) {
	o.HomeDirectory = homeDirectory
}

// WithInfo adds the info to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) WithInfo(info CifsShareModifyCollectionBody) *CifsShareModifyCollectionParams {
	o.SetInfo(info)
	return o
}

// SetInfo adds the info to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) SetInfo(info CifsShareModifyCollectionBody) {
	o.Info = info
}

// WithMaxConnectionsPerShare adds the maxConnectionsPerShare to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) WithMaxConnectionsPerShare(maxConnectionsPerShare *int64) *CifsShareModifyCollectionParams {
	o.SetMaxConnectionsPerShare(maxConnectionsPerShare)
	return o
}

// SetMaxConnectionsPerShare adds the maxConnectionsPerShare to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) SetMaxConnectionsPerShare(maxConnectionsPerShare *int64) {
	o.MaxConnectionsPerShare = maxConnectionsPerShare
}

// WithName adds the name to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) WithName(name *string) *CifsShareModifyCollectionParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) SetName(name *string) {
	o.Name = name
}

// WithNamespaceCaching adds the namespaceCaching to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) WithNamespaceCaching(namespaceCaching *bool) *CifsShareModifyCollectionParams {
	o.SetNamespaceCaching(namespaceCaching)
	return o
}

// SetNamespaceCaching adds the namespaceCaching to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) SetNamespaceCaching(namespaceCaching *bool) {
	o.NamespaceCaching = namespaceCaching
}

// WithNoStrictSecurity adds the noStrictSecurity to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) WithNoStrictSecurity(noStrictSecurity *bool) *CifsShareModifyCollectionParams {
	o.SetNoStrictSecurity(noStrictSecurity)
	return o
}

// SetNoStrictSecurity adds the noStrictSecurity to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) SetNoStrictSecurity(noStrictSecurity *bool) {
	o.NoStrictSecurity = noStrictSecurity
}

// WithOfflineFiles adds the offlineFiles to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) WithOfflineFiles(offlineFiles *string) *CifsShareModifyCollectionParams {
	o.SetOfflineFiles(offlineFiles)
	return o
}

// SetOfflineFiles adds the offlineFiles to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) SetOfflineFiles(offlineFiles *string) {
	o.OfflineFiles = offlineFiles
}

// WithOplocks adds the oplocks to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) WithOplocks(oplocks *bool) *CifsShareModifyCollectionParams {
	o.SetOplocks(oplocks)
	return o
}

// SetOplocks adds the oplocks to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) SetOplocks(oplocks *bool) {
	o.Oplocks = oplocks
}

// WithPath adds the path to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) WithPath(path *string) *CifsShareModifyCollectionParams {
	o.SetPath(path)
	return o
}

// SetPath adds the path to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) SetPath(path *string) {
	o.Path = path
}

// WithReturnRecords adds the returnRecords to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) WithReturnRecords(returnRecords *bool) *CifsShareModifyCollectionParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) WithReturnTimeout(returnTimeout *int64) *CifsShareModifyCollectionParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithSerialRecords adds the serialRecords to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) WithSerialRecords(serialRecords *bool) *CifsShareModifyCollectionParams {
	o.SetSerialRecords(serialRecords)
	return o
}

// SetSerialRecords adds the serialRecords to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) SetSerialRecords(serialRecords *bool) {
	o.SerialRecords = serialRecords
}

// WithShowPreviousVersions adds the showPreviousVersions to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) WithShowPreviousVersions(showPreviousVersions *bool) *CifsShareModifyCollectionParams {
	o.SetShowPreviousVersions(showPreviousVersions)
	return o
}

// SetShowPreviousVersions adds the showPreviousVersions to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) SetShowPreviousVersions(showPreviousVersions *bool) {
	o.ShowPreviousVersions = showPreviousVersions
}

// WithShowSnapshot adds the showSnapshot to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) WithShowSnapshot(showSnapshot *bool) *CifsShareModifyCollectionParams {
	o.SetShowSnapshot(showSnapshot)
	return o
}

// SetShowSnapshot adds the showSnapshot to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) SetShowSnapshot(showSnapshot *bool) {
	o.ShowSnapshot = showSnapshot
}

// WithSvmName adds the svmName to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) WithSvmName(svmName *string) *CifsShareModifyCollectionParams {
	o.SetSvmName(svmName)
	return o
}

// SetSvmName adds the svmName to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) SetSvmName(svmName *string) {
	o.SvmName = svmName
}

// WithSvmUUID adds the svmUUID to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) WithSvmUUID(svmUUID *string) *CifsShareModifyCollectionParams {
	o.SetSvmUUID(svmUUID)
	return o
}

// SetSvmUUID adds the svmUuid to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) SetSvmUUID(svmUUID *string) {
	o.SvmUUID = svmUUID
}

// WithUnixSymlink adds the unixSymlink to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) WithUnixSymlink(unixSymlink *string) *CifsShareModifyCollectionParams {
	o.SetUnixSymlink(unixSymlink)
	return o
}

// SetUnixSymlink adds the unixSymlink to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) SetUnixSymlink(unixSymlink *string) {
	o.UnixSymlink = unixSymlink
}

// WithVolumeName adds the volumeName to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) WithVolumeName(volumeName *string) *CifsShareModifyCollectionParams {
	o.SetVolumeName(volumeName)
	return o
}

// SetVolumeName adds the volumeName to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) SetVolumeName(volumeName *string) {
	o.VolumeName = volumeName
}

// WithVolumeUUID adds the volumeUUID to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) WithVolumeUUID(volumeUUID *string) *CifsShareModifyCollectionParams {
	o.SetVolumeUUID(volumeUUID)
	return o
}

// SetVolumeUUID adds the volumeUuid to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) SetVolumeUUID(volumeUUID *string) {
	o.VolumeUUID = volumeUUID
}

// WithVscanProfile adds the vscanProfile to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) WithVscanProfile(vscanProfile *string) *CifsShareModifyCollectionParams {
	o.SetVscanProfile(vscanProfile)
	return o
}

// SetVscanProfile adds the vscanProfile to the cifs share modify collection params
func (o *CifsShareModifyCollectionParams) SetVscanProfile(vscanProfile *string) {
	o.VscanProfile = vscanProfile
}

// WriteToRequest writes these params to a swagger request
func (o *CifsShareModifyCollectionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccessBasedEnumeration != nil {

		// query param access_based_enumeration
		var qrAccessBasedEnumeration bool

		if o.AccessBasedEnumeration != nil {
			qrAccessBasedEnumeration = *o.AccessBasedEnumeration
		}
		qAccessBasedEnumeration := swag.FormatBool(qrAccessBasedEnumeration)
		if qAccessBasedEnumeration != "" {

			if err := r.SetQueryParam("access_based_enumeration", qAccessBasedEnumeration); err != nil {
				return err
			}
		}
	}

	if o.AclsPermission != nil {

		// query param acls.permission
		var qrAclsPermission string

		if o.AclsPermission != nil {
			qrAclsPermission = *o.AclsPermission
		}
		qAclsPermission := qrAclsPermission
		if qAclsPermission != "" {

			if err := r.SetQueryParam("acls.permission", qAclsPermission); err != nil {
				return err
			}
		}
	}

	if o.AclsType != nil {

		// query param acls.type
		var qrAclsType string

		if o.AclsType != nil {
			qrAclsType = *o.AclsType
		}
		qAclsType := qrAclsType
		if qAclsType != "" {

			if err := r.SetQueryParam("acls.type", qAclsType); err != nil {
				return err
			}
		}
	}

	if o.AclsUserOrGroup != nil {

		// query param acls.user_or_group
		var qrAclsUserOrGroup string

		if o.AclsUserOrGroup != nil {
			qrAclsUserOrGroup = *o.AclsUserOrGroup
		}
		qAclsUserOrGroup := qrAclsUserOrGroup
		if qAclsUserOrGroup != "" {

			if err := r.SetQueryParam("acls.user_or_group", qAclsUserOrGroup); err != nil {
				return err
			}
		}
	}

	if o.AclsWinSidUnixID != nil {

		// query param acls.win_sid_unix_id
		var qrAclsWinSidUnixID string

		if o.AclsWinSidUnixID != nil {
			qrAclsWinSidUnixID = *o.AclsWinSidUnixID
		}
		qAclsWinSidUnixID := qrAclsWinSidUnixID
		if qAclsWinSidUnixID != "" {

			if err := r.SetQueryParam("acls.win_sid_unix_id", qAclsWinSidUnixID); err != nil {
				return err
			}
		}
	}

	if o.AllowUnencryptedAccess != nil {

		// query param allow_unencrypted_access
		var qrAllowUnencryptedAccess bool

		if o.AllowUnencryptedAccess != nil {
			qrAllowUnencryptedAccess = *o.AllowUnencryptedAccess
		}
		qAllowUnencryptedAccess := swag.FormatBool(qrAllowUnencryptedAccess)
		if qAllowUnencryptedAccess != "" {

			if err := r.SetQueryParam("allow_unencrypted_access", qAllowUnencryptedAccess); err != nil {
				return err
			}
		}
	}

	if o.AttributeCache != nil {

		// query param attribute_cache
		var qrAttributeCache bool

		if o.AttributeCache != nil {
			qrAttributeCache = *o.AttributeCache
		}
		qAttributeCache := swag.FormatBool(qrAttributeCache)
		if qAttributeCache != "" {

			if err := r.SetQueryParam("attribute_cache", qAttributeCache); err != nil {
				return err
			}
		}
	}

	if o.Browsable != nil {

		// query param browsable
		var qrBrowsable bool

		if o.Browsable != nil {
			qrBrowsable = *o.Browsable
		}
		qBrowsable := swag.FormatBool(qrBrowsable)
		if qBrowsable != "" {

			if err := r.SetQueryParam("browsable", qBrowsable); err != nil {
				return err
			}
		}
	}

	if o.ChangeNotify != nil {

		// query param change_notify
		var qrChangeNotify bool

		if o.ChangeNotify != nil {
			qrChangeNotify = *o.ChangeNotify
		}
		qChangeNotify := swag.FormatBool(qrChangeNotify)
		if qChangeNotify != "" {

			if err := r.SetQueryParam("change_notify", qChangeNotify); err != nil {
				return err
			}
		}
	}

	if o.Comment != nil {

		// query param comment
		var qrComment string

		if o.Comment != nil {
			qrComment = *o.Comment
		}
		qComment := qrComment
		if qComment != "" {

			if err := r.SetQueryParam("comment", qComment); err != nil {
				return err
			}
		}
	}

	if o.ContinueOnFailure != nil {

		// query param continue_on_failure
		var qrContinueOnFailure bool

		if o.ContinueOnFailure != nil {
			qrContinueOnFailure = *o.ContinueOnFailure
		}
		qContinueOnFailure := swag.FormatBool(qrContinueOnFailure)
		if qContinueOnFailure != "" {

			if err := r.SetQueryParam("continue_on_failure", qContinueOnFailure); err != nil {
				return err
			}
		}
	}

	if o.ContinuouslyAvailable != nil {

		// query param continuously_available
		var qrContinuouslyAvailable bool

		if o.ContinuouslyAvailable != nil {
			qrContinuouslyAvailable = *o.ContinuouslyAvailable
		}
		qContinuouslyAvailable := swag.FormatBool(qrContinuouslyAvailable)
		if qContinuouslyAvailable != "" {

			if err := r.SetQueryParam("continuously_available", qContinuouslyAvailable); err != nil {
				return err
			}
		}
	}

	if o.DirUmask != nil {

		// query param dir_umask
		var qrDirUmask string

		if o.DirUmask != nil {
			qrDirUmask = *o.DirUmask
		}
		qDirUmask := qrDirUmask
		if qDirUmask != "" {

			if err := r.SetQueryParam("dir_umask", qDirUmask); err != nil {
				return err
			}
		}
	}

	if o.Encryption != nil {

		// query param encryption
		var qrEncryption bool

		if o.Encryption != nil {
			qrEncryption = *o.Encryption
		}
		qEncryption := swag.FormatBool(qrEncryption)
		if qEncryption != "" {

			if err := r.SetQueryParam("encryption", qEncryption); err != nil {
				return err
			}
		}
	}

	if o.FileUmask != nil {

		// query param file_umask
		var qrFileUmask string

		if o.FileUmask != nil {
			qrFileUmask = *o.FileUmask
		}
		qFileUmask := qrFileUmask
		if qFileUmask != "" {

			if err := r.SetQueryParam("file_umask", qFileUmask); err != nil {
				return err
			}
		}
	}

	if o.ForceGroupForCreate != nil {

		// query param force_group_for_create
		var qrForceGroupForCreate string

		if o.ForceGroupForCreate != nil {
			qrForceGroupForCreate = *o.ForceGroupForCreate
		}
		qForceGroupForCreate := qrForceGroupForCreate
		if qForceGroupForCreate != "" {

			if err := r.SetQueryParam("force_group_for_create", qForceGroupForCreate); err != nil {
				return err
			}
		}
	}

	if o.HomeDirectory != nil {

		// query param home_directory
		var qrHomeDirectory bool

		if o.HomeDirectory != nil {
			qrHomeDirectory = *o.HomeDirectory
		}
		qHomeDirectory := swag.FormatBool(qrHomeDirectory)
		if qHomeDirectory != "" {

			if err := r.SetQueryParam("home_directory", qHomeDirectory); err != nil {
				return err
			}
		}
	}
	if err := r.SetBodyParam(o.Info); err != nil {
		return err
	}

	if o.MaxConnectionsPerShare != nil {

		// query param max_connections_per_share
		var qrMaxConnectionsPerShare int64

		if o.MaxConnectionsPerShare != nil {
			qrMaxConnectionsPerShare = *o.MaxConnectionsPerShare
		}
		qMaxConnectionsPerShare := swag.FormatInt64(qrMaxConnectionsPerShare)
		if qMaxConnectionsPerShare != "" {

			if err := r.SetQueryParam("max_connections_per_share", qMaxConnectionsPerShare); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.NamespaceCaching != nil {

		// query param namespace_caching
		var qrNamespaceCaching bool

		if o.NamespaceCaching != nil {
			qrNamespaceCaching = *o.NamespaceCaching
		}
		qNamespaceCaching := swag.FormatBool(qrNamespaceCaching)
		if qNamespaceCaching != "" {

			if err := r.SetQueryParam("namespace_caching", qNamespaceCaching); err != nil {
				return err
			}
		}
	}

	if o.NoStrictSecurity != nil {

		// query param no_strict_security
		var qrNoStrictSecurity bool

		if o.NoStrictSecurity != nil {
			qrNoStrictSecurity = *o.NoStrictSecurity
		}
		qNoStrictSecurity := swag.FormatBool(qrNoStrictSecurity)
		if qNoStrictSecurity != "" {

			if err := r.SetQueryParam("no_strict_security", qNoStrictSecurity); err != nil {
				return err
			}
		}
	}

	if o.OfflineFiles != nil {

		// query param offline_files
		var qrOfflineFiles string

		if o.OfflineFiles != nil {
			qrOfflineFiles = *o.OfflineFiles
		}
		qOfflineFiles := qrOfflineFiles
		if qOfflineFiles != "" {

			if err := r.SetQueryParam("offline_files", qOfflineFiles); err != nil {
				return err
			}
		}
	}

	if o.Oplocks != nil {

		// query param oplocks
		var qrOplocks bool

		if o.Oplocks != nil {
			qrOplocks = *o.Oplocks
		}
		qOplocks := swag.FormatBool(qrOplocks)
		if qOplocks != "" {

			if err := r.SetQueryParam("oplocks", qOplocks); err != nil {
				return err
			}
		}
	}

	if o.Path != nil {

		// query param path
		var qrPath string

		if o.Path != nil {
			qrPath = *o.Path
		}
		qPath := qrPath
		if qPath != "" {

			if err := r.SetQueryParam("path", qPath); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SerialRecords != nil {

		// query param serial_records
		var qrSerialRecords bool

		if o.SerialRecords != nil {
			qrSerialRecords = *o.SerialRecords
		}
		qSerialRecords := swag.FormatBool(qrSerialRecords)
		if qSerialRecords != "" {

			if err := r.SetQueryParam("serial_records", qSerialRecords); err != nil {
				return err
			}
		}
	}

	if o.ShowPreviousVersions != nil {

		// query param show_previous_versions
		var qrShowPreviousVersions bool

		if o.ShowPreviousVersions != nil {
			qrShowPreviousVersions = *o.ShowPreviousVersions
		}
		qShowPreviousVersions := swag.FormatBool(qrShowPreviousVersions)
		if qShowPreviousVersions != "" {

			if err := r.SetQueryParam("show_previous_versions", qShowPreviousVersions); err != nil {
				return err
			}
		}
	}

	if o.ShowSnapshot != nil {

		// query param show_snapshot
		var qrShowSnapshot bool

		if o.ShowSnapshot != nil {
			qrShowSnapshot = *o.ShowSnapshot
		}
		qShowSnapshot := swag.FormatBool(qrShowSnapshot)
		if qShowSnapshot != "" {

			if err := r.SetQueryParam("show_snapshot", qShowSnapshot); err != nil {
				return err
			}
		}
	}

	if o.SvmName != nil {

		// query param svm.name
		var qrSvmName string

		if o.SvmName != nil {
			qrSvmName = *o.SvmName
		}
		qSvmName := qrSvmName
		if qSvmName != "" {

			if err := r.SetQueryParam("svm.name", qSvmName); err != nil {
				return err
			}
		}
	}

	if o.SvmUUID != nil {

		// query param svm.uuid
		var qrSvmUUID string

		if o.SvmUUID != nil {
			qrSvmUUID = *o.SvmUUID
		}
		qSvmUUID := qrSvmUUID
		if qSvmUUID != "" {

			if err := r.SetQueryParam("svm.uuid", qSvmUUID); err != nil {
				return err
			}
		}
	}

	if o.UnixSymlink != nil {

		// query param unix_symlink
		var qrUnixSymlink string

		if o.UnixSymlink != nil {
			qrUnixSymlink = *o.UnixSymlink
		}
		qUnixSymlink := qrUnixSymlink
		if qUnixSymlink != "" {

			if err := r.SetQueryParam("unix_symlink", qUnixSymlink); err != nil {
				return err
			}
		}
	}

	if o.VolumeName != nil {

		// query param volume.name
		var qrVolumeName string

		if o.VolumeName != nil {
			qrVolumeName = *o.VolumeName
		}
		qVolumeName := qrVolumeName
		if qVolumeName != "" {

			if err := r.SetQueryParam("volume.name", qVolumeName); err != nil {
				return err
			}
		}
	}

	if o.VolumeUUID != nil {

		// query param volume.uuid
		var qrVolumeUUID string

		if o.VolumeUUID != nil {
			qrVolumeUUID = *o.VolumeUUID
		}
		qVolumeUUID := qrVolumeUUID
		if qVolumeUUID != "" {

			if err := r.SetQueryParam("volume.uuid", qVolumeUUID); err != nil {
				return err
			}
		}
	}

	if o.VscanProfile != nil {

		// query param vscan_profile
		var qrVscanProfile string

		if o.VscanProfile != nil {
			qrVscanProfile = *o.VscanProfile
		}
		qVscanProfile := qrVscanProfile
		if qVscanProfile != "" {

			if err := r.SetQueryParam("vscan_profile", qVscanProfile); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
