// Code generated by go-swagger; DO NOT EDIT.

package n_a_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewClientLockDeleteCollectionParams creates a new ClientLockDeleteCollectionParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewClientLockDeleteCollectionParams() *ClientLockDeleteCollectionParams {
	return &ClientLockDeleteCollectionParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewClientLockDeleteCollectionParamsWithTimeout creates a new ClientLockDeleteCollectionParams object
// with the ability to set a timeout on a request.
func NewClientLockDeleteCollectionParamsWithTimeout(timeout time.Duration) *ClientLockDeleteCollectionParams {
	return &ClientLockDeleteCollectionParams{
		timeout: timeout,
	}
}

// NewClientLockDeleteCollectionParamsWithContext creates a new ClientLockDeleteCollectionParams object
// with the ability to set a context for a request.
func NewClientLockDeleteCollectionParamsWithContext(ctx context.Context) *ClientLockDeleteCollectionParams {
	return &ClientLockDeleteCollectionParams{
		Context: ctx,
	}
}

// NewClientLockDeleteCollectionParamsWithHTTPClient creates a new ClientLockDeleteCollectionParams object
// with the ability to set a custom HTTPClient for a request.
func NewClientLockDeleteCollectionParamsWithHTTPClient(client *http.Client) *ClientLockDeleteCollectionParams {
	return &ClientLockDeleteCollectionParams{
		HTTPClient: client,
	}
}

/*
ClientLockDeleteCollectionParams contains all the parameters to send to the API endpoint

	for the client lock delete collection operation.

	Typically these are written to a http.Request.
*/
type ClientLockDeleteCollectionParams struct {

	/* ByteLockExclusive.

	   Filter by byte_lock.exclusive
	*/
	ByteLockExclusive *bool

	/* ByteLockLength.

	   Filter by byte_lock.length
	*/
	ByteLockLength *int64

	/* ByteLockMandatory.

	   Filter by byte_lock.mandatory
	*/
	ByteLockMandatory *bool

	/* ByteLockOffset.

	   Filter by byte_lock.offset
	*/
	ByteLockOffset *int64

	/* ByteLockSoft.

	   Filter by byte_lock.soft
	*/
	ByteLockSoft *bool

	/* ByteLockSuper.

	   Filter by byte_lock.super
	*/
	ByteLockSuper *bool

	/* ClientAddress.

	   Filter by client_address
	*/
	ClientAddress *string

	/* Constituent.

	   Filter by constituent
	*/
	Constituent *bool

	/* ContinueOnFailure.

	   Continue even when the operation fails on one of the records.
	*/
	ContinueOnFailure *bool

	/* Delegation.

	   Filter by delegation
	*/
	Delegation *string

	/* Info.

	   Info specification
	*/
	Info ClientLockDeleteCollectionBody

	/* InterfaceIPAddress.

	   Filter by interface.ip.address
	*/
	InterfaceIPAddress *string

	/* InterfaceName.

	   Filter by interface.name
	*/
	InterfaceName *string

	/* InterfaceUUID.

	   Filter by interface.uuid
	*/
	InterfaceUUID *string

	/* NodeName.

	   Filter by node.name
	*/
	NodeName *string

	/* NodeUUID.

	   Filter by node.uuid
	*/
	NodeUUID *string

	/* OplockLevel.

	   Filter by oplock_level
	*/
	OplockLevel *string

	/* OwnerID.

	   Filter by owner_id
	*/
	OwnerID *string

	/* Path.

	   Filter by path
	*/
	Path *string

	/* Protocol.

	   Filter by protocol
	*/
	Protocol *string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* SerialRecords.

	   Perform the operation on the records synchronously.
	*/
	SerialRecords *bool

	/* ShareLockMode.

	   Filter by share_lock.mode
	*/
	ShareLockMode *string

	/* ShareLockSoft.

	   Filter by share_lock.soft
	*/
	ShareLockSoft *bool

	/* SmbConnectState.

	   Filter by smb.connect_state
	*/
	SmbConnectState *string

	/* SmbOpenGroupID.

	   Filter by smb.open_group_id
	*/
	SmbOpenGroupID *string

	/* SmbOpenType.

	   Filter by smb.open_type
	*/
	SmbOpenType *string

	/* State.

	   Filter by state
	*/
	State *string

	/* SvmName.

	   Filter by svm.name
	*/
	SvmName *string

	/* SvmUUID.

	   Filter by svm.uuid
	*/
	SvmUUID *string

	/* Type.

	   Filter by type
	*/
	Type *string

	/* UUID.

	   Filter by uuid
	*/
	UUID *string

	/* VolumeName.

	   Filter by volume.name
	*/
	VolumeName *string

	/* VolumeUUID.

	   Filter by volume.uuid
	*/
	VolumeUUID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the client lock delete collection params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ClientLockDeleteCollectionParams) WithDefaults() *ClientLockDeleteCollectionParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the client lock delete collection params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ClientLockDeleteCollectionParams) SetDefaults() {
	var (
		continueOnFailureDefault = bool(false)

		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)

		serialRecordsDefault = bool(false)
	)

	val := ClientLockDeleteCollectionParams{
		ContinueOnFailure: &continueOnFailureDefault,
		ReturnRecords:     &returnRecordsDefault,
		ReturnTimeout:     &returnTimeoutDefault,
		SerialRecords:     &serialRecordsDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) WithTimeout(timeout time.Duration) *ClientLockDeleteCollectionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) WithContext(ctx context.Context) *ClientLockDeleteCollectionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) WithHTTPClient(client *http.Client) *ClientLockDeleteCollectionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithByteLockExclusive adds the byteLockExclusive to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) WithByteLockExclusive(byteLockExclusive *bool) *ClientLockDeleteCollectionParams {
	o.SetByteLockExclusive(byteLockExclusive)
	return o
}

// SetByteLockExclusive adds the byteLockExclusive to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) SetByteLockExclusive(byteLockExclusive *bool) {
	o.ByteLockExclusive = byteLockExclusive
}

// WithByteLockLength adds the byteLockLength to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) WithByteLockLength(byteLockLength *int64) *ClientLockDeleteCollectionParams {
	o.SetByteLockLength(byteLockLength)
	return o
}

// SetByteLockLength adds the byteLockLength to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) SetByteLockLength(byteLockLength *int64) {
	o.ByteLockLength = byteLockLength
}

// WithByteLockMandatory adds the byteLockMandatory to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) WithByteLockMandatory(byteLockMandatory *bool) *ClientLockDeleteCollectionParams {
	o.SetByteLockMandatory(byteLockMandatory)
	return o
}

// SetByteLockMandatory adds the byteLockMandatory to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) SetByteLockMandatory(byteLockMandatory *bool) {
	o.ByteLockMandatory = byteLockMandatory
}

// WithByteLockOffset adds the byteLockOffset to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) WithByteLockOffset(byteLockOffset *int64) *ClientLockDeleteCollectionParams {
	o.SetByteLockOffset(byteLockOffset)
	return o
}

// SetByteLockOffset adds the byteLockOffset to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) SetByteLockOffset(byteLockOffset *int64) {
	o.ByteLockOffset = byteLockOffset
}

// WithByteLockSoft adds the byteLockSoft to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) WithByteLockSoft(byteLockSoft *bool) *ClientLockDeleteCollectionParams {
	o.SetByteLockSoft(byteLockSoft)
	return o
}

// SetByteLockSoft adds the byteLockSoft to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) SetByteLockSoft(byteLockSoft *bool) {
	o.ByteLockSoft = byteLockSoft
}

// WithByteLockSuper adds the byteLockSuper to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) WithByteLockSuper(byteLockSuper *bool) *ClientLockDeleteCollectionParams {
	o.SetByteLockSuper(byteLockSuper)
	return o
}

// SetByteLockSuper adds the byteLockSuper to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) SetByteLockSuper(byteLockSuper *bool) {
	o.ByteLockSuper = byteLockSuper
}

// WithClientAddress adds the clientAddress to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) WithClientAddress(clientAddress *string) *ClientLockDeleteCollectionParams {
	o.SetClientAddress(clientAddress)
	return o
}

// SetClientAddress adds the clientAddress to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) SetClientAddress(clientAddress *string) {
	o.ClientAddress = clientAddress
}

// WithConstituent adds the constituent to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) WithConstituent(constituent *bool) *ClientLockDeleteCollectionParams {
	o.SetConstituent(constituent)
	return o
}

// SetConstituent adds the constituent to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) SetConstituent(constituent *bool) {
	o.Constituent = constituent
}

// WithContinueOnFailure adds the continueOnFailure to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) WithContinueOnFailure(continueOnFailure *bool) *ClientLockDeleteCollectionParams {
	o.SetContinueOnFailure(continueOnFailure)
	return o
}

// SetContinueOnFailure adds the continueOnFailure to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) SetContinueOnFailure(continueOnFailure *bool) {
	o.ContinueOnFailure = continueOnFailure
}

// WithDelegation adds the delegation to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) WithDelegation(delegation *string) *ClientLockDeleteCollectionParams {
	o.SetDelegation(delegation)
	return o
}

// SetDelegation adds the delegation to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) SetDelegation(delegation *string) {
	o.Delegation = delegation
}

// WithInfo adds the info to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) WithInfo(info ClientLockDeleteCollectionBody) *ClientLockDeleteCollectionParams {
	o.SetInfo(info)
	return o
}

// SetInfo adds the info to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) SetInfo(info ClientLockDeleteCollectionBody) {
	o.Info = info
}

// WithInterfaceIPAddress adds the interfaceIPAddress to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) WithInterfaceIPAddress(interfaceIPAddress *string) *ClientLockDeleteCollectionParams {
	o.SetInterfaceIPAddress(interfaceIPAddress)
	return o
}

// SetInterfaceIPAddress adds the interfaceIpAddress to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) SetInterfaceIPAddress(interfaceIPAddress *string) {
	o.InterfaceIPAddress = interfaceIPAddress
}

// WithInterfaceName adds the interfaceName to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) WithInterfaceName(interfaceName *string) *ClientLockDeleteCollectionParams {
	o.SetInterfaceName(interfaceName)
	return o
}

// SetInterfaceName adds the interfaceName to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) SetInterfaceName(interfaceName *string) {
	o.InterfaceName = interfaceName
}

// WithInterfaceUUID adds the interfaceUUID to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) WithInterfaceUUID(interfaceUUID *string) *ClientLockDeleteCollectionParams {
	o.SetInterfaceUUID(interfaceUUID)
	return o
}

// SetInterfaceUUID adds the interfaceUuid to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) SetInterfaceUUID(interfaceUUID *string) {
	o.InterfaceUUID = interfaceUUID
}

// WithNodeName adds the nodeName to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) WithNodeName(nodeName *string) *ClientLockDeleteCollectionParams {
	o.SetNodeName(nodeName)
	return o
}

// SetNodeName adds the nodeName to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) SetNodeName(nodeName *string) {
	o.NodeName = nodeName
}

// WithNodeUUID adds the nodeUUID to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) WithNodeUUID(nodeUUID *string) *ClientLockDeleteCollectionParams {
	o.SetNodeUUID(nodeUUID)
	return o
}

// SetNodeUUID adds the nodeUuid to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) SetNodeUUID(nodeUUID *string) {
	o.NodeUUID = nodeUUID
}

// WithOplockLevel adds the oplockLevel to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) WithOplockLevel(oplockLevel *string) *ClientLockDeleteCollectionParams {
	o.SetOplockLevel(oplockLevel)
	return o
}

// SetOplockLevel adds the oplockLevel to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) SetOplockLevel(oplockLevel *string) {
	o.OplockLevel = oplockLevel
}

// WithOwnerID adds the ownerID to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) WithOwnerID(ownerID *string) *ClientLockDeleteCollectionParams {
	o.SetOwnerID(ownerID)
	return o
}

// SetOwnerID adds the ownerId to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) SetOwnerID(ownerID *string) {
	o.OwnerID = ownerID
}

// WithPath adds the path to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) WithPath(path *string) *ClientLockDeleteCollectionParams {
	o.SetPath(path)
	return o
}

// SetPath adds the path to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) SetPath(path *string) {
	o.Path = path
}

// WithProtocol adds the protocol to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) WithProtocol(protocol *string) *ClientLockDeleteCollectionParams {
	o.SetProtocol(protocol)
	return o
}

// SetProtocol adds the protocol to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) SetProtocol(protocol *string) {
	o.Protocol = protocol
}

// WithReturnRecords adds the returnRecords to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) WithReturnRecords(returnRecords *bool) *ClientLockDeleteCollectionParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) WithReturnTimeout(returnTimeout *int64) *ClientLockDeleteCollectionParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithSerialRecords adds the serialRecords to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) WithSerialRecords(serialRecords *bool) *ClientLockDeleteCollectionParams {
	o.SetSerialRecords(serialRecords)
	return o
}

// SetSerialRecords adds the serialRecords to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) SetSerialRecords(serialRecords *bool) {
	o.SerialRecords = serialRecords
}

// WithShareLockMode adds the shareLockMode to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) WithShareLockMode(shareLockMode *string) *ClientLockDeleteCollectionParams {
	o.SetShareLockMode(shareLockMode)
	return o
}

// SetShareLockMode adds the shareLockMode to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) SetShareLockMode(shareLockMode *string) {
	o.ShareLockMode = shareLockMode
}

// WithShareLockSoft adds the shareLockSoft to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) WithShareLockSoft(shareLockSoft *bool) *ClientLockDeleteCollectionParams {
	o.SetShareLockSoft(shareLockSoft)
	return o
}

// SetShareLockSoft adds the shareLockSoft to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) SetShareLockSoft(shareLockSoft *bool) {
	o.ShareLockSoft = shareLockSoft
}

// WithSmbConnectState adds the smbConnectState to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) WithSmbConnectState(smbConnectState *string) *ClientLockDeleteCollectionParams {
	o.SetSmbConnectState(smbConnectState)
	return o
}

// SetSmbConnectState adds the smbConnectState to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) SetSmbConnectState(smbConnectState *string) {
	o.SmbConnectState = smbConnectState
}

// WithSmbOpenGroupID adds the smbOpenGroupID to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) WithSmbOpenGroupID(smbOpenGroupID *string) *ClientLockDeleteCollectionParams {
	o.SetSmbOpenGroupID(smbOpenGroupID)
	return o
}

// SetSmbOpenGroupID adds the smbOpenGroupId to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) SetSmbOpenGroupID(smbOpenGroupID *string) {
	o.SmbOpenGroupID = smbOpenGroupID
}

// WithSmbOpenType adds the smbOpenType to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) WithSmbOpenType(smbOpenType *string) *ClientLockDeleteCollectionParams {
	o.SetSmbOpenType(smbOpenType)
	return o
}

// SetSmbOpenType adds the smbOpenType to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) SetSmbOpenType(smbOpenType *string) {
	o.SmbOpenType = smbOpenType
}

// WithState adds the state to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) WithState(state *string) *ClientLockDeleteCollectionParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) SetState(state *string) {
	o.State = state
}

// WithSvmName adds the svmName to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) WithSvmName(svmName *string) *ClientLockDeleteCollectionParams {
	o.SetSvmName(svmName)
	return o
}

// SetSvmName adds the svmName to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) SetSvmName(svmName *string) {
	o.SvmName = svmName
}

// WithSvmUUID adds the svmUUID to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) WithSvmUUID(svmUUID *string) *ClientLockDeleteCollectionParams {
	o.SetSvmUUID(svmUUID)
	return o
}

// SetSvmUUID adds the svmUuid to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) SetSvmUUID(svmUUID *string) {
	o.SvmUUID = svmUUID
}

// WithType adds the typeVar to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) WithType(typeVar *string) *ClientLockDeleteCollectionParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WithUUID adds the uuid to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) WithUUID(uuid *string) *ClientLockDeleteCollectionParams {
	o.SetUUID(uuid)
	return o
}

// SetUUID adds the uuid to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) SetUUID(uuid *string) {
	o.UUID = uuid
}

// WithVolumeName adds the volumeName to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) WithVolumeName(volumeName *string) *ClientLockDeleteCollectionParams {
	o.SetVolumeName(volumeName)
	return o
}

// SetVolumeName adds the volumeName to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) SetVolumeName(volumeName *string) {
	o.VolumeName = volumeName
}

// WithVolumeUUID adds the volumeUUID to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) WithVolumeUUID(volumeUUID *string) *ClientLockDeleteCollectionParams {
	o.SetVolumeUUID(volumeUUID)
	return o
}

// SetVolumeUUID adds the volumeUuid to the client lock delete collection params
func (o *ClientLockDeleteCollectionParams) SetVolumeUUID(volumeUUID *string) {
	o.VolumeUUID = volumeUUID
}

// WriteToRequest writes these params to a swagger request
func (o *ClientLockDeleteCollectionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ByteLockExclusive != nil {

		// query param byte_lock.exclusive
		var qrByteLockExclusive bool

		if o.ByteLockExclusive != nil {
			qrByteLockExclusive = *o.ByteLockExclusive
		}
		qByteLockExclusive := swag.FormatBool(qrByteLockExclusive)
		if qByteLockExclusive != "" {

			if err := r.SetQueryParam("byte_lock.exclusive", qByteLockExclusive); err != nil {
				return err
			}
		}
	}

	if o.ByteLockLength != nil {

		// query param byte_lock.length
		var qrByteLockLength int64

		if o.ByteLockLength != nil {
			qrByteLockLength = *o.ByteLockLength
		}
		qByteLockLength := swag.FormatInt64(qrByteLockLength)
		if qByteLockLength != "" {

			if err := r.SetQueryParam("byte_lock.length", qByteLockLength); err != nil {
				return err
			}
		}
	}

	if o.ByteLockMandatory != nil {

		// query param byte_lock.mandatory
		var qrByteLockMandatory bool

		if o.ByteLockMandatory != nil {
			qrByteLockMandatory = *o.ByteLockMandatory
		}
		qByteLockMandatory := swag.FormatBool(qrByteLockMandatory)
		if qByteLockMandatory != "" {

			if err := r.SetQueryParam("byte_lock.mandatory", qByteLockMandatory); err != nil {
				return err
			}
		}
	}

	if o.ByteLockOffset != nil {

		// query param byte_lock.offset
		var qrByteLockOffset int64

		if o.ByteLockOffset != nil {
			qrByteLockOffset = *o.ByteLockOffset
		}
		qByteLockOffset := swag.FormatInt64(qrByteLockOffset)
		if qByteLockOffset != "" {

			if err := r.SetQueryParam("byte_lock.offset", qByteLockOffset); err != nil {
				return err
			}
		}
	}

	if o.ByteLockSoft != nil {

		// query param byte_lock.soft
		var qrByteLockSoft bool

		if o.ByteLockSoft != nil {
			qrByteLockSoft = *o.ByteLockSoft
		}
		qByteLockSoft := swag.FormatBool(qrByteLockSoft)
		if qByteLockSoft != "" {

			if err := r.SetQueryParam("byte_lock.soft", qByteLockSoft); err != nil {
				return err
			}
		}
	}

	if o.ByteLockSuper != nil {

		// query param byte_lock.super
		var qrByteLockSuper bool

		if o.ByteLockSuper != nil {
			qrByteLockSuper = *o.ByteLockSuper
		}
		qByteLockSuper := swag.FormatBool(qrByteLockSuper)
		if qByteLockSuper != "" {

			if err := r.SetQueryParam("byte_lock.super", qByteLockSuper); err != nil {
				return err
			}
		}
	}

	if o.ClientAddress != nil {

		// query param client_address
		var qrClientAddress string

		if o.ClientAddress != nil {
			qrClientAddress = *o.ClientAddress
		}
		qClientAddress := qrClientAddress
		if qClientAddress != "" {

			if err := r.SetQueryParam("client_address", qClientAddress); err != nil {
				return err
			}
		}
	}

	if o.Constituent != nil {

		// query param constituent
		var qrConstituent bool

		if o.Constituent != nil {
			qrConstituent = *o.Constituent
		}
		qConstituent := swag.FormatBool(qrConstituent)
		if qConstituent != "" {

			if err := r.SetQueryParam("constituent", qConstituent); err != nil {
				return err
			}
		}
	}

	if o.ContinueOnFailure != nil {

		// query param continue_on_failure
		var qrContinueOnFailure bool

		if o.ContinueOnFailure != nil {
			qrContinueOnFailure = *o.ContinueOnFailure
		}
		qContinueOnFailure := swag.FormatBool(qrContinueOnFailure)
		if qContinueOnFailure != "" {

			if err := r.SetQueryParam("continue_on_failure", qContinueOnFailure); err != nil {
				return err
			}
		}
	}

	if o.Delegation != nil {

		// query param delegation
		var qrDelegation string

		if o.Delegation != nil {
			qrDelegation = *o.Delegation
		}
		qDelegation := qrDelegation
		if qDelegation != "" {

			if err := r.SetQueryParam("delegation", qDelegation); err != nil {
				return err
			}
		}
	}
	if err := r.SetBodyParam(o.Info); err != nil {
		return err
	}

	if o.InterfaceIPAddress != nil {

		// query param interface.ip.address
		var qrInterfaceIPAddress string

		if o.InterfaceIPAddress != nil {
			qrInterfaceIPAddress = *o.InterfaceIPAddress
		}
		qInterfaceIPAddress := qrInterfaceIPAddress
		if qInterfaceIPAddress != "" {

			if err := r.SetQueryParam("interface.ip.address", qInterfaceIPAddress); err != nil {
				return err
			}
		}
	}

	if o.InterfaceName != nil {

		// query param interface.name
		var qrInterfaceName string

		if o.InterfaceName != nil {
			qrInterfaceName = *o.InterfaceName
		}
		qInterfaceName := qrInterfaceName
		if qInterfaceName != "" {

			if err := r.SetQueryParam("interface.name", qInterfaceName); err != nil {
				return err
			}
		}
	}

	if o.InterfaceUUID != nil {

		// query param interface.uuid
		var qrInterfaceUUID string

		if o.InterfaceUUID != nil {
			qrInterfaceUUID = *o.InterfaceUUID
		}
		qInterfaceUUID := qrInterfaceUUID
		if qInterfaceUUID != "" {

			if err := r.SetQueryParam("interface.uuid", qInterfaceUUID); err != nil {
				return err
			}
		}
	}

	if o.NodeName != nil {

		// query param node.name
		var qrNodeName string

		if o.NodeName != nil {
			qrNodeName = *o.NodeName
		}
		qNodeName := qrNodeName
		if qNodeName != "" {

			if err := r.SetQueryParam("node.name", qNodeName); err != nil {
				return err
			}
		}
	}

	if o.NodeUUID != nil {

		// query param node.uuid
		var qrNodeUUID string

		if o.NodeUUID != nil {
			qrNodeUUID = *o.NodeUUID
		}
		qNodeUUID := qrNodeUUID
		if qNodeUUID != "" {

			if err := r.SetQueryParam("node.uuid", qNodeUUID); err != nil {
				return err
			}
		}
	}

	if o.OplockLevel != nil {

		// query param oplock_level
		var qrOplockLevel string

		if o.OplockLevel != nil {
			qrOplockLevel = *o.OplockLevel
		}
		qOplockLevel := qrOplockLevel
		if qOplockLevel != "" {

			if err := r.SetQueryParam("oplock_level", qOplockLevel); err != nil {
				return err
			}
		}
	}

	if o.OwnerID != nil {

		// query param owner_id
		var qrOwnerID string

		if o.OwnerID != nil {
			qrOwnerID = *o.OwnerID
		}
		qOwnerID := qrOwnerID
		if qOwnerID != "" {

			if err := r.SetQueryParam("owner_id", qOwnerID); err != nil {
				return err
			}
		}
	}

	if o.Path != nil {

		// query param path
		var qrPath string

		if o.Path != nil {
			qrPath = *o.Path
		}
		qPath := qrPath
		if qPath != "" {

			if err := r.SetQueryParam("path", qPath); err != nil {
				return err
			}
		}
	}

	if o.Protocol != nil {

		// query param protocol
		var qrProtocol string

		if o.Protocol != nil {
			qrProtocol = *o.Protocol
		}
		qProtocol := qrProtocol
		if qProtocol != "" {

			if err := r.SetQueryParam("protocol", qProtocol); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SerialRecords != nil {

		// query param serial_records
		var qrSerialRecords bool

		if o.SerialRecords != nil {
			qrSerialRecords = *o.SerialRecords
		}
		qSerialRecords := swag.FormatBool(qrSerialRecords)
		if qSerialRecords != "" {

			if err := r.SetQueryParam("serial_records", qSerialRecords); err != nil {
				return err
			}
		}
	}

	if o.ShareLockMode != nil {

		// query param share_lock.mode
		var qrShareLockMode string

		if o.ShareLockMode != nil {
			qrShareLockMode = *o.ShareLockMode
		}
		qShareLockMode := qrShareLockMode
		if qShareLockMode != "" {

			if err := r.SetQueryParam("share_lock.mode", qShareLockMode); err != nil {
				return err
			}
		}
	}

	if o.ShareLockSoft != nil {

		// query param share_lock.soft
		var qrShareLockSoft bool

		if o.ShareLockSoft != nil {
			qrShareLockSoft = *o.ShareLockSoft
		}
		qShareLockSoft := swag.FormatBool(qrShareLockSoft)
		if qShareLockSoft != "" {

			if err := r.SetQueryParam("share_lock.soft", qShareLockSoft); err != nil {
				return err
			}
		}
	}

	if o.SmbConnectState != nil {

		// query param smb.connect_state
		var qrSmbConnectState string

		if o.SmbConnectState != nil {
			qrSmbConnectState = *o.SmbConnectState
		}
		qSmbConnectState := qrSmbConnectState
		if qSmbConnectState != "" {

			if err := r.SetQueryParam("smb.connect_state", qSmbConnectState); err != nil {
				return err
			}
		}
	}

	if o.SmbOpenGroupID != nil {

		// query param smb.open_group_id
		var qrSmbOpenGroupID string

		if o.SmbOpenGroupID != nil {
			qrSmbOpenGroupID = *o.SmbOpenGroupID
		}
		qSmbOpenGroupID := qrSmbOpenGroupID
		if qSmbOpenGroupID != "" {

			if err := r.SetQueryParam("smb.open_group_id", qSmbOpenGroupID); err != nil {
				return err
			}
		}
	}

	if o.SmbOpenType != nil {

		// query param smb.open_type
		var qrSmbOpenType string

		if o.SmbOpenType != nil {
			qrSmbOpenType = *o.SmbOpenType
		}
		qSmbOpenType := qrSmbOpenType
		if qSmbOpenType != "" {

			if err := r.SetQueryParam("smb.open_type", qSmbOpenType); err != nil {
				return err
			}
		}
	}

	if o.State != nil {

		// query param state
		var qrState string

		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.SvmName != nil {

		// query param svm.name
		var qrSvmName string

		if o.SvmName != nil {
			qrSvmName = *o.SvmName
		}
		qSvmName := qrSvmName
		if qSvmName != "" {

			if err := r.SetQueryParam("svm.name", qSvmName); err != nil {
				return err
			}
		}
	}

	if o.SvmUUID != nil {

		// query param svm.uuid
		var qrSvmUUID string

		if o.SvmUUID != nil {
			qrSvmUUID = *o.SvmUUID
		}
		qSvmUUID := qrSvmUUID
		if qSvmUUID != "" {

			if err := r.SetQueryParam("svm.uuid", qSvmUUID); err != nil {
				return err
			}
		}
	}

	if o.Type != nil {

		// query param type
		var qrType string

		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if o.UUID != nil {

		// query param uuid
		var qrUUID string

		if o.UUID != nil {
			qrUUID = *o.UUID
		}
		qUUID := qrUUID
		if qUUID != "" {

			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}
	}

	if o.VolumeName != nil {

		// query param volume.name
		var qrVolumeName string

		if o.VolumeName != nil {
			qrVolumeName = *o.VolumeName
		}
		qVolumeName := qrVolumeName
		if qVolumeName != "" {

			if err := r.SetQueryParam("volume.name", qVolumeName); err != nil {
				return err
			}
		}
	}

	if o.VolumeUUID != nil {

		// query param volume.uuid
		var qrVolumeUUID string

		if o.VolumeUUID != nil {
			qrVolumeUUID = *o.VolumeUUID
		}
		qVolumeUUID := qrVolumeUUID
		if qVolumeUUID != "" {

			if err := r.SetQueryParam("volume.uuid", qVolumeUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
