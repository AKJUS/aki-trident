// Code generated by go-swagger; DO NOT EDIT.

package n_a_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewFpolicyPolicyDeleteCollectionParams creates a new FpolicyPolicyDeleteCollectionParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewFpolicyPolicyDeleteCollectionParams() *FpolicyPolicyDeleteCollectionParams {
	return &FpolicyPolicyDeleteCollectionParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewFpolicyPolicyDeleteCollectionParamsWithTimeout creates a new FpolicyPolicyDeleteCollectionParams object
// with the ability to set a timeout on a request.
func NewFpolicyPolicyDeleteCollectionParamsWithTimeout(timeout time.Duration) *FpolicyPolicyDeleteCollectionParams {
	return &FpolicyPolicyDeleteCollectionParams{
		timeout: timeout,
	}
}

// NewFpolicyPolicyDeleteCollectionParamsWithContext creates a new FpolicyPolicyDeleteCollectionParams object
// with the ability to set a context for a request.
func NewFpolicyPolicyDeleteCollectionParamsWithContext(ctx context.Context) *FpolicyPolicyDeleteCollectionParams {
	return &FpolicyPolicyDeleteCollectionParams{
		Context: ctx,
	}
}

// NewFpolicyPolicyDeleteCollectionParamsWithHTTPClient creates a new FpolicyPolicyDeleteCollectionParams object
// with the ability to set a custom HTTPClient for a request.
func NewFpolicyPolicyDeleteCollectionParamsWithHTTPClient(client *http.Client) *FpolicyPolicyDeleteCollectionParams {
	return &FpolicyPolicyDeleteCollectionParams{
		HTTPClient: client,
	}
}

/*
FpolicyPolicyDeleteCollectionParams contains all the parameters to send to the API endpoint

	for the fpolicy policy delete collection operation.

	Typically these are written to a http.Request.
*/
type FpolicyPolicyDeleteCollectionParams struct {

	/* AllowPrivilegedAccess.

	   Filter by allow_privileged_access
	*/
	AllowPrivilegedAccess *bool

	/* ContinueOnFailure.

	   Continue even when the operation fails on one of the records.
	*/
	ContinueOnFailure *bool

	/* Enabled.

	   Filter by enabled
	*/
	Enabled *bool

	/* EngineName.

	   Filter by engine.name
	*/
	EngineName *string

	/* EventsName.

	   Filter by events.name
	*/
	EventsName *string

	/* Info.

	   Info specification
	*/
	Info FpolicyPolicyDeleteCollectionBody

	/* Mandatory.

	   Filter by mandatory
	*/
	Mandatory *bool

	/* Name.

	   Filter by name
	*/
	Name *string

	/* PassthroughRead.

	   Filter by passthrough_read
	*/
	PassthroughRead *bool

	/* PersistentStore.

	   Filter by persistent_store
	*/
	PersistentStore *string

	/* Priority.

	   Filter by priority
	*/
	Priority *int64

	/* PrivilegedUser.

	   Filter by privileged_user
	*/
	PrivilegedUser *string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* ScopeCheckExtensionsOnDirectories.

	   Filter by scope.check_extensions_on_directories
	*/
	ScopeCheckExtensionsOnDirectories *bool

	/* ScopeExcludeExportPolicies.

	   Filter by scope.exclude_export_policies
	*/
	ScopeExcludeExportPolicies *string

	/* ScopeExcludeExtension.

	   Filter by scope.exclude_extension
	*/
	ScopeExcludeExtension *string

	/* ScopeExcludeShares.

	   Filter by scope.exclude_shares
	*/
	ScopeExcludeShares *string

	/* ScopeExcludeVolumes.

	   Filter by scope.exclude_volumes
	*/
	ScopeExcludeVolumes *string

	/* ScopeIncludeExportPolicies.

	   Filter by scope.include_export_policies
	*/
	ScopeIncludeExportPolicies *string

	/* ScopeIncludeExtension.

	   Filter by scope.include_extension
	*/
	ScopeIncludeExtension *string

	/* ScopeIncludeShares.

	   Filter by scope.include_shares
	*/
	ScopeIncludeShares *string

	/* ScopeIncludeVolumes.

	   Filter by scope.include_volumes
	*/
	ScopeIncludeVolumes *string

	/* ScopeObjectMonitoringWithNoExtension.

	   Filter by scope.object_monitoring_with_no_extension
	*/
	ScopeObjectMonitoringWithNoExtension *bool

	/* SerialRecords.

	   Perform the operation on the records synchronously.
	*/
	SerialRecords *bool

	/* SvmUUID.

	   UUID of the SVM to which this object belongs.
	*/
	SvmUUID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the fpolicy policy delete collection params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FpolicyPolicyDeleteCollectionParams) WithDefaults() *FpolicyPolicyDeleteCollectionParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the fpolicy policy delete collection params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FpolicyPolicyDeleteCollectionParams) SetDefaults() {
	var (
		continueOnFailureDefault = bool(false)

		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)

		serialRecordsDefault = bool(false)
	)

	val := FpolicyPolicyDeleteCollectionParams{
		ContinueOnFailure: &continueOnFailureDefault,
		ReturnRecords:     &returnRecordsDefault,
		ReturnTimeout:     &returnTimeoutDefault,
		SerialRecords:     &serialRecordsDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) WithTimeout(timeout time.Duration) *FpolicyPolicyDeleteCollectionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) WithContext(ctx context.Context) *FpolicyPolicyDeleteCollectionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) WithHTTPClient(client *http.Client) *FpolicyPolicyDeleteCollectionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAllowPrivilegedAccess adds the allowPrivilegedAccess to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) WithAllowPrivilegedAccess(allowPrivilegedAccess *bool) *FpolicyPolicyDeleteCollectionParams {
	o.SetAllowPrivilegedAccess(allowPrivilegedAccess)
	return o
}

// SetAllowPrivilegedAccess adds the allowPrivilegedAccess to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) SetAllowPrivilegedAccess(allowPrivilegedAccess *bool) {
	o.AllowPrivilegedAccess = allowPrivilegedAccess
}

// WithContinueOnFailure adds the continueOnFailure to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) WithContinueOnFailure(continueOnFailure *bool) *FpolicyPolicyDeleteCollectionParams {
	o.SetContinueOnFailure(continueOnFailure)
	return o
}

// SetContinueOnFailure adds the continueOnFailure to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) SetContinueOnFailure(continueOnFailure *bool) {
	o.ContinueOnFailure = continueOnFailure
}

// WithEnabled adds the enabled to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) WithEnabled(enabled *bool) *FpolicyPolicyDeleteCollectionParams {
	o.SetEnabled(enabled)
	return o
}

// SetEnabled adds the enabled to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) SetEnabled(enabled *bool) {
	o.Enabled = enabled
}

// WithEngineName adds the engineName to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) WithEngineName(engineName *string) *FpolicyPolicyDeleteCollectionParams {
	o.SetEngineName(engineName)
	return o
}

// SetEngineName adds the engineName to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) SetEngineName(engineName *string) {
	o.EngineName = engineName
}

// WithEventsName adds the eventsName to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) WithEventsName(eventsName *string) *FpolicyPolicyDeleteCollectionParams {
	o.SetEventsName(eventsName)
	return o
}

// SetEventsName adds the eventsName to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) SetEventsName(eventsName *string) {
	o.EventsName = eventsName
}

// WithInfo adds the info to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) WithInfo(info FpolicyPolicyDeleteCollectionBody) *FpolicyPolicyDeleteCollectionParams {
	o.SetInfo(info)
	return o
}

// SetInfo adds the info to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) SetInfo(info FpolicyPolicyDeleteCollectionBody) {
	o.Info = info
}

// WithMandatory adds the mandatory to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) WithMandatory(mandatory *bool) *FpolicyPolicyDeleteCollectionParams {
	o.SetMandatory(mandatory)
	return o
}

// SetMandatory adds the mandatory to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) SetMandatory(mandatory *bool) {
	o.Mandatory = mandatory
}

// WithName adds the name to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) WithName(name *string) *FpolicyPolicyDeleteCollectionParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) SetName(name *string) {
	o.Name = name
}

// WithPassthroughRead adds the passthroughRead to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) WithPassthroughRead(passthroughRead *bool) *FpolicyPolicyDeleteCollectionParams {
	o.SetPassthroughRead(passthroughRead)
	return o
}

// SetPassthroughRead adds the passthroughRead to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) SetPassthroughRead(passthroughRead *bool) {
	o.PassthroughRead = passthroughRead
}

// WithPersistentStore adds the persistentStore to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) WithPersistentStore(persistentStore *string) *FpolicyPolicyDeleteCollectionParams {
	o.SetPersistentStore(persistentStore)
	return o
}

// SetPersistentStore adds the persistentStore to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) SetPersistentStore(persistentStore *string) {
	o.PersistentStore = persistentStore
}

// WithPriority adds the priority to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) WithPriority(priority *int64) *FpolicyPolicyDeleteCollectionParams {
	o.SetPriority(priority)
	return o
}

// SetPriority adds the priority to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) SetPriority(priority *int64) {
	o.Priority = priority
}

// WithPrivilegedUser adds the privilegedUser to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) WithPrivilegedUser(privilegedUser *string) *FpolicyPolicyDeleteCollectionParams {
	o.SetPrivilegedUser(privilegedUser)
	return o
}

// SetPrivilegedUser adds the privilegedUser to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) SetPrivilegedUser(privilegedUser *string) {
	o.PrivilegedUser = privilegedUser
}

// WithReturnRecords adds the returnRecords to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) WithReturnRecords(returnRecords *bool) *FpolicyPolicyDeleteCollectionParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) WithReturnTimeout(returnTimeout *int64) *FpolicyPolicyDeleteCollectionParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithScopeCheckExtensionsOnDirectories adds the scopeCheckExtensionsOnDirectories to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) WithScopeCheckExtensionsOnDirectories(scopeCheckExtensionsOnDirectories *bool) *FpolicyPolicyDeleteCollectionParams {
	o.SetScopeCheckExtensionsOnDirectories(scopeCheckExtensionsOnDirectories)
	return o
}

// SetScopeCheckExtensionsOnDirectories adds the scopeCheckExtensionsOnDirectories to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) SetScopeCheckExtensionsOnDirectories(scopeCheckExtensionsOnDirectories *bool) {
	o.ScopeCheckExtensionsOnDirectories = scopeCheckExtensionsOnDirectories
}

// WithScopeExcludeExportPolicies adds the scopeExcludeExportPolicies to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) WithScopeExcludeExportPolicies(scopeExcludeExportPolicies *string) *FpolicyPolicyDeleteCollectionParams {
	o.SetScopeExcludeExportPolicies(scopeExcludeExportPolicies)
	return o
}

// SetScopeExcludeExportPolicies adds the scopeExcludeExportPolicies to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) SetScopeExcludeExportPolicies(scopeExcludeExportPolicies *string) {
	o.ScopeExcludeExportPolicies = scopeExcludeExportPolicies
}

// WithScopeExcludeExtension adds the scopeExcludeExtension to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) WithScopeExcludeExtension(scopeExcludeExtension *string) *FpolicyPolicyDeleteCollectionParams {
	o.SetScopeExcludeExtension(scopeExcludeExtension)
	return o
}

// SetScopeExcludeExtension adds the scopeExcludeExtension to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) SetScopeExcludeExtension(scopeExcludeExtension *string) {
	o.ScopeExcludeExtension = scopeExcludeExtension
}

// WithScopeExcludeShares adds the scopeExcludeShares to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) WithScopeExcludeShares(scopeExcludeShares *string) *FpolicyPolicyDeleteCollectionParams {
	o.SetScopeExcludeShares(scopeExcludeShares)
	return o
}

// SetScopeExcludeShares adds the scopeExcludeShares to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) SetScopeExcludeShares(scopeExcludeShares *string) {
	o.ScopeExcludeShares = scopeExcludeShares
}

// WithScopeExcludeVolumes adds the scopeExcludeVolumes to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) WithScopeExcludeVolumes(scopeExcludeVolumes *string) *FpolicyPolicyDeleteCollectionParams {
	o.SetScopeExcludeVolumes(scopeExcludeVolumes)
	return o
}

// SetScopeExcludeVolumes adds the scopeExcludeVolumes to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) SetScopeExcludeVolumes(scopeExcludeVolumes *string) {
	o.ScopeExcludeVolumes = scopeExcludeVolumes
}

// WithScopeIncludeExportPolicies adds the scopeIncludeExportPolicies to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) WithScopeIncludeExportPolicies(scopeIncludeExportPolicies *string) *FpolicyPolicyDeleteCollectionParams {
	o.SetScopeIncludeExportPolicies(scopeIncludeExportPolicies)
	return o
}

// SetScopeIncludeExportPolicies adds the scopeIncludeExportPolicies to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) SetScopeIncludeExportPolicies(scopeIncludeExportPolicies *string) {
	o.ScopeIncludeExportPolicies = scopeIncludeExportPolicies
}

// WithScopeIncludeExtension adds the scopeIncludeExtension to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) WithScopeIncludeExtension(scopeIncludeExtension *string) *FpolicyPolicyDeleteCollectionParams {
	o.SetScopeIncludeExtension(scopeIncludeExtension)
	return o
}

// SetScopeIncludeExtension adds the scopeIncludeExtension to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) SetScopeIncludeExtension(scopeIncludeExtension *string) {
	o.ScopeIncludeExtension = scopeIncludeExtension
}

// WithScopeIncludeShares adds the scopeIncludeShares to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) WithScopeIncludeShares(scopeIncludeShares *string) *FpolicyPolicyDeleteCollectionParams {
	o.SetScopeIncludeShares(scopeIncludeShares)
	return o
}

// SetScopeIncludeShares adds the scopeIncludeShares to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) SetScopeIncludeShares(scopeIncludeShares *string) {
	o.ScopeIncludeShares = scopeIncludeShares
}

// WithScopeIncludeVolumes adds the scopeIncludeVolumes to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) WithScopeIncludeVolumes(scopeIncludeVolumes *string) *FpolicyPolicyDeleteCollectionParams {
	o.SetScopeIncludeVolumes(scopeIncludeVolumes)
	return o
}

// SetScopeIncludeVolumes adds the scopeIncludeVolumes to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) SetScopeIncludeVolumes(scopeIncludeVolumes *string) {
	o.ScopeIncludeVolumes = scopeIncludeVolumes
}

// WithScopeObjectMonitoringWithNoExtension adds the scopeObjectMonitoringWithNoExtension to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) WithScopeObjectMonitoringWithNoExtension(scopeObjectMonitoringWithNoExtension *bool) *FpolicyPolicyDeleteCollectionParams {
	o.SetScopeObjectMonitoringWithNoExtension(scopeObjectMonitoringWithNoExtension)
	return o
}

// SetScopeObjectMonitoringWithNoExtension adds the scopeObjectMonitoringWithNoExtension to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) SetScopeObjectMonitoringWithNoExtension(scopeObjectMonitoringWithNoExtension *bool) {
	o.ScopeObjectMonitoringWithNoExtension = scopeObjectMonitoringWithNoExtension
}

// WithSerialRecords adds the serialRecords to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) WithSerialRecords(serialRecords *bool) *FpolicyPolicyDeleteCollectionParams {
	o.SetSerialRecords(serialRecords)
	return o
}

// SetSerialRecords adds the serialRecords to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) SetSerialRecords(serialRecords *bool) {
	o.SerialRecords = serialRecords
}

// WithSvmUUID adds the svmUUID to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) WithSvmUUID(svmUUID string) *FpolicyPolicyDeleteCollectionParams {
	o.SetSvmUUID(svmUUID)
	return o
}

// SetSvmUUID adds the svmUuid to the fpolicy policy delete collection params
func (o *FpolicyPolicyDeleteCollectionParams) SetSvmUUID(svmUUID string) {
	o.SvmUUID = svmUUID
}

// WriteToRequest writes these params to a swagger request
func (o *FpolicyPolicyDeleteCollectionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AllowPrivilegedAccess != nil {

		// query param allow_privileged_access
		var qrAllowPrivilegedAccess bool

		if o.AllowPrivilegedAccess != nil {
			qrAllowPrivilegedAccess = *o.AllowPrivilegedAccess
		}
		qAllowPrivilegedAccess := swag.FormatBool(qrAllowPrivilegedAccess)
		if qAllowPrivilegedAccess != "" {

			if err := r.SetQueryParam("allow_privileged_access", qAllowPrivilegedAccess); err != nil {
				return err
			}
		}
	}

	if o.ContinueOnFailure != nil {

		// query param continue_on_failure
		var qrContinueOnFailure bool

		if o.ContinueOnFailure != nil {
			qrContinueOnFailure = *o.ContinueOnFailure
		}
		qContinueOnFailure := swag.FormatBool(qrContinueOnFailure)
		if qContinueOnFailure != "" {

			if err := r.SetQueryParam("continue_on_failure", qContinueOnFailure); err != nil {
				return err
			}
		}
	}

	if o.Enabled != nil {

		// query param enabled
		var qrEnabled bool

		if o.Enabled != nil {
			qrEnabled = *o.Enabled
		}
		qEnabled := swag.FormatBool(qrEnabled)
		if qEnabled != "" {

			if err := r.SetQueryParam("enabled", qEnabled); err != nil {
				return err
			}
		}
	}

	if o.EngineName != nil {

		// query param engine.name
		var qrEngineName string

		if o.EngineName != nil {
			qrEngineName = *o.EngineName
		}
		qEngineName := qrEngineName
		if qEngineName != "" {

			if err := r.SetQueryParam("engine.name", qEngineName); err != nil {
				return err
			}
		}
	}

	if o.EventsName != nil {

		// query param events.name
		var qrEventsName string

		if o.EventsName != nil {
			qrEventsName = *o.EventsName
		}
		qEventsName := qrEventsName
		if qEventsName != "" {

			if err := r.SetQueryParam("events.name", qEventsName); err != nil {
				return err
			}
		}
	}
	if err := r.SetBodyParam(o.Info); err != nil {
		return err
	}

	if o.Mandatory != nil {

		// query param mandatory
		var qrMandatory bool

		if o.Mandatory != nil {
			qrMandatory = *o.Mandatory
		}
		qMandatory := swag.FormatBool(qrMandatory)
		if qMandatory != "" {

			if err := r.SetQueryParam("mandatory", qMandatory); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.PassthroughRead != nil {

		// query param passthrough_read
		var qrPassthroughRead bool

		if o.PassthroughRead != nil {
			qrPassthroughRead = *o.PassthroughRead
		}
		qPassthroughRead := swag.FormatBool(qrPassthroughRead)
		if qPassthroughRead != "" {

			if err := r.SetQueryParam("passthrough_read", qPassthroughRead); err != nil {
				return err
			}
		}
	}

	if o.PersistentStore != nil {

		// query param persistent_store
		var qrPersistentStore string

		if o.PersistentStore != nil {
			qrPersistentStore = *o.PersistentStore
		}
		qPersistentStore := qrPersistentStore
		if qPersistentStore != "" {

			if err := r.SetQueryParam("persistent_store", qPersistentStore); err != nil {
				return err
			}
		}
	}

	if o.Priority != nil {

		// query param priority
		var qrPriority int64

		if o.Priority != nil {
			qrPriority = *o.Priority
		}
		qPriority := swag.FormatInt64(qrPriority)
		if qPriority != "" {

			if err := r.SetQueryParam("priority", qPriority); err != nil {
				return err
			}
		}
	}

	if o.PrivilegedUser != nil {

		// query param privileged_user
		var qrPrivilegedUser string

		if o.PrivilegedUser != nil {
			qrPrivilegedUser = *o.PrivilegedUser
		}
		qPrivilegedUser := qrPrivilegedUser
		if qPrivilegedUser != "" {

			if err := r.SetQueryParam("privileged_user", qPrivilegedUser); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.ScopeCheckExtensionsOnDirectories != nil {

		// query param scope.check_extensions_on_directories
		var qrScopeCheckExtensionsOnDirectories bool

		if o.ScopeCheckExtensionsOnDirectories != nil {
			qrScopeCheckExtensionsOnDirectories = *o.ScopeCheckExtensionsOnDirectories
		}
		qScopeCheckExtensionsOnDirectories := swag.FormatBool(qrScopeCheckExtensionsOnDirectories)
		if qScopeCheckExtensionsOnDirectories != "" {

			if err := r.SetQueryParam("scope.check_extensions_on_directories", qScopeCheckExtensionsOnDirectories); err != nil {
				return err
			}
		}
	}

	if o.ScopeExcludeExportPolicies != nil {

		// query param scope.exclude_export_policies
		var qrScopeExcludeExportPolicies string

		if o.ScopeExcludeExportPolicies != nil {
			qrScopeExcludeExportPolicies = *o.ScopeExcludeExportPolicies
		}
		qScopeExcludeExportPolicies := qrScopeExcludeExportPolicies
		if qScopeExcludeExportPolicies != "" {

			if err := r.SetQueryParam("scope.exclude_export_policies", qScopeExcludeExportPolicies); err != nil {
				return err
			}
		}
	}

	if o.ScopeExcludeExtension != nil {

		// query param scope.exclude_extension
		var qrScopeExcludeExtension string

		if o.ScopeExcludeExtension != nil {
			qrScopeExcludeExtension = *o.ScopeExcludeExtension
		}
		qScopeExcludeExtension := qrScopeExcludeExtension
		if qScopeExcludeExtension != "" {

			if err := r.SetQueryParam("scope.exclude_extension", qScopeExcludeExtension); err != nil {
				return err
			}
		}
	}

	if o.ScopeExcludeShares != nil {

		// query param scope.exclude_shares
		var qrScopeExcludeShares string

		if o.ScopeExcludeShares != nil {
			qrScopeExcludeShares = *o.ScopeExcludeShares
		}
		qScopeExcludeShares := qrScopeExcludeShares
		if qScopeExcludeShares != "" {

			if err := r.SetQueryParam("scope.exclude_shares", qScopeExcludeShares); err != nil {
				return err
			}
		}
	}

	if o.ScopeExcludeVolumes != nil {

		// query param scope.exclude_volumes
		var qrScopeExcludeVolumes string

		if o.ScopeExcludeVolumes != nil {
			qrScopeExcludeVolumes = *o.ScopeExcludeVolumes
		}
		qScopeExcludeVolumes := qrScopeExcludeVolumes
		if qScopeExcludeVolumes != "" {

			if err := r.SetQueryParam("scope.exclude_volumes", qScopeExcludeVolumes); err != nil {
				return err
			}
		}
	}

	if o.ScopeIncludeExportPolicies != nil {

		// query param scope.include_export_policies
		var qrScopeIncludeExportPolicies string

		if o.ScopeIncludeExportPolicies != nil {
			qrScopeIncludeExportPolicies = *o.ScopeIncludeExportPolicies
		}
		qScopeIncludeExportPolicies := qrScopeIncludeExportPolicies
		if qScopeIncludeExportPolicies != "" {

			if err := r.SetQueryParam("scope.include_export_policies", qScopeIncludeExportPolicies); err != nil {
				return err
			}
		}
	}

	if o.ScopeIncludeExtension != nil {

		// query param scope.include_extension
		var qrScopeIncludeExtension string

		if o.ScopeIncludeExtension != nil {
			qrScopeIncludeExtension = *o.ScopeIncludeExtension
		}
		qScopeIncludeExtension := qrScopeIncludeExtension
		if qScopeIncludeExtension != "" {

			if err := r.SetQueryParam("scope.include_extension", qScopeIncludeExtension); err != nil {
				return err
			}
		}
	}

	if o.ScopeIncludeShares != nil {

		// query param scope.include_shares
		var qrScopeIncludeShares string

		if o.ScopeIncludeShares != nil {
			qrScopeIncludeShares = *o.ScopeIncludeShares
		}
		qScopeIncludeShares := qrScopeIncludeShares
		if qScopeIncludeShares != "" {

			if err := r.SetQueryParam("scope.include_shares", qScopeIncludeShares); err != nil {
				return err
			}
		}
	}

	if o.ScopeIncludeVolumes != nil {

		// query param scope.include_volumes
		var qrScopeIncludeVolumes string

		if o.ScopeIncludeVolumes != nil {
			qrScopeIncludeVolumes = *o.ScopeIncludeVolumes
		}
		qScopeIncludeVolumes := qrScopeIncludeVolumes
		if qScopeIncludeVolumes != "" {

			if err := r.SetQueryParam("scope.include_volumes", qScopeIncludeVolumes); err != nil {
				return err
			}
		}
	}

	if o.ScopeObjectMonitoringWithNoExtension != nil {

		// query param scope.object_monitoring_with_no_extension
		var qrScopeObjectMonitoringWithNoExtension bool

		if o.ScopeObjectMonitoringWithNoExtension != nil {
			qrScopeObjectMonitoringWithNoExtension = *o.ScopeObjectMonitoringWithNoExtension
		}
		qScopeObjectMonitoringWithNoExtension := swag.FormatBool(qrScopeObjectMonitoringWithNoExtension)
		if qScopeObjectMonitoringWithNoExtension != "" {

			if err := r.SetQueryParam("scope.object_monitoring_with_no_extension", qScopeObjectMonitoringWithNoExtension); err != nil {
				return err
			}
		}
	}

	if o.SerialRecords != nil {

		// query param serial_records
		var qrSerialRecords bool

		if o.SerialRecords != nil {
			qrSerialRecords = *o.SerialRecords
		}
		qSerialRecords := swag.FormatBool(qrSerialRecords)
		if qSerialRecords != "" {

			if err := r.SetQueryParam("serial_records", qSerialRecords); err != nil {
				return err
			}
		}
	}

	// path param svm.uuid
	if err := r.SetPathParam("svm.uuid", o.SvmUUID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
