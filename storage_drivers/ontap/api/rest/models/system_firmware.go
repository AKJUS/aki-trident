// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SystemFirmware system firmware
//
// swagger:model system_firmware
type SystemFirmware struct {

	// BIOS version that is currently staged on the boot media of the node.
	// Example: 13.16
	BootMediaBiosVersion *string `json:"boot_media_bios_version,omitempty"`

	// LOADER version that is currently staged on the boot media of the node.
	// Example: 8.2.0
	BootMediaLoaderVersion *string `json:"boot_media_loader_version,omitempty"`

	// Flag that indicates if the system firmware install is pending. A true value suggests that a node reboot or cluster upgrade is required for completing installation.
	// Example: false
	InstallPending *bool `json:"install_pending,omitempty"`

	// BIOS version that is currently installed on the node.
	// Example: 13.16
	RunningBiosVersion *string `json:"running_bios_version,omitempty"`

	// LOADER version that is currently installed on the node.
	// Example: 8.2.0
	RunningLoaderVersion *string `json:"running_loader_version,omitempty"`
}

// Validate validates this system firmware
func (m *SystemFirmware) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this system firmware based on context it is used
func (m *SystemFirmware) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SystemFirmware) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SystemFirmware) UnmarshalBinary(b []byte) error {
	var res SystemFirmware
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
