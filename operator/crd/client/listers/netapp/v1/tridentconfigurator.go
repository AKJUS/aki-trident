// Copyright 2024 NetApp, Inc. All Rights Reserved.

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	v1 "github.com/netapp/trident/operator/crd/apis/netapp/v1"
)

// TridentConfiguratorLister helps list TridentConfigurators.
type TridentConfiguratorLister interface {
	// List lists all TridentConfigurators in the indexer.
	List(selector labels.Selector) (ret []*v1.TridentConfigurator, err error)
	// Get retrieves the TridentConfigurator from the index for a given name.
	Get(name string) (*v1.TridentConfigurator, error)
	TridentConfiguratorListerExpansion
}

// tridentConfiguratorLister implements the TridentConfiguratorLister interface.
type tridentConfiguratorLister struct {
	indexer cache.Indexer
}

// NewTridentConfiguratorLister returns a new TridentConfiguratorLister.
func NewTridentConfiguratorLister(indexer cache.Indexer) TridentConfiguratorLister {
	return &tridentConfiguratorLister{indexer: indexer}
}

// List lists all TridentConfigurators in the indexer.
func (s *tridentConfiguratorLister) List(selector labels.Selector) (ret []*v1.TridentConfigurator, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.TridentConfigurator))
	})
	return ret, err
}

// Get retrieves the TridentConfigurator from the index for a given name.
func (s *tridentConfiguratorLister) Get(name string) (*v1.TridentConfigurator, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("tridentconfigurator"), name)
	}
	return obj.(*v1.TridentConfigurator), nil
}
