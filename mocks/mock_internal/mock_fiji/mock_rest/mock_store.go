// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/internal/fiji/rest (interfaces: FaultStore)

// Package mock_rest is a generated GoMock package.
package mock_rest

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	store "github.com/netapp/trident/internal/fiji/store"
)

// MockFaultStore is a mock of FaultStore interface.
type MockFaultStore struct {
	ctrl     *gomock.Controller
	recorder *MockFaultStoreMockRecorder
}

// MockFaultStoreMockRecorder is the mock recorder for MockFaultStore.
type MockFaultStoreMockRecorder struct {
	mock *MockFaultStore
}

// NewMockFaultStore creates a new mock instance.
func NewMockFaultStore(ctrl *gomock.Controller) *MockFaultStore {
	mock := &MockFaultStore{ctrl: ctrl}
	mock.recorder = &MockFaultStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFaultStore) EXPECT() *MockFaultStoreMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockFaultStore) Add(arg0 string, arg1 store.Fault) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", arg0, arg1)
}

// Add indicates an expected call of Add.
func (mr *MockFaultStoreMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockFaultStore)(nil).Add), arg0, arg1)
}

// Exists mocks base method.
func (m *MockFaultStore) Exists(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockFaultStoreMockRecorder) Exists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockFaultStore)(nil).Exists), arg0)
}

// Get mocks base method.
func (m *MockFaultStore) Get(arg0 string) (store.Fault, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(store.Fault)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockFaultStoreMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFaultStore)(nil).Get), arg0)
}

// List mocks base method.
func (m *MockFaultStore) List() []store.Fault {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]store.Fault)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockFaultStoreMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockFaultStore)(nil).List))
}

// Reset mocks base method.
func (m *MockFaultStore) Reset(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockFaultStoreMockRecorder) Reset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockFaultStore)(nil).Reset), arg0)
}

// Set mocks base method.
func (m *MockFaultStore) Set(arg0 string, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockFaultStoreMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockFaultStore)(nil).Set), arg0, arg1)
}
