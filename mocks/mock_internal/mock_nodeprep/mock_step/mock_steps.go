// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/internal/nodeprep/step (interfaces: Step)
//
// Generated by this command:
//
//	mockgen -destination=../../../mocks/mock_internal/mock_nodeprep/mock_step/mock_steps.go github.com/netapp/trident/internal/nodeprep/step Step
//

// Package mock_step is a generated GoMock package.
package mock_step

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStep is a mock of Step interface.
type MockStep struct {
	ctrl     *gomock.Controller
	recorder *MockStepMockRecorder
	isgomock struct{}
}

// MockStepMockRecorder is the mock recorder for MockStep.
type MockStepMockRecorder struct {
	mock *MockStep
}

// NewMockStep creates a new mock instance.
func NewMockStep(ctrl *gomock.Controller) *MockStep {
	mock := &MockStep{ctrl: ctrl}
	mock.recorder = &MockStepMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStep) EXPECT() *MockStepMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockStep) Apply(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockStepMockRecorder) Apply(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockStep)(nil).Apply), ctx)
}

// GetName mocks base method.
func (m *MockStep) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockStepMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockStep)(nil).GetName))
}

// IsRequired mocks base method.
func (m *MockStep) IsRequired() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRequired")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRequired indicates an expected call of IsRequired.
func (mr *MockStepMockRecorder) IsRequired() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRequired", reflect.TypeOf((*MockStep)(nil).IsRequired))
}
