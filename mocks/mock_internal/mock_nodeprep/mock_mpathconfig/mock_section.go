// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/internal/nodeprep/mpathconfig (interfaces: MpathConfigurationSection)
//
// Generated by this command:
//
//	mockgen -destination=../../../mocks/mock_internal/mock_nodeprep/mock_mpathconfig/mock_section.go github.com/netapp/trident/internal/nodeprep/mpathconfig MpathConfigurationSection
//

// Package mock_mpathconfig is a generated GoMock package.
package mock_mpathconfig

import (
	reflect "reflect"

	mpathconfig "github.com/netapp/trident/internal/nodeprep/mpathconfig"
	gomock "go.uber.org/mock/gomock"
)

// MockMpathConfigurationSection is a mock of MpathConfigurationSection interface.
type MockMpathConfigurationSection struct {
	ctrl     *gomock.Controller
	recorder *MockMpathConfigurationSectionMockRecorder
}

// MockMpathConfigurationSectionMockRecorder is the mock recorder for MockMpathConfigurationSection.
type MockMpathConfigurationSectionMockRecorder struct {
	mock *MockMpathConfigurationSection
}

// NewMockMpathConfigurationSection creates a new mock instance.
func NewMockMpathConfigurationSection(ctrl *gomock.Controller) *MockMpathConfigurationSection {
	mock := &MockMpathConfigurationSection{ctrl: ctrl}
	mock.recorder = &MockMpathConfigurationSectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMpathConfigurationSection) EXPECT() *MockMpathConfigurationSectionMockRecorder {
	return m.recorder
}

// AddSection mocks base method.
func (m *MockMpathConfigurationSection) AddSection(arg0 string) (mpathconfig.MpathConfigurationSection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSection", arg0)
	ret0, _ := ret[0].(mpathconfig.MpathConfigurationSection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSection indicates an expected call of AddSection.
func (mr *MockMpathConfigurationSectionMockRecorder) AddSection(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSection", reflect.TypeOf((*MockMpathConfigurationSection)(nil).AddSection), arg0)
}

// GetDeviceSection mocks base method.
func (m *MockMpathConfigurationSection) GetDeviceSection(arg0, arg1, arg2 string) (mpathconfig.MpathConfigurationSection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceSection", arg0, arg1, arg2)
	ret0, _ := ret[0].(mpathconfig.MpathConfigurationSection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceSection indicates an expected call of GetDeviceSection.
func (mr *MockMpathConfigurationSectionMockRecorder) GetDeviceSection(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceSection", reflect.TypeOf((*MockMpathConfigurationSection)(nil).GetDeviceSection), arg0, arg1, arg2)
}

// GetProperty mocks base method.
func (m *MockMpathConfigurationSection) GetProperty(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProperty", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProperty indicates an expected call of GetProperty.
func (mr *MockMpathConfigurationSectionMockRecorder) GetProperty(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProperty", reflect.TypeOf((*MockMpathConfigurationSection)(nil).GetProperty), arg0)
}

// HasProperty mocks base method.
func (m *MockMpathConfigurationSection) HasProperty(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasProperty", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasProperty indicates an expected call of HasProperty.
func (mr *MockMpathConfigurationSectionMockRecorder) HasProperty(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasProperty", reflect.TypeOf((*MockMpathConfigurationSection)(nil).HasProperty), arg0)
}

// SetProperty mocks base method.
func (m *MockMpathConfigurationSection) SetProperty(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProperty", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetProperty indicates an expected call of SetProperty.
func (mr *MockMpathConfigurationSectionMockRecorder) SetProperty(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProperty", reflect.TypeOf((*MockMpathConfigurationSection)(nil).SetProperty), arg0, arg1)
}
