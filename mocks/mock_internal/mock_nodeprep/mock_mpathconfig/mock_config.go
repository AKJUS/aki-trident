// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/internal/nodeprep/mpathconfig (interfaces: MpathConfiguration)
//
// Generated by this command:
//
//	mockgen -destination=../../../mocks/mock_internal/mock_nodeprep/mock_mpathconfig/mock_config.go github.com/netapp/trident/internal/nodeprep/mpathconfig MpathConfiguration
//

// Package mock_mpathconfig is a generated GoMock package.
package mock_mpathconfig

import (
	reflect "reflect"

	mpathconfig "github.com/netapp/trident/internal/nodeprep/mpathconfig"
	gomock "go.uber.org/mock/gomock"
)

// MockMpathConfiguration is a mock of MpathConfiguration interface.
type MockMpathConfiguration struct {
	ctrl     *gomock.Controller
	recorder *MockMpathConfigurationMockRecorder
	isgomock struct{}
}

// MockMpathConfigurationMockRecorder is the mock recorder for MockMpathConfiguration.
type MockMpathConfigurationMockRecorder struct {
	mock *MockMpathConfiguration
}

// NewMockMpathConfiguration creates a new mock instance.
func NewMockMpathConfiguration(ctrl *gomock.Controller) *MockMpathConfiguration {
	mock := &MockMpathConfiguration{ctrl: ctrl}
	mock.recorder = &MockMpathConfigurationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMpathConfiguration) EXPECT() *MockMpathConfigurationMockRecorder {
	return m.recorder
}

// GetRootSection mocks base method.
func (m *MockMpathConfiguration) GetRootSection() mpathconfig.MpathConfigurationSection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRootSection")
	ret0, _ := ret[0].(mpathconfig.MpathConfigurationSection)
	return ret0
}

// GetRootSection indicates an expected call of GetRootSection.
func (mr *MockMpathConfigurationMockRecorder) GetRootSection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootSection", reflect.TypeOf((*MockMpathConfiguration)(nil).GetRootSection))
}

// GetSection mocks base method.
func (m *MockMpathConfiguration) GetSection(sectionName string) (mpathconfig.MpathConfigurationSection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSection", sectionName)
	ret0, _ := ret[0].(mpathconfig.MpathConfigurationSection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSection indicates an expected call of GetSection.
func (mr *MockMpathConfigurationMockRecorder) GetSection(sectionName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSection", reflect.TypeOf((*MockMpathConfiguration)(nil).GetSection), sectionName)
}

// PrintConf mocks base method.
func (m *MockMpathConfiguration) PrintConf() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrintConf")
	ret0, _ := ret[0].([]string)
	return ret0
}

// PrintConf indicates an expected call of PrintConf.
func (mr *MockMpathConfigurationMockRecorder) PrintConf() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintConf", reflect.TypeOf((*MockMpathConfiguration)(nil).PrintConf))
}

// SaveConfig mocks base method.
func (m *MockMpathConfiguration) SaveConfig(filePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveConfig", filePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveConfig indicates an expected call of SaveConfig.
func (mr *MockMpathConfigurationMockRecorder) SaveConfig(filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveConfig", reflect.TypeOf((*MockMpathConfiguration)(nil).SaveConfig), filePath)
}
