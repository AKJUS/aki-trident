// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/internal/nodeprep/instruction (interfaces: Instructions)
//
// Generated by this command:
//
//	mockgen -destination=../../../mocks/mock_internal/mock_nodeprep/mock_instruction/mock_instruction.go github.com/netapp/trident/internal/nodeprep/instruction Instructions
//

// Package mock_instruction is a generated GoMock package.
package mock_instruction

import (
	context "context"
	reflect "reflect"

	step "github.com/netapp/trident/internal/nodeprep/step"
	gomock "go.uber.org/mock/gomock"
)

// MockInstructions is a mock of Instructions interface.
type MockInstructions struct {
	ctrl     *gomock.Controller
	recorder *MockInstructionsMockRecorder
	isgomock struct{}
}

// MockInstructionsMockRecorder is the mock recorder for MockInstructions.
type MockInstructionsMockRecorder struct {
	mock *MockInstructions
}

// NewMockInstructions creates a new mock instance.
func NewMockInstructions(ctrl *gomock.Controller) *MockInstructions {
	mock := &MockInstructions{ctrl: ctrl}
	mock.recorder = &MockInstructionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstructions) EXPECT() *MockInstructionsMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockInstructions) Apply(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockInstructionsMockRecorder) Apply(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockInstructions)(nil).Apply), ctx)
}

// GetName mocks base method.
func (m *MockInstructions) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockInstructionsMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockInstructions)(nil).GetName))
}

// GetSteps mocks base method.
func (m *MockInstructions) GetSteps() []step.Step {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSteps")
	ret0, _ := ret[0].([]step.Step)
	return ret0
}

// GetSteps indicates an expected call of GetSteps.
func (mr *MockInstructionsMockRecorder) GetSteps() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSteps", reflect.TypeOf((*MockInstructions)(nil).GetSteps))
}

// PostCheck mocks base method.
func (m *MockInstructions) PostCheck(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostCheck", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostCheck indicates an expected call of PostCheck.
func (mr *MockInstructionsMockRecorder) PostCheck(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostCheck", reflect.TypeOf((*MockInstructions)(nil).PostCheck), ctx)
}

// PreCheck mocks base method.
func (m *MockInstructions) PreCheck(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreCheck", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PreCheck indicates an expected call of PreCheck.
func (mr *MockInstructionsMockRecorder) PreCheck(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreCheck", reflect.TypeOf((*MockInstructions)(nil).PreCheck), ctx)
}
