// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/internal/nodeprep/systemmanager (interfaces: SystemManager)
//
// Generated by this command:
//
//	mockgen -destination=../../../mocks/mock_internal/mock_nodeprep/mock_systemmanager/mock_systemmanager.go github.com/netapp/trident/internal/nodeprep/systemmanager SystemManager
//

// Package mock_systemmanager is a generated GoMock package.
package mock_systemmanager

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSystemManager is a mock of SystemManager interface.
type MockSystemManager struct {
	ctrl     *gomock.Controller
	recorder *MockSystemManagerMockRecorder
}

// MockSystemManagerMockRecorder is the mock recorder for MockSystemManager.
type MockSystemManagerMockRecorder struct {
	mock *MockSystemManager
}

// NewMockSystemManager creates a new mock instance.
func NewMockSystemManager(ctrl *gomock.Controller) *MockSystemManager {
	mock := &MockSystemManager{ctrl: ctrl}
	mock.recorder = &MockSystemManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSystemManager) EXPECT() *MockSystemManagerMockRecorder {
	return m.recorder
}

// EnableIscsiServices mocks base method.
func (m *MockSystemManager) EnableIscsiServices(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableIscsiServices", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableIscsiServices indicates an expected call of EnableIscsiServices.
func (mr *MockSystemManagerMockRecorder) EnableIscsiServices(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableIscsiServices", reflect.TypeOf((*MockSystemManager)(nil).EnableIscsiServices), arg0)
}
