// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/frontend/csi/controller_api (interfaces: TridentController)
//
// Generated by this command:
//
//	mockgen -destination=../../../mocks/mock_frontend/mock_csi/mock_controller_api/mock_controller_api.go github.com/netapp/trident/frontend/csi/controller_api TridentController
//

// Package mock_controllerAPI is a generated GoMock package.
package mock_controllerAPI

import (
	context "context"
	http "net/http"
	reflect "reflect"

	controllerAPI "github.com/netapp/trident/frontend/csi/controller_api"
	models "github.com/netapp/trident/utils/models"
	gomock "go.uber.org/mock/gomock"
)

// MockTridentController is a mock of TridentController interface.
type MockTridentController struct {
	ctrl     *gomock.Controller
	recorder *MockTridentControllerMockRecorder
	isgomock struct{}
}

// MockTridentControllerMockRecorder is the mock recorder for MockTridentController.
type MockTridentControllerMockRecorder struct {
	mock *MockTridentController
}

// NewMockTridentController creates a new mock instance.
func NewMockTridentController(ctrl *gomock.Controller) *MockTridentController {
	mock := &MockTridentController{ctrl: ctrl}
	mock.recorder = &MockTridentControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTridentController) EXPECT() *MockTridentControllerMockRecorder {
	return m.recorder
}

// CreateNode mocks base method.
func (m *MockTridentController) CreateNode(ctx context.Context, node *models.Node) (controllerAPI.CreateNodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNode", ctx, node)
	ret0, _ := ret[0].(controllerAPI.CreateNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNode indicates an expected call of CreateNode.
func (mr *MockTridentControllerMockRecorder) CreateNode(ctx, node any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNode", reflect.TypeOf((*MockTridentController)(nil).CreateNode), ctx, node)
}

// DeleteNode mocks base method.
func (m *MockTridentController) DeleteNode(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNode", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNode indicates an expected call of DeleteNode.
func (mr *MockTridentControllerMockRecorder) DeleteNode(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNode", reflect.TypeOf((*MockTridentController)(nil).DeleteNode), ctx, name)
}

// GetChap mocks base method.
func (m *MockTridentController) GetChap(ctx context.Context, volume, node string) (*models.IscsiChapInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChap", ctx, volume, node)
	ret0, _ := ret[0].(*models.IscsiChapInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChap indicates an expected call of GetChap.
func (mr *MockTridentControllerMockRecorder) GetChap(ctx, volume, node any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChap", reflect.TypeOf((*MockTridentController)(nil).GetChap), ctx, volume, node)
}

// GetNode mocks base method.
func (m *MockTridentController) GetNode(ctx context.Context, nodeName string) (*models.NodeExternal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode", ctx, nodeName)
	ret0, _ := ret[0].(*models.NodeExternal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNode indicates an expected call of GetNode.
func (mr *MockTridentControllerMockRecorder) GetNode(ctx, nodeName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockTridentController)(nil).GetNode), ctx, nodeName)
}

// GetNodes mocks base method.
func (m *MockTridentController) GetNodes(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodes", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodes indicates an expected call of GetNodes.
func (mr *MockTridentControllerMockRecorder) GetNodes(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodes", reflect.TypeOf((*MockTridentController)(nil).GetNodes), ctx)
}

// InvokeAPI mocks base method.
func (m *MockTridentController) InvokeAPI(ctx context.Context, requestBody []byte, method, resourcePath string, redactRequestBody, redactResponseBody bool) (*http.Response, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeAPI", ctx, requestBody, method, resourcePath, redactRequestBody, redactResponseBody)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// InvokeAPI indicates an expected call of InvokeAPI.
func (mr *MockTridentControllerMockRecorder) InvokeAPI(ctx, requestBody, method, resourcePath, redactRequestBody, redactResponseBody any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeAPI", reflect.TypeOf((*MockTridentController)(nil).InvokeAPI), ctx, requestBody, method, resourcePath, redactRequestBody, redactResponseBody)
}

// ListVolumePublicationsForNode mocks base method.
func (m *MockTridentController) ListVolumePublicationsForNode(ctx context.Context, nodeName string) ([]*models.VolumePublicationExternal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVolumePublicationsForNode", ctx, nodeName)
	ret0, _ := ret[0].([]*models.VolumePublicationExternal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVolumePublicationsForNode indicates an expected call of ListVolumePublicationsForNode.
func (mr *MockTridentControllerMockRecorder) ListVolumePublicationsForNode(ctx, nodeName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVolumePublicationsForNode", reflect.TypeOf((*MockTridentController)(nil).ListVolumePublicationsForNode), ctx, nodeName)
}

// UpdateNode mocks base method.
func (m *MockTridentController) UpdateNode(ctx context.Context, nodeName string, nodeState *models.NodePublicationStateFlags) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNode", ctx, nodeName, nodeState)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNode indicates an expected call of UpdateNode.
func (mr *MockTridentControllerMockRecorder) UpdateNode(ctx, nodeName, nodeState any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNode", reflect.TypeOf((*MockTridentController)(nil).UpdateNode), ctx, nodeName, nodeState)
}

// UpdateVolumeLUKSPassphraseNames mocks base method.
func (m *MockTridentController) UpdateVolumeLUKSPassphraseNames(ctx context.Context, volume string, passphraseNames []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVolumeLUKSPassphraseNames", ctx, volume, passphraseNames)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVolumeLUKSPassphraseNames indicates an expected call of UpdateVolumeLUKSPassphraseNames.
func (mr *MockTridentControllerMockRecorder) UpdateVolumeLUKSPassphraseNames(ctx, volume, passphraseNames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVolumeLUKSPassphraseNames", reflect.TypeOf((*MockTridentController)(nil).UpdateVolumeLUKSPassphraseNames), ctx, volume, passphraseNames)
}
