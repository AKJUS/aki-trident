// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/frontend/csi/controller_helpers (interfaces: ControllerHelper)
//
// Generated by this command:
//
//	mockgen -destination=../../../mocks/mock_frontend/mock_csi/mock_controller_helpers/mock_controller_helpers.go github.com/netapp/trident/frontend/csi/controller_helpers ControllerHelper
//

// Package mock_controllerhelpers is a generated GoMock package.
package mock_controllerhelpers

import (
	context "context"
	reflect "reflect"

	config "github.com/netapp/trident/config"
	controllerhelpers "github.com/netapp/trident/frontend/csi/controller_helpers"
	storage "github.com/netapp/trident/storage"
	models "github.com/netapp/trident/utils/models"
	gomock "go.uber.org/mock/gomock"
)

// MockControllerHelper is a mock of ControllerHelper interface.
type MockControllerHelper struct {
	ctrl     *gomock.Controller
	recorder *MockControllerHelperMockRecorder
	isgomock struct{}
}

// MockControllerHelperMockRecorder is the mock recorder for MockControllerHelper.
type MockControllerHelperMockRecorder struct {
	mock *MockControllerHelper
}

// NewMockControllerHelper creates a new mock instance.
func NewMockControllerHelper(ctrl *gomock.Controller) *MockControllerHelper {
	mock := &MockControllerHelper{ctrl: ctrl}
	mock.recorder = &MockControllerHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerHelper) EXPECT() *MockControllerHelperMockRecorder {
	return m.recorder
}

// GetGroupSnapshotConfigForCreate mocks base method.
func (m *MockControllerHelper) GetGroupSnapshotConfigForCreate(ctx context.Context, groupSnapshotName string, volumeNames []string) (*storage.GroupSnapshotConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupSnapshotConfigForCreate", ctx, groupSnapshotName, volumeNames)
	ret0, _ := ret[0].(*storage.GroupSnapshotConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupSnapshotConfigForCreate indicates an expected call of GetGroupSnapshotConfigForCreate.
func (mr *MockControllerHelperMockRecorder) GetGroupSnapshotConfigForCreate(ctx, groupSnapshotName, volumeNames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupSnapshotConfigForCreate", reflect.TypeOf((*MockControllerHelper)(nil).GetGroupSnapshotConfigForCreate), ctx, groupSnapshotName, volumeNames)
}

// GetNodePublicationState mocks base method.
func (m *MockControllerHelper) GetNodePublicationState(ctx context.Context, nodeName string) (*models.NodePublicationStateFlags, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodePublicationState", ctx, nodeName)
	ret0, _ := ret[0].(*models.NodePublicationStateFlags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodePublicationState indicates an expected call of GetNodePublicationState.
func (mr *MockControllerHelperMockRecorder) GetNodePublicationState(ctx, nodeName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodePublicationState", reflect.TypeOf((*MockControllerHelper)(nil).GetNodePublicationState), ctx, nodeName)
}

// GetNodeTopologyLabels mocks base method.
func (m *MockControllerHelper) GetNodeTopologyLabels(ctx context.Context, nodeName string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeTopologyLabels", ctx, nodeName)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeTopologyLabels indicates an expected call of GetNodeTopologyLabels.
func (mr *MockControllerHelperMockRecorder) GetNodeTopologyLabels(ctx, nodeName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeTopologyLabels", reflect.TypeOf((*MockControllerHelper)(nil).GetNodeTopologyLabels), ctx, nodeName)
}

// GetSnapshotConfigForCreate mocks base method.
func (m *MockControllerHelper) GetSnapshotConfigForCreate(volumeName, snapshotName string) (*storage.SnapshotConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotConfigForCreate", volumeName, snapshotName)
	ret0, _ := ret[0].(*storage.SnapshotConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotConfigForCreate indicates an expected call of GetSnapshotConfigForCreate.
func (mr *MockControllerHelperMockRecorder) GetSnapshotConfigForCreate(volumeName, snapshotName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotConfigForCreate", reflect.TypeOf((*MockControllerHelper)(nil).GetSnapshotConfigForCreate), volumeName, snapshotName)
}

// GetSnapshotConfigForImport mocks base method.
func (m *MockControllerHelper) GetSnapshotConfigForImport(ctx context.Context, volumeName, snapshotName string) (*storage.SnapshotConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotConfigForImport", ctx, volumeName, snapshotName)
	ret0, _ := ret[0].(*storage.SnapshotConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotConfigForImport indicates an expected call of GetSnapshotConfigForImport.
func (mr *MockControllerHelperMockRecorder) GetSnapshotConfigForImport(ctx, volumeName, snapshotName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotConfigForImport", reflect.TypeOf((*MockControllerHelper)(nil).GetSnapshotConfigForImport), ctx, volumeName, snapshotName)
}

// GetVolumeConfig mocks base method.
func (m *MockControllerHelper) GetVolumeConfig(ctx context.Context, name string, sizeBytes int64, parameters map[string]string, protocol config.Protocol, accessModes []config.AccessMode, volumeMode config.VolumeMode, fsType string, requisiteTopology, preferredTopology, accessibleTopology []map[string]string, secrets map[string]string) (*storage.VolumeConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeConfig", ctx, name, sizeBytes, parameters, protocol, accessModes, volumeMode, fsType, requisiteTopology, preferredTopology, accessibleTopology, secrets)
	ret0, _ := ret[0].(*storage.VolumeConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeConfig indicates an expected call of GetVolumeConfig.
func (mr *MockControllerHelperMockRecorder) GetVolumeConfig(ctx, name, sizeBytes, parameters, protocol, accessModes, volumeMode, fsType, requisiteTopology, preferredTopology, accessibleTopology, secrets any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeConfig", reflect.TypeOf((*MockControllerHelper)(nil).GetVolumeConfig), ctx, name, sizeBytes, parameters, protocol, accessModes, volumeMode, fsType, requisiteTopology, preferredTopology, accessibleTopology, secrets)
}

// IsTopologyInUse mocks base method.
func (m *MockControllerHelper) IsTopologyInUse(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTopologyInUse", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTopologyInUse indicates an expected call of IsTopologyInUse.
func (mr *MockControllerHelperMockRecorder) IsTopologyInUse(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTopologyInUse", reflect.TypeOf((*MockControllerHelper)(nil).IsTopologyInUse), ctx)
}

// IsValidResourceName mocks base method.
func (m *MockControllerHelper) IsValidResourceName(name string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidResourceName", name)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsValidResourceName indicates an expected call of IsValidResourceName.
func (mr *MockControllerHelperMockRecorder) IsValidResourceName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidResourceName", reflect.TypeOf((*MockControllerHelper)(nil).IsValidResourceName), name)
}

// RecordNodeEvent mocks base method.
func (m *MockControllerHelper) RecordNodeEvent(ctx context.Context, name, eventType, reason, message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordNodeEvent", ctx, name, eventType, reason, message)
}

// RecordNodeEvent indicates an expected call of RecordNodeEvent.
func (mr *MockControllerHelperMockRecorder) RecordNodeEvent(ctx, name, eventType, reason, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordNodeEvent", reflect.TypeOf((*MockControllerHelper)(nil).RecordNodeEvent), ctx, name, eventType, reason, message)
}

// RecordVolumeEvent mocks base method.
func (m *MockControllerHelper) RecordVolumeEvent(ctx context.Context, name, eventType, reason, message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordVolumeEvent", ctx, name, eventType, reason, message)
}

// RecordVolumeEvent indicates an expected call of RecordVolumeEvent.
func (mr *MockControllerHelperMockRecorder) RecordVolumeEvent(ctx, name, eventType, reason, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordVolumeEvent", reflect.TypeOf((*MockControllerHelper)(nil).RecordVolumeEvent), ctx, name, eventType, reason, message)
}

// SupportsFeature mocks base method.
func (m *MockControllerHelper) SupportsFeature(ctx context.Context, feature controllerhelpers.Feature) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsFeature", ctx, feature)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SupportsFeature indicates an expected call of SupportsFeature.
func (mr *MockControllerHelperMockRecorder) SupportsFeature(ctx, feature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsFeature", reflect.TypeOf((*MockControllerHelper)(nil).SupportsFeature), ctx, feature)
}

// Version mocks base method.
func (m *MockControllerHelper) Version() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(string)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockControllerHelperMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockControllerHelper)(nil).Version))
}
