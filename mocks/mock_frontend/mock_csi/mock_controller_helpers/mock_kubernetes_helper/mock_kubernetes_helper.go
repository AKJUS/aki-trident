// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/frontend/csi/controller_helpers/kubernetes (interfaces: K8SControllerHelperPlugin)
//
// Generated by this command:
//
//	mockgen -destination=../../../../mocks/mock_frontend/mock_csi/mock_controller_helpers/mock_kubernetes_helper/mock_kubernetes_helper.go github.com/netapp/trident/frontend/csi/controller_helpers/kubernetes K8SControllerHelperPlugin
//

// Package mock_kubernetes is a generated GoMock package.
package mock_kubernetes

import (
	context "context"
	reflect "reflect"

	storage "github.com/netapp/trident/storage"
	models "github.com/netapp/trident/utils/models"
	gomock "go.uber.org/mock/gomock"
)

// MockK8SControllerHelperPlugin is a mock of K8SControllerHelperPlugin interface.
type MockK8SControllerHelperPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockK8SControllerHelperPluginMockRecorder
	isgomock struct{}
}

// MockK8SControllerHelperPluginMockRecorder is the mock recorder for MockK8SControllerHelperPlugin.
type MockK8SControllerHelperPluginMockRecorder struct {
	mock *MockK8SControllerHelperPlugin
}

// NewMockK8SControllerHelperPlugin creates a new mock instance.
func NewMockK8SControllerHelperPlugin(ctrl *gomock.Controller) *MockK8SControllerHelperPlugin {
	mock := &MockK8SControllerHelperPlugin{ctrl: ctrl}
	mock.recorder = &MockK8SControllerHelperPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockK8SControllerHelperPlugin) EXPECT() *MockK8SControllerHelperPluginMockRecorder {
	return m.recorder
}

// Activate mocks base method.
func (m *MockK8SControllerHelperPlugin) Activate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Activate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Activate indicates an expected call of Activate.
func (mr *MockK8SControllerHelperPluginMockRecorder) Activate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Activate", reflect.TypeOf((*MockK8SControllerHelperPlugin)(nil).Activate))
}

// Deactivate mocks base method.
func (m *MockK8SControllerHelperPlugin) Deactivate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deactivate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Deactivate indicates an expected call of Deactivate.
func (mr *MockK8SControllerHelperPluginMockRecorder) Deactivate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deactivate", reflect.TypeOf((*MockK8SControllerHelperPlugin)(nil).Deactivate))
}

// GetName mocks base method.
func (m *MockK8SControllerHelperPlugin) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockK8SControllerHelperPluginMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockK8SControllerHelperPlugin)(nil).GetName))
}

// GetNodePublicationState mocks base method.
func (m *MockK8SControllerHelperPlugin) GetNodePublicationState(ctx context.Context, nodeName string) (*models.NodePublicationStateFlags, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodePublicationState", ctx, nodeName)
	ret0, _ := ret[0].(*models.NodePublicationStateFlags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodePublicationState indicates an expected call of GetNodePublicationState.
func (mr *MockK8SControllerHelperPluginMockRecorder) GetNodePublicationState(ctx, nodeName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodePublicationState", reflect.TypeOf((*MockK8SControllerHelperPlugin)(nil).GetNodePublicationState), ctx, nodeName)
}

// ImportVolume mocks base method.
func (m *MockK8SControllerHelperPlugin) ImportVolume(ctx context.Context, request *storage.ImportVolumeRequest) (*storage.VolumeExternal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportVolume", ctx, request)
	ret0, _ := ret[0].(*storage.VolumeExternal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportVolume indicates an expected call of ImportVolume.
func (mr *MockK8SControllerHelperPluginMockRecorder) ImportVolume(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportVolume", reflect.TypeOf((*MockK8SControllerHelperPlugin)(nil).ImportVolume), ctx, request)
}

// Version mocks base method.
func (m *MockK8SControllerHelperPlugin) Version() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(string)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockK8SControllerHelperPluginMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockK8SControllerHelperPlugin)(nil).Version))
}
