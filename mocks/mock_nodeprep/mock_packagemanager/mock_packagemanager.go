// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/internal/nodeprep/packagemanager (interfaces: PackageManager)

// Package mock_packagemanager is a generated GoMock package.
package mock_packagemanager

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPackageManager is a mock of PackageManager interface.
type MockPackageManager struct {
	ctrl     *gomock.Controller
	recorder *MockPackageManagerMockRecorder
}

// MockPackageManagerMockRecorder is the mock recorder for MockPackageManager.
type MockPackageManagerMockRecorder struct {
	mock *MockPackageManager
}

// NewMockPackageManager creates a new mock instance.
func NewMockPackageManager(ctrl *gomock.Controller) *MockPackageManager {
	mock := &MockPackageManager{ctrl: ctrl}
	mock.recorder = &MockPackageManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackageManager) EXPECT() *MockPackageManagerMockRecorder {
	return m.recorder
}

// MultipathToolsInstalled mocks base method.
func (m *MockPackageManager) MultipathToolsInstalled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultipathToolsInstalled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// MultipathToolsInstalled indicates an expected call of MultipathToolsInstalled.
func (mr *MockPackageManagerMockRecorder) MultipathToolsInstalled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultipathToolsInstalled", reflect.TypeOf((*MockPackageManager)(nil).MultipathToolsInstalled))
}
