// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/utils/devices/luks (interfaces: Device)
//
// Generated by this command:
//
//	mockgen -destination=../../../mocks/mock_utils/mock_devices/mock_luks/mock_luks.go -package mock_luks github.com/netapp/trident/utils/devices/luks Device
//

// Package mock_luks is a generated GoMock package.
package mock_luks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDevice is a mock of Device interface.
type MockDevice struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceMockRecorder
}

// MockDeviceMockRecorder is the mock recorder for MockDevice.
type MockDeviceMockRecorder struct {
	mock *MockDevice
}

// NewMockDevice creates a new mock instance.
func NewMockDevice(ctrl *gomock.Controller) *MockDevice {
	mock := &MockDevice{ctrl: ctrl}
	mock.recorder = &MockDeviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDevice) EXPECT() *MockDeviceMockRecorder {
	return m.recorder
}

// CheckPassphrase mocks base method.
func (m *MockDevice) CheckPassphrase(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPassphrase", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPassphrase indicates an expected call of CheckPassphrase.
func (mr *MockDeviceMockRecorder) CheckPassphrase(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPassphrase", reflect.TypeOf((*MockDevice)(nil).CheckPassphrase), arg0, arg1)
}

// EnsureDeviceMappedOnHost mocks base method.
func (m *MockDevice) EnsureDeviceMappedOnHost(arg0 context.Context, arg1 string, arg2 map[string]string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureDeviceMappedOnHost", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureDeviceMappedOnHost indicates an expected call of EnsureDeviceMappedOnHost.
func (mr *MockDeviceMockRecorder) EnsureDeviceMappedOnHost(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureDeviceMappedOnHost", reflect.TypeOf((*MockDevice)(nil).EnsureDeviceMappedOnHost), arg0, arg1, arg2)
}

// EnsureFormattedAndOpen mocks base method.
func (m *MockDevice) EnsureFormattedAndOpen(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureFormattedAndOpen", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureFormattedAndOpen indicates an expected call of EnsureFormattedAndOpen.
func (mr *MockDeviceMockRecorder) EnsureFormattedAndOpen(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureFormattedAndOpen", reflect.TypeOf((*MockDevice)(nil).EnsureFormattedAndOpen), arg0, arg1)
}

// MappedDeviceName mocks base method.
func (m *MockDevice) MappedDeviceName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MappedDeviceName")
	ret0, _ := ret[0].(string)
	return ret0
}

// MappedDeviceName indicates an expected call of MappedDeviceName.
func (mr *MockDeviceMockRecorder) MappedDeviceName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MappedDeviceName", reflect.TypeOf((*MockDevice)(nil).MappedDeviceName))
}

// MappedDevicePath mocks base method.
func (m *MockDevice) MappedDevicePath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MappedDevicePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// MappedDevicePath indicates an expected call of MappedDevicePath.
func (mr *MockDeviceMockRecorder) MappedDevicePath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MappedDevicePath", reflect.TypeOf((*MockDevice)(nil).MappedDevicePath))
}

// RawDevicePath mocks base method.
func (m *MockDevice) RawDevicePath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawDevicePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// RawDevicePath indicates an expected call of RawDevicePath.
func (mr *MockDeviceMockRecorder) RawDevicePath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawDevicePath", reflect.TypeOf((*MockDevice)(nil).RawDevicePath))
}

// RotatePassphrase mocks base method.
func (m *MockDevice) RotatePassphrase(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RotatePassphrase", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// RotatePassphrase indicates an expected call of RotatePassphrase.
func (mr *MockDeviceMockRecorder) RotatePassphrase(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotatePassphrase", reflect.TypeOf((*MockDevice)(nil).RotatePassphrase), arg0, arg1, arg2, arg3)
}
