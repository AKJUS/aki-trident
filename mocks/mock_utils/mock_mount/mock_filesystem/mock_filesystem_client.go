// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/utils/mount (interfaces: FilesystemClient)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/mock_utils/mock_mount/mock_filesystem/mock_filesystem_client.go -package=mock_filesystem github.com/netapp/trident/utils/mount FilesystemClient
//

// Package mock_filesystem is a generated GoMock package.
package mock_filesystem

import (
	context "context"
	reflect "reflect"

	v1 "github.com/kubernetes-csi/csi-proxy/client/api/filesystem/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockFilesystemClient is a mock of FilesystemClient interface.
type MockFilesystemClient struct {
	ctrl     *gomock.Controller
	recorder *MockFilesystemClientMockRecorder
	isgomock struct{}
}

// MockFilesystemClientMockRecorder is the mock recorder for MockFilesystemClient.
type MockFilesystemClientMockRecorder struct {
	mock *MockFilesystemClient
}

// NewMockFilesystemClient creates a new mock instance.
func NewMockFilesystemClient(ctrl *gomock.Controller) *MockFilesystemClient {
	mock := &MockFilesystemClient{ctrl: ctrl}
	mock.recorder = &MockFilesystemClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesystemClient) EXPECT() *MockFilesystemClientMockRecorder {
	return m.recorder
}

// CreateSymlink mocks base method.
func (m *MockFilesystemClient) CreateSymlink(ctx context.Context, in *v1.CreateSymlinkRequest, opts ...grpc.CallOption) (*v1.CreateSymlinkResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSymlink", varargs...)
	ret0, _ := ret[0].(*v1.CreateSymlinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSymlink indicates an expected call of CreateSymlink.
func (mr *MockFilesystemClientMockRecorder) CreateSymlink(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSymlink", reflect.TypeOf((*MockFilesystemClient)(nil).CreateSymlink), varargs...)
}

// IsSymlink mocks base method.
func (m *MockFilesystemClient) IsSymlink(ctx context.Context, in *v1.IsSymlinkRequest, opts ...grpc.CallOption) (*v1.IsSymlinkResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsSymlink", varargs...)
	ret0, _ := ret[0].(*v1.IsSymlinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSymlink indicates an expected call of IsSymlink.
func (mr *MockFilesystemClientMockRecorder) IsSymlink(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSymlink", reflect.TypeOf((*MockFilesystemClient)(nil).IsSymlink), varargs...)
}

// Mkdir mocks base method.
func (m *MockFilesystemClient) Mkdir(ctx context.Context, in *v1.MkdirRequest, opts ...grpc.CallOption) (*v1.MkdirResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Mkdir", varargs...)
	ret0, _ := ret[0].(*v1.MkdirResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Mkdir indicates an expected call of Mkdir.
func (mr *MockFilesystemClientMockRecorder) Mkdir(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mkdir", reflect.TypeOf((*MockFilesystemClient)(nil).Mkdir), varargs...)
}

// PathExists mocks base method.
func (m *MockFilesystemClient) PathExists(ctx context.Context, in *v1.PathExistsRequest, opts ...grpc.CallOption) (*v1.PathExistsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PathExists", varargs...)
	ret0, _ := ret[0].(*v1.PathExistsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PathExists indicates an expected call of PathExists.
func (mr *MockFilesystemClientMockRecorder) PathExists(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PathExists", reflect.TypeOf((*MockFilesystemClient)(nil).PathExists), varargs...)
}

// Rmdir mocks base method.
func (m *MockFilesystemClient) Rmdir(ctx context.Context, in *v1.RmdirRequest, opts ...grpc.CallOption) (*v1.RmdirResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Rmdir", varargs...)
	ret0, _ := ret[0].(*v1.RmdirResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rmdir indicates an expected call of Rmdir.
func (mr *MockFilesystemClientMockRecorder) Rmdir(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rmdir", reflect.TypeOf((*MockFilesystemClient)(nil).Rmdir), varargs...)
}
