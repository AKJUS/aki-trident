// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/utils/mount/filepathwrapper (interfaces: FilePath)
//
// Generated by this command:
//
//	mockgen -destination=../../../mocks/mock_utils/mock_mount/mock_filepathwrapper/mock_filepathwrapper.go github.com/netapp/trident/utils/mount/filepathwrapper FilePath
//

// Package mock_filepathwrapper is a generated GoMock package.
package mock_filepathwrapper

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFilePath is a mock of FilePath interface.
type MockFilePath struct {
	ctrl     *gomock.Controller
	recorder *MockFilePathMockRecorder
	isgomock struct{}
}

// MockFilePathMockRecorder is the mock recorder for MockFilePath.
type MockFilePathMockRecorder struct {
	mock *MockFilePath
}

// NewMockFilePath creates a new mock instance.
func NewMockFilePath(ctrl *gomock.Controller) *MockFilePath {
	mock := &MockFilePath{ctrl: ctrl}
	mock.recorder = &MockFilePathMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilePath) EXPECT() *MockFilePathMockRecorder {
	return m.recorder
}

// Dir mocks base method.
func (m *MockFilePath) Dir(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dir", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Dir indicates an expected call of Dir.
func (mr *MockFilePathMockRecorder) Dir(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dir", reflect.TypeOf((*MockFilePath)(nil).Dir), arg0)
}

// EvalSymlinks mocks base method.
func (m *MockFilePath) EvalSymlinks(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvalSymlinks", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvalSymlinks indicates an expected call of EvalSymlinks.
func (mr *MockFilePathMockRecorder) EvalSymlinks(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvalSymlinks", reflect.TypeOf((*MockFilePath)(nil).EvalSymlinks), arg0)
}
