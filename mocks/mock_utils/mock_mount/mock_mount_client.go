// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/utils/mount (interfaces: Mount)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/mock_utils/mock_mount/mock_mount_client.go github.com/netapp/trident/utils/mount Mount
//

// Package mock_mount is a generated GoMock package.
package mock_mount

import (
	context "context"
	reflect "reflect"

	models "github.com/netapp/trident/utils/models"
	gomock "go.uber.org/mock/gomock"
)

// MockMount is a mock of Mount interface.
type MockMount struct {
	ctrl     *gomock.Controller
	recorder *MockMountMockRecorder
	isgomock struct{}
}

// MockMountMockRecorder is the mock recorder for MockMount.
type MockMountMockRecorder struct {
	mock *MockMount
}

// NewMockMount creates a new mock instance.
func NewMockMount(ctrl *gomock.Controller) *MockMount {
	mock := &MockMount{ctrl: ctrl}
	mock.recorder = &MockMountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMount) EXPECT() *MockMountMockRecorder {
	return m.recorder
}

// AttachNFSVolume mocks base method.
func (m *MockMount) AttachNFSVolume(ctx context.Context, name, mountpoint string, publishInfo *models.VolumePublishInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachNFSVolume", ctx, name, mountpoint, publishInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// AttachNFSVolume indicates an expected call of AttachNFSVolume.
func (mr *MockMountMockRecorder) AttachNFSVolume(ctx, name, mountpoint, publishInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachNFSVolume", reflect.TypeOf((*MockMount)(nil).AttachNFSVolume), ctx, name, mountpoint, publishInfo)
}

// AttachSMBVolume mocks base method.
func (m *MockMount) AttachSMBVolume(ctx context.Context, name, mountpoint, username, password string, publishInfo *models.VolumePublishInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachSMBVolume", ctx, name, mountpoint, username, password, publishInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// AttachSMBVolume indicates an expected call of AttachSMBVolume.
func (mr *MockMountMockRecorder) AttachSMBVolume(ctx, name, mountpoint, username, password, publishInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachSMBVolume", reflect.TypeOf((*MockMount)(nil).AttachSMBVolume), ctx, name, mountpoint, username, password, publishInfo)
}

// GetHostMountInfo mocks base method.
func (m *MockMount) GetHostMountInfo(ctx context.Context) ([]models.MountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostMountInfo", ctx)
	ret0, _ := ret[0].([]models.MountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostMountInfo indicates an expected call of GetHostMountInfo.
func (mr *MockMountMockRecorder) GetHostMountInfo(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostMountInfo", reflect.TypeOf((*MockMount)(nil).GetHostMountInfo), ctx)
}

// GetSelfMountInfo mocks base method.
func (m *MockMount) GetSelfMountInfo(ctx context.Context) ([]models.MountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSelfMountInfo", ctx)
	ret0, _ := ret[0].([]models.MountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSelfMountInfo indicates an expected call of GetSelfMountInfo.
func (mr *MockMountMockRecorder) GetSelfMountInfo(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSelfMountInfo", reflect.TypeOf((*MockMount)(nil).GetSelfMountInfo), ctx)
}

// IsCompatible mocks base method.
func (m *MockMount) IsCompatible(ctx context.Context, protocol string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCompatible", ctx, protocol)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsCompatible indicates an expected call of IsCompatible.
func (mr *MockMountMockRecorder) IsCompatible(ctx, protocol any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCompatible", reflect.TypeOf((*MockMount)(nil).IsCompatible), ctx, protocol)
}

// IsLikelyNotMountPoint mocks base method.
func (m *MockMount) IsLikelyNotMountPoint(ctx context.Context, mountpoint string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLikelyNotMountPoint", ctx, mountpoint)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLikelyNotMountPoint indicates an expected call of IsLikelyNotMountPoint.
func (mr *MockMountMockRecorder) IsLikelyNotMountPoint(ctx, mountpoint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLikelyNotMountPoint", reflect.TypeOf((*MockMount)(nil).IsLikelyNotMountPoint), ctx, mountpoint)
}

// IsMounted mocks base method.
func (m *MockMount) IsMounted(ctx context.Context, sourceDevice, mountpoint, mountOptions string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMounted", ctx, sourceDevice, mountpoint, mountOptions)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMounted indicates an expected call of IsMounted.
func (mr *MockMountMockRecorder) IsMounted(ctx, sourceDevice, mountpoint, mountOptions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMounted", reflect.TypeOf((*MockMount)(nil).IsMounted), ctx, sourceDevice, mountpoint, mountOptions)
}

// IsNFSShareMounted mocks base method.
func (m *MockMount) IsNFSShareMounted(ctx context.Context, exportPath, mountpoint string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNFSShareMounted", ctx, exportPath, mountpoint)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsNFSShareMounted indicates an expected call of IsNFSShareMounted.
func (mr *MockMountMockRecorder) IsNFSShareMounted(ctx, exportPath, mountpoint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNFSShareMounted", reflect.TypeOf((*MockMount)(nil).IsNFSShareMounted), ctx, exportPath, mountpoint)
}

// ListProcMountinfo mocks base method.
func (m *MockMount) ListProcMountinfo() ([]models.MountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProcMountinfo")
	ret0, _ := ret[0].([]models.MountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProcMountinfo indicates an expected call of ListProcMountinfo.
func (mr *MockMountMockRecorder) ListProcMountinfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProcMountinfo", reflect.TypeOf((*MockMount)(nil).ListProcMountinfo))
}

// ListProcMounts mocks base method.
func (m *MockMount) ListProcMounts(mountFilePath string) ([]models.MountPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProcMounts", mountFilePath)
	ret0, _ := ret[0].([]models.MountPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProcMounts indicates an expected call of ListProcMounts.
func (mr *MockMountMockRecorder) ListProcMounts(mountFilePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProcMounts", reflect.TypeOf((*MockMount)(nil).ListProcMounts), mountFilePath)
}

// MountDevice mocks base method.
func (m *MockMount) MountDevice(ctx context.Context, device, mountpoint, options string, isMountPointFile bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MountDevice", ctx, device, mountpoint, options, isMountPointFile)
	ret0, _ := ret[0].(error)
	return ret0
}

// MountDevice indicates an expected call of MountDevice.
func (mr *MockMountMockRecorder) MountDevice(ctx, device, mountpoint, options, isMountPointFile any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MountDevice", reflect.TypeOf((*MockMount)(nil).MountDevice), ctx, device, mountpoint, options, isMountPointFile)
}

// MountFilesystemForResize mocks base method.
func (m *MockMount) MountFilesystemForResize(ctx context.Context, devicePath, stagedTargetPath, mountOptions string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MountFilesystemForResize", ctx, devicePath, stagedTargetPath, mountOptions)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MountFilesystemForResize indicates an expected call of MountFilesystemForResize.
func (mr *MockMountMockRecorder) MountFilesystemForResize(ctx, devicePath, stagedTargetPath, mountOptions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MountFilesystemForResize", reflect.TypeOf((*MockMount)(nil).MountFilesystemForResize), ctx, devicePath, stagedTargetPath, mountOptions)
}

// MountNFSPath mocks base method.
func (m *MockMount) MountNFSPath(ctx context.Context, exportPath, mountpoint, options string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MountNFSPath", ctx, exportPath, mountpoint, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// MountNFSPath indicates an expected call of MountNFSPath.
func (mr *MockMountMockRecorder) MountNFSPath(ctx, exportPath, mountpoint, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MountNFSPath", reflect.TypeOf((*MockMount)(nil).MountNFSPath), ctx, exportPath, mountpoint, options)
}

// MountSMBPath mocks base method.
func (m *MockMount) MountSMBPath(ctx context.Context, exportPath, mountpoint, username, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MountSMBPath", ctx, exportPath, mountpoint, username, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// MountSMBPath indicates an expected call of MountSMBPath.
func (mr *MockMountMockRecorder) MountSMBPath(ctx, exportPath, mountpoint, username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MountSMBPath", reflect.TypeOf((*MockMount)(nil).MountSMBPath), ctx, exportPath, mountpoint, username, password)
}

// PVMountpointMappings mocks base method.
func (m *MockMount) PVMountpointMappings(ctx context.Context) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PVMountpointMappings", ctx)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PVMountpointMappings indicates an expected call of PVMountpointMappings.
func (mr *MockMountMockRecorder) PVMountpointMappings(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PVMountpointMappings", reflect.TypeOf((*MockMount)(nil).PVMountpointMappings), ctx)
}

// RemountDevice mocks base method.
func (m *MockMount) RemountDevice(ctx context.Context, mountpoint, options string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemountDevice", ctx, mountpoint, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemountDevice indicates an expected call of RemountDevice.
func (mr *MockMountMockRecorder) RemountDevice(ctx, mountpoint, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemountDevice", reflect.TypeOf((*MockMount)(nil).RemountDevice), ctx, mountpoint, options)
}

// RemoveMountPoint mocks base method.
func (m *MockMount) RemoveMountPoint(ctx context.Context, mountPointPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMountPoint", ctx, mountPointPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMountPoint indicates an expected call of RemoveMountPoint.
func (mr *MockMountMockRecorder) RemoveMountPoint(ctx, mountPointPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMountPoint", reflect.TypeOf((*MockMount)(nil).RemoveMountPoint), ctx, mountPointPath)
}

// Umount mocks base method.
func (m *MockMount) Umount(ctx context.Context, mountpoint string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Umount", ctx, mountpoint)
	ret0, _ := ret[0].(error)
	return ret0
}

// Umount indicates an expected call of Umount.
func (mr *MockMountMockRecorder) Umount(ctx, mountpoint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Umount", reflect.TypeOf((*MockMount)(nil).Umount), ctx, mountpoint)
}

// UmountAndRemoveMountPoint mocks base method.
func (m *MockMount) UmountAndRemoveMountPoint(ctx context.Context, mountPoint string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UmountAndRemoveMountPoint", ctx, mountPoint)
	ret0, _ := ret[0].(error)
	return ret0
}

// UmountAndRemoveMountPoint indicates an expected call of UmountAndRemoveMountPoint.
func (mr *MockMountMockRecorder) UmountAndRemoveMountPoint(ctx, mountPoint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UmountAndRemoveMountPoint", reflect.TypeOf((*MockMount)(nil).UmountAndRemoveMountPoint), ctx, mountPoint)
}

// UmountAndRemoveTemporaryMountPoint mocks base method.
func (m *MockMount) UmountAndRemoveTemporaryMountPoint(ctx context.Context, mountPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UmountAndRemoveTemporaryMountPoint", ctx, mountPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// UmountAndRemoveTemporaryMountPoint indicates an expected call of UmountAndRemoveTemporaryMountPoint.
func (mr *MockMountMockRecorder) UmountAndRemoveTemporaryMountPoint(ctx, mountPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UmountAndRemoveTemporaryMountPoint", reflect.TypeOf((*MockMount)(nil).UmountAndRemoveTemporaryMountPoint), ctx, mountPath)
}

// UmountSMBPath mocks base method.
func (m *MockMount) UmountSMBPath(ctx context.Context, mappingPath, target string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UmountSMBPath", ctx, mappingPath, target)
	ret0, _ := ret[0].(error)
	return ret0
}

// UmountSMBPath indicates an expected call of UmountSMBPath.
func (mr *MockMountMockRecorder) UmountSMBPath(ctx, mappingPath, target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UmountSMBPath", reflect.TypeOf((*MockMount)(nil).UmountSMBPath), ctx, mappingPath, target)
}

// WindowsBindMount mocks base method.
func (m *MockMount) WindowsBindMount(ctx context.Context, source, target string, options []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WindowsBindMount", ctx, source, target, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// WindowsBindMount indicates an expected call of WindowsBindMount.
func (mr *MockMountMockRecorder) WindowsBindMount(ctx, source, target, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WindowsBindMount", reflect.TypeOf((*MockMount)(nil).WindowsBindMount), ctx, source, target, options)
}
