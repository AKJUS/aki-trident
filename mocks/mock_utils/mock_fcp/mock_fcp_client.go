// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/utils/fcp (interfaces: FCP)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/mock_utils/mock_fcp/mock_fcp_client.go github.com/netapp/trident/utils/fcp FCP
//

// Package mock_fcp is a generated GoMock package.
package mock_fcp

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/netapp/trident/utils/models"
	gomock "go.uber.org/mock/gomock"
)

// MockFCP is a mock of FCP interface.
type MockFCP struct {
	ctrl     *gomock.Controller
	recorder *MockFCPMockRecorder
}

// MockFCPMockRecorder is the mock recorder for MockFCP.
type MockFCPMockRecorder struct {
	mock *MockFCP
}

// NewMockFCP creates a new mock instance.
func NewMockFCP(ctrl *gomock.Controller) *MockFCP {
	mock := &MockFCP{ctrl: ctrl}
	mock.recorder = &MockFCPMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFCP) EXPECT() *MockFCPMockRecorder {
	return m.recorder
}

// AttachVolumeRetry mocks base method.
func (m *MockFCP) AttachVolumeRetry(arg0 context.Context, arg1, arg2 string, arg3 *models.VolumePublishInfo, arg4 map[string]string, arg5 time.Duration) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachVolumeRetry", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachVolumeRetry indicates an expected call of AttachVolumeRetry.
func (mr *MockFCPMockRecorder) AttachVolumeRetry(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachVolumeRetry", reflect.TypeOf((*MockFCP)(nil).AttachVolumeRetry), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetDeviceInfoForFCPLUN mocks base method.
func (m *MockFCP) GetDeviceInfoForFCPLUN(arg0 context.Context, arg1 []map[string]int, arg2 int, arg3 string, arg4 bool) (*models.ScsiDeviceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceInfoForFCPLUN", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*models.ScsiDeviceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceInfoForFCPLUN indicates an expected call of GetDeviceInfoForFCPLUN.
func (mr *MockFCPMockRecorder) GetDeviceInfoForFCPLUN(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceInfoForFCPLUN", reflect.TypeOf((*MockFCP)(nil).GetDeviceInfoForFCPLUN), arg0, arg1, arg2, arg3, arg4)
}

// GetDeviceInfoForLUN mocks base method.
func (m *MockFCP) GetDeviceInfoForLUN(arg0 context.Context, arg1 []map[string]int, arg2 int, arg3 string, arg4 bool) (*models.ScsiDeviceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceInfoForLUN", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*models.ScsiDeviceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceInfoForLUN indicates an expected call of GetDeviceInfoForLUN.
func (mr *MockFCPMockRecorder) GetDeviceInfoForLUN(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceInfoForLUN", reflect.TypeOf((*MockFCP)(nil).GetDeviceInfoForLUN), arg0, arg1, arg2, arg3, arg4)
}

// IsAlreadyAttached mocks base method.
func (m *MockFCP) IsAlreadyAttached(arg0 context.Context, arg1 int, arg2 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAlreadyAttached", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAlreadyAttached indicates an expected call of IsAlreadyAttached.
func (mr *MockFCPMockRecorder) IsAlreadyAttached(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAlreadyAttached", reflect.TypeOf((*MockFCP)(nil).IsAlreadyAttached), arg0, arg1, arg2)
}

// PreChecks mocks base method.
func (m *MockFCP) PreChecks(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreChecks", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PreChecks indicates an expected call of PreChecks.
func (mr *MockFCPMockRecorder) PreChecks(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreChecks", reflect.TypeOf((*MockFCP)(nil).PreChecks), arg0)
}

// PrepareDeviceForRemoval mocks base method.
func (m *MockFCP) PrepareDeviceForRemoval(arg0 context.Context, arg1 *models.ScsiDeviceInfo, arg2 *models.VolumePublishInfo, arg3 []models.VolumePublishInfo, arg4, arg5 bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareDeviceForRemoval", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareDeviceForRemoval indicates an expected call of PrepareDeviceForRemoval.
func (mr *MockFCPMockRecorder) PrepareDeviceForRemoval(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareDeviceForRemoval", reflect.TypeOf((*MockFCP)(nil).PrepareDeviceForRemoval), arg0, arg1, arg2, arg3, arg4, arg5)
}

// RescanDevices mocks base method.
func (m *MockFCP) RescanDevices(arg0 context.Context, arg1 string, arg2 int32, arg3 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RescanDevices", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// RescanDevices indicates an expected call of RescanDevices.
func (mr *MockFCPMockRecorder) RescanDevices(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RescanDevices", reflect.TypeOf((*MockFCP)(nil).RescanDevices), arg0, arg1, arg2, arg3)
}
