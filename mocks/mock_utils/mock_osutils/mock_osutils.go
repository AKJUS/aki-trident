// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/utils/osutils (interfaces: Utils)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/mock_utils/mock_osutils/mock_osutils.go github.com/netapp/trident/utils/osutils Utils
//

// Package mock_osutils is a generated GoMock package.
package mock_osutils

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/netapp/trident/utils/models"
	gomock "go.uber.org/mock/gomock"
)

// MockUtils is a mock of Utils interface.
type MockUtils struct {
	ctrl     *gomock.Controller
	recorder *MockUtilsMockRecorder
}

// MockUtilsMockRecorder is the mock recorder for MockUtils.
type MockUtilsMockRecorder struct {
	mock *MockUtils
}

// NewMockUtils creates a new mock instance.
func NewMockUtils(ctrl *gomock.Controller) *MockUtils {
	mock := &MockUtils{ctrl: ctrl}
	mock.recorder = &MockUtilsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUtils) EXPECT() *MockUtilsMockRecorder {
	return m.recorder
}

// DeleteResourceAtPath mocks base method.
func (m *MockUtils) DeleteResourceAtPath(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourceAtPath", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResourceAtPath indicates an expected call of DeleteResourceAtPath.
func (mr *MockUtilsMockRecorder) DeleteResourceAtPath(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceAtPath", reflect.TypeOf((*MockUtils)(nil).DeleteResourceAtPath), arg0, arg1)
}

// EnsureDirExists mocks base method.
func (m *MockUtils) EnsureDirExists(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureDirExists", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureDirExists indicates an expected call of EnsureDirExists.
func (mr *MockUtilsMockRecorder) EnsureDirExists(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureDirExists", reflect.TypeOf((*MockUtils)(nil).EnsureDirExists), arg0, arg1)
}

// EnsureFileExists mocks base method.
func (m *MockUtils) EnsureFileExists(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureFileExists", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureFileExists indicates an expected call of EnsureFileExists.
func (mr *MockUtilsMockRecorder) EnsureFileExists(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureFileExists", reflect.TypeOf((*MockUtils)(nil).EnsureFileExists), arg0, arg1)
}

// GetHostSystemInfo mocks base method.
func (m *MockUtils) GetHostSystemInfo(arg0 context.Context) (*models.HostSystem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostSystemInfo", arg0)
	ret0, _ := ret[0].(*models.HostSystem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostSystemInfo indicates an expected call of GetHostSystemInfo.
func (mr *MockUtilsMockRecorder) GetHostSystemInfo(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostSystemInfo", reflect.TypeOf((*MockUtils)(nil).GetHostSystemInfo), arg0)
}

// GetIPAddresses mocks base method.
func (m *MockUtils) GetIPAddresses(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIPAddresses", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIPAddresses indicates an expected call of GetIPAddresses.
func (mr *MockUtilsMockRecorder) GetIPAddresses(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPAddresses", reflect.TypeOf((*MockUtils)(nil).GetIPAddresses), arg0)
}

// IsLikelyDir mocks base method.
func (m *MockUtils) IsLikelyDir(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLikelyDir", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLikelyDir indicates an expected call of IsLikelyDir.
func (mr *MockUtilsMockRecorder) IsLikelyDir(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLikelyDir", reflect.TypeOf((*MockUtils)(nil).IsLikelyDir), arg0)
}

// NFSActiveOnHost mocks base method.
func (m *MockUtils) NFSActiveOnHost(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NFSActiveOnHost", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NFSActiveOnHost indicates an expected call of NFSActiveOnHost.
func (mr *MockUtilsMockRecorder) NFSActiveOnHost(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NFSActiveOnHost", reflect.TypeOf((*MockUtils)(nil).NFSActiveOnHost), arg0)
}

// PathExists mocks base method.
func (m *MockUtils) PathExists(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PathExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PathExists indicates an expected call of PathExists.
func (mr *MockUtilsMockRecorder) PathExists(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PathExists", reflect.TypeOf((*MockUtils)(nil).PathExists), arg0)
}

// ServiceActiveOnHost mocks base method.
func (m *MockUtils) ServiceActiveOnHost(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceActiveOnHost", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceActiveOnHost indicates an expected call of ServiceActiveOnHost.
func (mr *MockUtilsMockRecorder) ServiceActiveOnHost(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceActiveOnHost", reflect.TypeOf((*MockUtils)(nil).ServiceActiveOnHost), arg0, arg1)
}

// WaitForResourceDeletionAtPath mocks base method.
func (m *MockUtils) WaitForResourceDeletionAtPath(arg0 context.Context, arg1 string, arg2 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForResourceDeletionAtPath", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForResourceDeletionAtPath indicates an expected call of WaitForResourceDeletionAtPath.
func (mr *MockUtilsMockRecorder) WaitForResourceDeletionAtPath(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForResourceDeletionAtPath", reflect.TypeOf((*MockUtils)(nil).WaitForResourceDeletionAtPath), arg0, arg1, arg2)
}
