// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/utils/filesystem (interfaces: Filesystem)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/mock_utils/mock_filesystem/mock_filesystem_client.go github.com/netapp/trident/utils/filesystem Filesystem
//

// Package mock_filesystem is a generated GoMock package.
package mock_filesystem

import (
	context "context"
	os "os"
	reflect "reflect"

	models "github.com/netapp/trident/utils/models"
	gomock "go.uber.org/mock/gomock"
)

// MockFilesystem is a mock of Filesystem interface.
type MockFilesystem struct {
	ctrl     *gomock.Controller
	recorder *MockFilesystemMockRecorder
	isgomock struct{}
}

// MockFilesystemMockRecorder is the mock recorder for MockFilesystem.
type MockFilesystemMockRecorder struct {
	mock *MockFilesystem
}

// NewMockFilesystem creates a new mock instance.
func NewMockFilesystem(ctrl *gomock.Controller) *MockFilesystem {
	mock := &MockFilesystem{ctrl: ctrl}
	mock.recorder = &MockFilesystemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesystem) EXPECT() *MockFilesystemMockRecorder {
	return m.recorder
}

// DeleteFile mocks base method.
func (m *MockFilesystem) DeleteFile(ctx context.Context, filepath, fileDescription string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", ctx, filepath, fileDescription)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockFilesystemMockRecorder) DeleteFile(ctx, filepath, fileDescription any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFilesystem)(nil).DeleteFile), ctx, filepath, fileDescription)
}

// ExpandFilesystemOnNode mocks base method.
func (m *MockFilesystem) ExpandFilesystemOnNode(ctx context.Context, publishInfo *models.VolumePublishInfo, devicePath, stagedTargetPath, fsType, mountOptions string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpandFilesystemOnNode", ctx, publishInfo, devicePath, stagedTargetPath, fsType, mountOptions)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpandFilesystemOnNode indicates an expected call of ExpandFilesystemOnNode.
func (mr *MockFilesystemMockRecorder) ExpandFilesystemOnNode(ctx, publishInfo, devicePath, stagedTargetPath, fsType, mountOptions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpandFilesystemOnNode", reflect.TypeOf((*MockFilesystem)(nil).ExpandFilesystemOnNode), ctx, publishInfo, devicePath, stagedTargetPath, fsType, mountOptions)
}

// FormatVolume mocks base method.
func (m *MockFilesystem) FormatVolume(ctx context.Context, device, fstype, options string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatVolume", ctx, device, fstype, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// FormatVolume indicates an expected call of FormatVolume.
func (mr *MockFilesystemMockRecorder) FormatVolume(ctx, device, fstype, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatVolume", reflect.TypeOf((*MockFilesystem)(nil).FormatVolume), ctx, device, fstype, options)
}

// GetDFOutput mocks base method.
func (m *MockFilesystem) GetDFOutput(ctx context.Context) ([]models.DFInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDFOutput", ctx)
	ret0, _ := ret[0].([]models.DFInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDFOutput indicates an expected call of GetDFOutput.
func (mr *MockFilesystemMockRecorder) GetDFOutput(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDFOutput", reflect.TypeOf((*MockFilesystem)(nil).GetDFOutput), ctx)
}

// GetFilesystemStats mocks base method.
func (m *MockFilesystem) GetFilesystemStats(ctx context.Context, path string) (int64, int64, int64, int64, int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystemStats", ctx, path)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(int64)
	ret3, _ := ret[3].(int64)
	ret4, _ := ret[4].(int64)
	ret5, _ := ret[5].(int64)
	ret6, _ := ret[6].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5, ret6
}

// GetFilesystemStats indicates an expected call of GetFilesystemStats.
func (mr *MockFilesystemMockRecorder) GetFilesystemStats(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystemStats", reflect.TypeOf((*MockFilesystem)(nil).GetFilesystemStats), ctx, path)
}

// GetUnmountPath mocks base method.
func (m *MockFilesystem) GetUnmountPath(ctx context.Context, trackingInfo *models.VolumeTrackingInfo) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnmountPath", ctx, trackingInfo)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnmountPath indicates an expected call of GetUnmountPath.
func (mr *MockFilesystemMockRecorder) GetUnmountPath(ctx, trackingInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnmountPath", reflect.TypeOf((*MockFilesystem)(nil).GetUnmountPath), ctx, trackingInfo)
}

// RepairVolume mocks base method.
func (m *MockFilesystem) RepairVolume(ctx context.Context, device, fstype string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RepairVolume", ctx, device, fstype)
}

// RepairVolume indicates an expected call of RepairVolume.
func (mr *MockFilesystemMockRecorder) RepairVolume(ctx, device, fstype any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepairVolume", reflect.TypeOf((*MockFilesystem)(nil).RepairVolume), ctx, device, fstype)
}

// ScanDir mocks base method.
func (m *MockFilesystem) ScanDir(path string) ([]os.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanDir", path)
	ret0, _ := ret[0].([]os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScanDir indicates an expected call of ScanDir.
func (mr *MockFilesystemMockRecorder) ScanDir(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanDir", reflect.TypeOf((*MockFilesystem)(nil).ScanDir), path)
}

// ScanFile mocks base method.
func (m *MockFilesystem) ScanFile(filename string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanFile", filename)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScanFile indicates an expected call of ScanFile.
func (mr *MockFilesystemMockRecorder) ScanFile(filename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanFile", reflect.TypeOf((*MockFilesystem)(nil).ScanFile), filename)
}
