// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/utils/filesystem (interfaces: Filesystem)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/mock_utils/mock_filesystem/mock_filesystem_client.go github.com/netapp/trident/utils/filesystem Filesystem
//

// Package mock_filesystem is a generated GoMock package.
package mock_filesystem

import (
	context "context"
	reflect "reflect"

	models "github.com/netapp/trident/utils/models"
	gomock "go.uber.org/mock/gomock"
)

// MockFilesystem is a mock of Filesystem interface.
type MockFilesystem struct {
	ctrl     *gomock.Controller
	recorder *MockFilesystemMockRecorder
}

// MockFilesystemMockRecorder is the mock recorder for MockFilesystem.
type MockFilesystemMockRecorder struct {
	mock *MockFilesystem
}

// NewMockFilesystem creates a new mock instance.
func NewMockFilesystem(ctrl *gomock.Controller) *MockFilesystem {
	mock := &MockFilesystem{ctrl: ctrl}
	mock.recorder = &MockFilesystemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesystem) EXPECT() *MockFilesystemMockRecorder {
	return m.recorder
}

// DeleteFile mocks base method.
func (m *MockFilesystem) DeleteFile(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockFilesystemMockRecorder) DeleteFile(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFilesystem)(nil).DeleteFile), arg0, arg1, arg2)
}

// ExpandFilesystemOnNode mocks base method.
func (m *MockFilesystem) ExpandFilesystemOnNode(arg0 context.Context, arg1 *models.VolumePublishInfo, arg2, arg3, arg4, arg5 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpandFilesystemOnNode", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpandFilesystemOnNode indicates an expected call of ExpandFilesystemOnNode.
func (mr *MockFilesystemMockRecorder) ExpandFilesystemOnNode(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpandFilesystemOnNode", reflect.TypeOf((*MockFilesystem)(nil).ExpandFilesystemOnNode), arg0, arg1, arg2, arg3, arg4, arg5)
}

// FormatVolume mocks base method.
func (m *MockFilesystem) FormatVolume(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatVolume", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// FormatVolume indicates an expected call of FormatVolume.
func (mr *MockFilesystemMockRecorder) FormatVolume(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatVolume", reflect.TypeOf((*MockFilesystem)(nil).FormatVolume), arg0, arg1, arg2, arg3)
}

// GenerateAnonymousMemFile mocks base method.
func (m *MockFilesystem) GenerateAnonymousMemFile(arg0, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAnonymousMemFile", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAnonymousMemFile indicates an expected call of GenerateAnonymousMemFile.
func (mr *MockFilesystemMockRecorder) GenerateAnonymousMemFile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAnonymousMemFile", reflect.TypeOf((*MockFilesystem)(nil).GenerateAnonymousMemFile), arg0, arg1)
}

// GetDFOutput mocks base method.
func (m *MockFilesystem) GetDFOutput(arg0 context.Context) ([]models.DFInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDFOutput", arg0)
	ret0, _ := ret[0].([]models.DFInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDFOutput indicates an expected call of GetDFOutput.
func (mr *MockFilesystemMockRecorder) GetDFOutput(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDFOutput", reflect.TypeOf((*MockFilesystem)(nil).GetDFOutput), arg0)
}

// GetFilesystemStats mocks base method.
func (m *MockFilesystem) GetFilesystemStats(arg0 context.Context, arg1 string) (int64, int64, int64, int64, int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystemStats", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(int64)
	ret3, _ := ret[3].(int64)
	ret4, _ := ret[4].(int64)
	ret5, _ := ret[5].(int64)
	ret6, _ := ret[6].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5, ret6
}

// GetFilesystemStats indicates an expected call of GetFilesystemStats.
func (mr *MockFilesystemMockRecorder) GetFilesystemStats(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystemStats", reflect.TypeOf((*MockFilesystem)(nil).GetFilesystemStats), arg0, arg1)
}

// GetUnmountPath mocks base method.
func (m *MockFilesystem) GetUnmountPath(arg0 context.Context, arg1 *models.VolumeTrackingInfo) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnmountPath", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnmountPath indicates an expected call of GetUnmountPath.
func (mr *MockFilesystemMockRecorder) GetUnmountPath(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnmountPath", reflect.TypeOf((*MockFilesystem)(nil).GetUnmountPath), arg0, arg1)
}

// RepairVolume mocks base method.
func (m *MockFilesystem) RepairVolume(arg0 context.Context, arg1, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RepairVolume", arg0, arg1, arg2)
}

// RepairVolume indicates an expected call of RepairVolume.
func (mr *MockFilesystemMockRecorder) RepairVolume(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepairVolume", reflect.TypeOf((*MockFilesystem)(nil).RepairVolume), arg0, arg1, arg2)
}
