// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/utils/filesystem (interfaces: JSONReaderWriter)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/mock_utils/mock_filesystem/mock_json_utils.go github.com/netapp/trident/utils/filesystem JSONReaderWriter
//

// Package mock_filesystem is a generated GoMock package.
package mock_filesystem

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockJSONReaderWriter is a mock of JSONReaderWriter interface.
type MockJSONReaderWriter struct {
	ctrl     *gomock.Controller
	recorder *MockJSONReaderWriterMockRecorder
	isgomock struct{}
}

// MockJSONReaderWriterMockRecorder is the mock recorder for MockJSONReaderWriter.
type MockJSONReaderWriterMockRecorder struct {
	mock *MockJSONReaderWriter
}

// NewMockJSONReaderWriter creates a new mock instance.
func NewMockJSONReaderWriter(ctrl *gomock.Controller) *MockJSONReaderWriter {
	mock := &MockJSONReaderWriter{ctrl: ctrl}
	mock.recorder = &MockJSONReaderWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJSONReaderWriter) EXPECT() *MockJSONReaderWriterMockRecorder {
	return m.recorder
}

// ReadJSONFile mocks base method.
func (m *MockJSONReaderWriter) ReadJSONFile(ctx context.Context, fileContents any, filepath, fileDescription string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadJSONFile", ctx, fileContents, filepath, fileDescription)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadJSONFile indicates an expected call of ReadJSONFile.
func (mr *MockJSONReaderWriterMockRecorder) ReadJSONFile(ctx, fileContents, filepath, fileDescription any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadJSONFile", reflect.TypeOf((*MockJSONReaderWriter)(nil).ReadJSONFile), ctx, fileContents, filepath, fileDescription)
}

// WriteJSONFile mocks base method.
func (m *MockJSONReaderWriter) WriteJSONFile(ctx context.Context, fileContents any, filepath, fileDescription string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteJSONFile", ctx, fileContents, filepath, fileDescription)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteJSONFile indicates an expected call of WriteJSONFile.
func (mr *MockJSONReaderWriterMockRecorder) WriteJSONFile(ctx, fileContents, filepath, fileDescription any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteJSONFile", reflect.TypeOf((*MockJSONReaderWriter)(nil).WriteJSONFile), ctx, fileContents, filepath, fileDescription)
}
