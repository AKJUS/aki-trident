// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/utils/nvme (interfaces: NVMeInterface)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/mock_utils/nvme/mock_nvme_utils.go github.com/netapp/trident/utils/nvme NVMeInterface
//

// Package mock_nvme is a generated GoMock package.
package mock_nvme

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/netapp/trident/utils/models"
	nvme "github.com/netapp/trident/utils/nvme"
	gomock "go.uber.org/mock/gomock"
)

// MockNVMeInterface is a mock of NVMeInterface interface.
type MockNVMeInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNVMeInterfaceMockRecorder
}

// MockNVMeInterfaceMockRecorder is the mock recorder for MockNVMeInterface.
type MockNVMeInterfaceMockRecorder struct {
	mock *MockNVMeInterface
}

// NewMockNVMeInterface creates a new mock instance.
func NewMockNVMeInterface(ctrl *gomock.Controller) *MockNVMeInterface {
	mock := &MockNVMeInterface{ctrl: ctrl}
	mock.recorder = &MockNVMeInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNVMeInterface) EXPECT() *MockNVMeInterfaceMockRecorder {
	return m.recorder
}

// AddPublishedNVMeSession mocks base method.
func (m *MockNVMeInterface) AddPublishedNVMeSession(arg0 *nvme.NVMeSessions, arg1 *models.VolumePublishInfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddPublishedNVMeSession", arg0, arg1)
}

// AddPublishedNVMeSession indicates an expected call of AddPublishedNVMeSession.
func (mr *MockNVMeInterfaceMockRecorder) AddPublishedNVMeSession(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPublishedNVMeSession", reflect.TypeOf((*MockNVMeInterface)(nil).AddPublishedNVMeSession), arg0, arg1)
}

// AttachNVMeVolume mocks base method.
func (m *MockNVMeInterface) AttachNVMeVolume(arg0 context.Context, arg1, arg2 string, arg3 *models.VolumePublishInfo, arg4 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachNVMeVolume", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AttachNVMeVolume indicates an expected call of AttachNVMeVolume.
func (mr *MockNVMeInterfaceMockRecorder) AttachNVMeVolume(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachNVMeVolume", reflect.TypeOf((*MockNVMeInterface)(nil).AttachNVMeVolume), arg0, arg1, arg2, arg3, arg4)
}

// AttachNVMeVolumeRetry mocks base method.
func (m *MockNVMeInterface) AttachNVMeVolumeRetry(arg0 context.Context, arg1, arg2 string, arg3 *models.VolumePublishInfo, arg4 map[string]string, arg5 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachNVMeVolumeRetry", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// AttachNVMeVolumeRetry indicates an expected call of AttachNVMeVolumeRetry.
func (mr *MockNVMeInterfaceMockRecorder) AttachNVMeVolumeRetry(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachNVMeVolumeRetry", reflect.TypeOf((*MockNVMeInterface)(nil).AttachNVMeVolumeRetry), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetHostNqn mocks base method.
func (m *MockNVMeInterface) GetHostNqn(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostNqn", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostNqn indicates an expected call of GetHostNqn.
func (mr *MockNVMeInterfaceMockRecorder) GetHostNqn(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostNqn", reflect.TypeOf((*MockNVMeInterface)(nil).GetHostNqn), arg0)
}

// GetNVMeSubsystem mocks base method.
func (m *MockNVMeInterface) GetNVMeSubsystem(arg0 context.Context, arg1 string) (*nvme.NVMeSubsystem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNVMeSubsystem", arg0, arg1)
	ret0, _ := ret[0].(*nvme.NVMeSubsystem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNVMeSubsystem indicates an expected call of GetNVMeSubsystem.
func (mr *MockNVMeInterfaceMockRecorder) GetNVMeSubsystem(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNVMeSubsystem", reflect.TypeOf((*MockNVMeInterface)(nil).GetNVMeSubsystem), arg0, arg1)
}

// InspectNVMeSessions mocks base method.
func (m *MockNVMeInterface) InspectNVMeSessions(arg0 context.Context, arg1, arg2 *nvme.NVMeSessions) []nvme.NVMeSubsystem {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InspectNVMeSessions", arg0, arg1, arg2)
	ret0, _ := ret[0].([]nvme.NVMeSubsystem)
	return ret0
}

// InspectNVMeSessions indicates an expected call of InspectNVMeSessions.
func (mr *MockNVMeInterfaceMockRecorder) InspectNVMeSessions(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InspectNVMeSessions", reflect.TypeOf((*MockNVMeInterface)(nil).InspectNVMeSessions), arg0, arg1, arg2)
}

// NVMeActiveOnHost mocks base method.
func (m *MockNVMeInterface) NVMeActiveOnHost(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NVMeActiveOnHost", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NVMeActiveOnHost indicates an expected call of NVMeActiveOnHost.
func (mr *MockNVMeInterfaceMockRecorder) NVMeActiveOnHost(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NVMeActiveOnHost", reflect.TypeOf((*MockNVMeInterface)(nil).NVMeActiveOnHost), arg0)
}

// NVMeMountVolume mocks base method.
func (m *MockNVMeInterface) NVMeMountVolume(arg0 context.Context, arg1, arg2 string, arg3 *models.VolumePublishInfo, arg4 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NVMeMountVolume", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// NVMeMountVolume indicates an expected call of NVMeMountVolume.
func (mr *MockNVMeInterfaceMockRecorder) NVMeMountVolume(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NVMeMountVolume", reflect.TypeOf((*MockNVMeInterface)(nil).NVMeMountVolume), arg0, arg1, arg2, arg3, arg4)
}

// NewNVMeSubsystem mocks base method.
func (m *MockNVMeInterface) NewNVMeSubsystem(arg0 context.Context, arg1 string) nvme.NVMeSubsystemInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewNVMeSubsystem", arg0, arg1)
	ret0, _ := ret[0].(nvme.NVMeSubsystemInterface)
	return ret0
}

// NewNVMeSubsystem indicates an expected call of NewNVMeSubsystem.
func (mr *MockNVMeInterfaceMockRecorder) NewNVMeSubsystem(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewNVMeSubsystem", reflect.TypeOf((*MockNVMeInterface)(nil).NewNVMeSubsystem), arg0, arg1)
}

// PopulateCurrentNVMeSessions mocks base method.
func (m *MockNVMeInterface) PopulateCurrentNVMeSessions(arg0 context.Context, arg1 *nvme.NVMeSessions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PopulateCurrentNVMeSessions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PopulateCurrentNVMeSessions indicates an expected call of PopulateCurrentNVMeSessions.
func (mr *MockNVMeInterfaceMockRecorder) PopulateCurrentNVMeSessions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PopulateCurrentNVMeSessions", reflect.TypeOf((*MockNVMeInterface)(nil).PopulateCurrentNVMeSessions), arg0, arg1)
}

// RectifyNVMeSession mocks base method.
func (m *MockNVMeInterface) RectifyNVMeSession(arg0 context.Context, arg1 nvme.NVMeSubsystem, arg2 *nvme.NVMeSessions) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RectifyNVMeSession", arg0, arg1, arg2)
}

// RectifyNVMeSession indicates an expected call of RectifyNVMeSession.
func (mr *MockNVMeInterfaceMockRecorder) RectifyNVMeSession(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RectifyNVMeSession", reflect.TypeOf((*MockNVMeInterface)(nil).RectifyNVMeSession), arg0, arg1, arg2)
}

// RemovePublishedNVMeSession mocks base method.
func (m *MockNVMeInterface) RemovePublishedNVMeSession(arg0 *nvme.NVMeSessions, arg1, arg2 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePublishedNVMeSession", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// RemovePublishedNVMeSession indicates an expected call of RemovePublishedNVMeSession.
func (mr *MockNVMeInterfaceMockRecorder) RemovePublishedNVMeSession(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePublishedNVMeSession", reflect.TypeOf((*MockNVMeInterface)(nil).RemovePublishedNVMeSession), arg0, arg1, arg2)
}
