// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/utils/path (interfaces: Path)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/mock_utils/mock_path/mock_path.go github.com/netapp/trident/utils/path Path
//

// Package mock_path is a generated GoMock package.
package mock_path

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPath is a mock of Path interface.
type MockPath struct {
	ctrl     *gomock.Controller
	recorder *MockPathMockRecorder
}

// MockPathMockRecorder is the mock recorder for MockPath.
type MockPathMockRecorder struct {
	mock *MockPath
}

// NewMockPath creates a new mock instance.
func NewMockPath(ctrl *gomock.Controller) *MockPath {
	mock := &MockPath{ctrl: ctrl}
	mock.recorder = &MockPathMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPath) EXPECT() *MockPathMockRecorder {
	return m.recorder
}

// EvalSymlinks mocks base method.
func (m *MockPath) EvalSymlinks(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvalSymlinks", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvalSymlinks indicates an expected call of EvalSymlinks.
func (mr *MockPathMockRecorder) EvalSymlinks(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvalSymlinks", reflect.TypeOf((*MockPath)(nil).EvalSymlinks), arg0)
}
