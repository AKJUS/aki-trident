// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/operator/controllers/configurator/clients (interfaces: ConfiguratorClientInterface,ExtendedK8sClientInterface)
//
// Generated by this command:
//
//	mockgen -destination=../../../../mocks/mock_operator/mock_controllers/mock_configurator/mock_clients/mock_api.go github.com/netapp/trident/operator/controllers/configurator/clients ConfiguratorClientInterface,ExtendedK8sClientInterface
//

// Package mock_clients is a generated GoMock package.
package mock_clients

import (
	reflect "reflect"
	time "time"

	v1 "github.com/kubernetes-csi/external-snapshotter/client/v6/apis/volumesnapshot/v1"
	k8sclient "github.com/netapp/trident/cli/k8s_client"
	clients "github.com/netapp/trident/operator/controllers/configurator/clients"
	v10 "github.com/netapp/trident/operator/crd/apis/netapp/v1"
	version "github.com/netapp/trident/utils/version"
	gomock "go.uber.org/mock/gomock"
	v11 "k8s.io/api/apps/v1"
	v12 "k8s.io/api/core/v1"
	v1beta1 "k8s.io/api/policy/v1beta1"
	v13 "k8s.io/api/rbac/v1"
	v14 "k8s.io/api/storage/v1"
	v15 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	types "k8s.io/apimachinery/pkg/types"
	version0 "k8s.io/apimachinery/pkg/version"
)

// MockConfiguratorClientInterface is a mock of ConfiguratorClientInterface interface.
type MockConfiguratorClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockConfiguratorClientInterfaceMockRecorder
}

// MockConfiguratorClientInterfaceMockRecorder is the mock recorder for MockConfiguratorClientInterface.
type MockConfiguratorClientInterfaceMockRecorder struct {
	mock *MockConfiguratorClientInterface
}

// NewMockConfiguratorClientInterface creates a new mock instance.
func NewMockConfiguratorClientInterface(ctrl *gomock.Controller) *MockConfiguratorClientInterface {
	mock := &MockConfiguratorClientInterface{ctrl: ctrl}
	mock.recorder = &MockConfiguratorClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfiguratorClientInterface) EXPECT() *MockConfiguratorClientInterfaceMockRecorder {
	return m.recorder
}

// CreateOrPatchObject mocks base method.
func (m *MockConfiguratorClientInterface) CreateOrPatchObject(arg0 clients.ObjectType, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrPatchObject", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrPatchObject indicates an expected call of CreateOrPatchObject.
func (mr *MockConfiguratorClientInterfaceMockRecorder) CreateOrPatchObject(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrPatchObject", reflect.TypeOf((*MockConfiguratorClientInterface)(nil).CreateOrPatchObject), arg0, arg1, arg2, arg3)
}

// GetANFSecrets mocks base method.
func (m *MockConfiguratorClientInterface) GetANFSecrets(arg0 string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetANFSecrets", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetANFSecrets indicates an expected call of GetANFSecrets.
func (mr *MockConfiguratorClientInterfaceMockRecorder) GetANFSecrets(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetANFSecrets", reflect.TypeOf((*MockConfiguratorClientInterface)(nil).GetANFSecrets), arg0)
}

// GetControllingTorcCR mocks base method.
func (m *MockConfiguratorClientInterface) GetControllingTorcCR() (*v10.TridentOrchestrator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControllingTorcCR")
	ret0, _ := ret[0].(*v10.TridentOrchestrator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControllingTorcCR indicates an expected call of GetControllingTorcCR.
func (mr *MockConfiguratorClientInterfaceMockRecorder) GetControllingTorcCR() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControllingTorcCR", reflect.TypeOf((*MockConfiguratorClientInterface)(nil).GetControllingTorcCR))
}

// GetTconfCR mocks base method.
func (m *MockConfiguratorClientInterface) GetTconfCR(arg0 string) (*v10.TridentConfigurator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTconfCR", arg0)
	ret0, _ := ret[0].(*v10.TridentConfigurator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTconfCR indicates an expected call of GetTconfCR.
func (mr *MockConfiguratorClientInterfaceMockRecorder) GetTconfCR(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTconfCR", reflect.TypeOf((*MockConfiguratorClientInterface)(nil).GetTconfCR), arg0)
}

// UpdateTridentConfiguratorStatus mocks base method.
func (m *MockConfiguratorClientInterface) UpdateTridentConfiguratorStatus(arg0 *v10.TridentConfigurator, arg1 v10.TridentConfiguratorStatus) (*v10.TridentConfigurator, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTridentConfiguratorStatus", arg0, arg1)
	ret0, _ := ret[0].(*v10.TridentConfigurator)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateTridentConfiguratorStatus indicates an expected call of UpdateTridentConfiguratorStatus.
func (mr *MockConfiguratorClientInterfaceMockRecorder) UpdateTridentConfiguratorStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTridentConfiguratorStatus", reflect.TypeOf((*MockConfiguratorClientInterface)(nil).UpdateTridentConfiguratorStatus), arg0, arg1)
}

// MockExtendedK8sClientInterface is a mock of ExtendedK8sClientInterface interface.
type MockExtendedK8sClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockExtendedK8sClientInterfaceMockRecorder
}

// MockExtendedK8sClientInterfaceMockRecorder is the mock recorder for MockExtendedK8sClientInterface.
type MockExtendedK8sClientInterfaceMockRecorder struct {
	mock *MockExtendedK8sClientInterface
}

// NewMockExtendedK8sClientInterface creates a new mock instance.
func NewMockExtendedK8sClientInterface(ctrl *gomock.Controller) *MockExtendedK8sClientInterface {
	mock := &MockExtendedK8sClientInterface{ctrl: ctrl}
	mock.recorder = &MockExtendedK8sClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtendedK8sClientInterface) EXPECT() *MockExtendedK8sClientInterfaceMockRecorder {
	return m.recorder
}

// AddFinalizerToCRD mocks base method.
func (m *MockExtendedK8sClientInterface) AddFinalizerToCRD(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFinalizerToCRD", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFinalizerToCRD indicates an expected call of AddFinalizerToCRD.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) AddFinalizerToCRD(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFinalizerToCRD", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).AddFinalizerToCRD), arg0)
}

// AddFinalizerToCRDs mocks base method.
func (m *MockExtendedK8sClientInterface) AddFinalizerToCRDs(arg0 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFinalizerToCRDs", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFinalizerToCRDs indicates an expected call of AddFinalizerToCRDs.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) AddFinalizerToCRDs(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFinalizerToCRDs", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).AddFinalizerToCRDs), arg0)
}

// CLI mocks base method.
func (m *MockExtendedK8sClientInterface) CLI() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CLI")
	ret0, _ := ret[0].(string)
	return ret0
}

// CLI indicates an expected call of CLI.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) CLI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CLI", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).CLI))
}

// CheckCRDExists mocks base method.
func (m *MockExtendedK8sClientInterface) CheckCRDExists(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCRDExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCRDExists indicates an expected call of CheckCRDExists.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) CheckCRDExists(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCRDExists", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).CheckCRDExists), arg0)
}

// CheckCSIDriverExistsByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) CheckCSIDriverExistsByLabel(arg0 string) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCSIDriverExistsByLabel", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckCSIDriverExistsByLabel indicates an expected call of CheckCSIDriverExistsByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) CheckCSIDriverExistsByLabel(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCSIDriverExistsByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).CheckCSIDriverExistsByLabel), arg0)
}

// CheckClusterRoleBindingExistsByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) CheckClusterRoleBindingExistsByLabel(arg0 string) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckClusterRoleBindingExistsByLabel", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckClusterRoleBindingExistsByLabel indicates an expected call of CheckClusterRoleBindingExistsByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) CheckClusterRoleBindingExistsByLabel(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckClusterRoleBindingExistsByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).CheckClusterRoleBindingExistsByLabel), arg0)
}

// CheckClusterRoleExistsByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) CheckClusterRoleExistsByLabel(arg0 string) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckClusterRoleExistsByLabel", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckClusterRoleExistsByLabel indicates an expected call of CheckClusterRoleExistsByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) CheckClusterRoleExistsByLabel(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckClusterRoleExistsByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).CheckClusterRoleExistsByLabel), arg0)
}

// CheckDaemonSetExists mocks base method.
func (m *MockExtendedK8sClientInterface) CheckDaemonSetExists(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDaemonSetExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckDaemonSetExists indicates an expected call of CheckDaemonSetExists.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) CheckDaemonSetExists(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDaemonSetExists", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).CheckDaemonSetExists), arg0, arg1)
}

// CheckDaemonSetExistsByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) CheckDaemonSetExistsByLabel(arg0 string, arg1 bool) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDaemonSetExistsByLabel", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckDaemonSetExistsByLabel indicates an expected call of CheckDaemonSetExistsByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) CheckDaemonSetExistsByLabel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDaemonSetExistsByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).CheckDaemonSetExistsByLabel), arg0, arg1)
}

// CheckDeploymentExists mocks base method.
func (m *MockExtendedK8sClientInterface) CheckDeploymentExists(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDeploymentExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckDeploymentExists indicates an expected call of CheckDeploymentExists.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) CheckDeploymentExists(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDeploymentExists", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).CheckDeploymentExists), arg0, arg1)
}

// CheckDeploymentExistsByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) CheckDeploymentExistsByLabel(arg0 string, arg1 bool) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDeploymentExistsByLabel", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckDeploymentExistsByLabel indicates an expected call of CheckDeploymentExistsByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) CheckDeploymentExistsByLabel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDeploymentExistsByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).CheckDeploymentExistsByLabel), arg0, arg1)
}

// CheckNamespaceExists mocks base method.
func (m *MockExtendedK8sClientInterface) CheckNamespaceExists(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckNamespaceExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckNamespaceExists indicates an expected call of CheckNamespaceExists.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) CheckNamespaceExists(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckNamespaceExists", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).CheckNamespaceExists), arg0)
}

// CheckPodExistsByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) CheckPodExistsByLabel(arg0 string, arg1 bool) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPodExistsByLabel", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckPodExistsByLabel indicates an expected call of CheckPodExistsByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) CheckPodExistsByLabel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPodExistsByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).CheckPodExistsByLabel), arg0, arg1)
}

// CheckPodSecurityPolicyExistsByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) CheckPodSecurityPolicyExistsByLabel(arg0 string) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPodSecurityPolicyExistsByLabel", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckPodSecurityPolicyExistsByLabel indicates an expected call of CheckPodSecurityPolicyExistsByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) CheckPodSecurityPolicyExistsByLabel(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPodSecurityPolicyExistsByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).CheckPodSecurityPolicyExistsByLabel), arg0)
}

// CheckSecretExists mocks base method.
func (m *MockExtendedK8sClientInterface) CheckSecretExists(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSecretExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckSecretExists indicates an expected call of CheckSecretExists.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) CheckSecretExists(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSecretExists", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).CheckSecretExists), arg0)
}

// CheckServiceAccountExistsByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) CheckServiceAccountExistsByLabel(arg0 string, arg1 bool) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckServiceAccountExistsByLabel", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckServiceAccountExistsByLabel indicates an expected call of CheckServiceAccountExistsByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) CheckServiceAccountExistsByLabel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckServiceAccountExistsByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).CheckServiceAccountExistsByLabel), arg0, arg1)
}

// CheckServiceExistsByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) CheckServiceExistsByLabel(arg0 string, arg1 bool) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckServiceExistsByLabel", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckServiceExistsByLabel indicates an expected call of CheckServiceExistsByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) CheckServiceExistsByLabel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckServiceExistsByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).CheckServiceExistsByLabel), arg0, arg1)
}

// CheckStorageClassExists mocks base method.
func (m *MockExtendedK8sClientInterface) CheckStorageClassExists(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckStorageClassExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckStorageClassExists indicates an expected call of CheckStorageClassExists.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) CheckStorageClassExists(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckStorageClassExists", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).CheckStorageClassExists), arg0)
}

// CreateObjectByFile mocks base method.
func (m *MockExtendedK8sClientInterface) CreateObjectByFile(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateObjectByFile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateObjectByFile indicates an expected call of CreateObjectByFile.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) CreateObjectByFile(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObjectByFile", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).CreateObjectByFile), arg0)
}

// CreateObjectByYAML mocks base method.
func (m *MockExtendedK8sClientInterface) CreateObjectByYAML(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateObjectByYAML", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateObjectByYAML indicates an expected call of CreateObjectByYAML.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) CreateObjectByYAML(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObjectByYAML", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).CreateObjectByYAML), arg0)
}

// CreateSecret mocks base method.
func (m *MockExtendedK8sClientInterface) CreateSecret(arg0 *v12.Secret) (*v12.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecret", arg0)
	ret0, _ := ret[0].(*v12.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecret indicates an expected call of CreateSecret.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) CreateSecret(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).CreateSecret), arg0)
}

// DeleteCRD mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteCRD(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCRD", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCRD indicates an expected call of DeleteCRD.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteCRD(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCRD", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteCRD), arg0)
}

// DeleteCSIDriver mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteCSIDriver(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCSIDriver", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCSIDriver indicates an expected call of DeleteCSIDriver.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteCSIDriver(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCSIDriver", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteCSIDriver), arg0)
}

// DeleteCSIDriverByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteCSIDriverByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCSIDriverByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCSIDriverByLabel indicates an expected call of DeleteCSIDriverByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteCSIDriverByLabel(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCSIDriverByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteCSIDriverByLabel), arg0)
}

// DeleteClusterRole mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteClusterRole(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterRole", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterRole indicates an expected call of DeleteClusterRole.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteClusterRole(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterRole", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteClusterRole), arg0)
}

// DeleteClusterRoleBinding mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteClusterRoleBinding(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterRoleBinding", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterRoleBinding indicates an expected call of DeleteClusterRoleBinding.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteClusterRoleBinding(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterRoleBinding", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteClusterRoleBinding), arg0)
}

// DeleteClusterRoleBindingByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteClusterRoleBindingByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterRoleBindingByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterRoleBindingByLabel indicates an expected call of DeleteClusterRoleBindingByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteClusterRoleBindingByLabel(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterRoleBindingByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteClusterRoleBindingByLabel), arg0)
}

// DeleteClusterRoleByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteClusterRoleByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterRoleByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterRoleByLabel indicates an expected call of DeleteClusterRoleByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteClusterRoleByLabel(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterRoleByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteClusterRoleByLabel), arg0)
}

// DeleteDaemonSet mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteDaemonSet(arg0, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDaemonSet", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDaemonSet indicates an expected call of DeleteDaemonSet.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteDaemonSet(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDaemonSet", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteDaemonSet), arg0, arg1, arg2)
}

// DeleteDaemonSetByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteDaemonSetByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDaemonSetByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDaemonSetByLabel indicates an expected call of DeleteDaemonSetByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteDaemonSetByLabel(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDaemonSetByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteDaemonSetByLabel), arg0)
}

// DeleteDaemonSetByLabelAndName mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteDaemonSetByLabelAndName(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDaemonSetByLabelAndName", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDaemonSetByLabelAndName indicates an expected call of DeleteDaemonSetByLabelAndName.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteDaemonSetByLabelAndName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDaemonSetByLabelAndName", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteDaemonSetByLabelAndName), arg0, arg1)
}

// DeleteDeployment mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteDeployment(arg0, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeployment", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDeployment indicates an expected call of DeleteDeployment.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteDeployment(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeployment", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteDeployment), arg0, arg1, arg2)
}

// DeleteDeploymentByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteDeploymentByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeploymentByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDeploymentByLabel indicates an expected call of DeleteDeploymentByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteDeploymentByLabel(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeploymentByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteDeploymentByLabel), arg0)
}

// DeleteObjectByFile mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteObjectByFile(arg0 string, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObjectByFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObjectByFile indicates an expected call of DeleteObjectByFile.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteObjectByFile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjectByFile", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteObjectByFile), arg0, arg1)
}

// DeleteObjectByYAML mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteObjectByYAML(arg0 string, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObjectByYAML", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObjectByYAML indicates an expected call of DeleteObjectByYAML.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteObjectByYAML(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjectByYAML", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteObjectByYAML), arg0, arg1)
}

// DeletePod mocks base method.
func (m *MockExtendedK8sClientInterface) DeletePod(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePod", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePod indicates an expected call of DeletePod.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeletePod(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePod", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeletePod), arg0, arg1)
}

// DeletePodByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) DeletePodByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePodByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePodByLabel indicates an expected call of DeletePodByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeletePodByLabel(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePodByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeletePodByLabel), arg0)
}

// DeletePodSecurityPolicy mocks base method.
func (m *MockExtendedK8sClientInterface) DeletePodSecurityPolicy(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePodSecurityPolicy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePodSecurityPolicy indicates an expected call of DeletePodSecurityPolicy.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeletePodSecurityPolicy(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePodSecurityPolicy", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeletePodSecurityPolicy), arg0)
}

// DeletePodSecurityPolicyByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) DeletePodSecurityPolicyByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePodSecurityPolicyByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePodSecurityPolicyByLabel indicates an expected call of DeletePodSecurityPolicyByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeletePodSecurityPolicyByLabel(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePodSecurityPolicyByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeletePodSecurityPolicyByLabel), arg0)
}

// DeleteResourceQuota mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteResourceQuota(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourceQuota", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResourceQuota indicates an expected call of DeleteResourceQuota.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteResourceQuota(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceQuota", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteResourceQuota), arg0)
}

// DeleteResourceQuotaByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteResourceQuotaByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourceQuotaByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResourceQuotaByLabel indicates an expected call of DeleteResourceQuotaByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteResourceQuotaByLabel(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceQuotaByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteResourceQuotaByLabel), arg0)
}

// DeleteRole mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteRole(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteRole(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteRole), arg0)
}

// DeleteRoleBinding mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteRoleBinding(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoleBinding", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoleBinding indicates an expected call of DeleteRoleBinding.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteRoleBinding(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleBinding", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteRoleBinding), arg0)
}

// DeleteSecret mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteSecret(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteSecret(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteSecret), arg0, arg1)
}

// DeleteSecretByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteSecretByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecretByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecretByLabel indicates an expected call of DeleteSecretByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteSecretByLabel(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecretByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteSecretByLabel), arg0)
}

// DeleteSecretDefault mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteSecretDefault(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecretDefault", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecretDefault indicates an expected call of DeleteSecretDefault.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteSecretDefault(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecretDefault", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteSecretDefault), arg0)
}

// DeleteService mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteService(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteService", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteService indicates an expected call of DeleteService.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteService(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteService), arg0, arg1)
}

// DeleteServiceAccount mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteServiceAccount(arg0, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceAccount", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServiceAccount indicates an expected call of DeleteServiceAccount.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteServiceAccount(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceAccount", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteServiceAccount), arg0, arg1, arg2)
}

// DeleteServiceAccountByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteServiceAccountByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceAccountByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServiceAccountByLabel indicates an expected call of DeleteServiceAccountByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteServiceAccountByLabel(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceAccountByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteServiceAccountByLabel), arg0)
}

// DeleteServiceByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteServiceByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServiceByLabel indicates an expected call of DeleteServiceByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteServiceByLabel(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteServiceByLabel), arg0)
}

// DeleteStorageClass mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteStorageClass(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStorageClass", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStorageClass indicates an expected call of DeleteStorageClass.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteStorageClass(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStorageClass", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteStorageClass), arg0)
}

// Exec mocks base method.
func (m *MockExtendedK8sClientInterface) Exec(arg0, arg1 string, arg2 []string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) Exec(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).Exec), arg0, arg1, arg2)
}

// Flavor mocks base method.
func (m *MockExtendedK8sClientInterface) Flavor() k8sclient.OrchestratorFlavor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flavor")
	ret0, _ := ret[0].(k8sclient.OrchestratorFlavor)
	return ret0
}

// Flavor indicates an expected call of Flavor.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) Flavor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flavor", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).Flavor))
}

// GetCRD mocks base method.
func (m *MockExtendedK8sClientInterface) GetCRD(arg0 string) (*v15.CustomResourceDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCRD", arg0)
	ret0, _ := ret[0].(*v15.CustomResourceDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCRD indicates an expected call of GetCRD.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetCRD(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCRD", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetCRD), arg0)
}

// GetCSIDriverByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetCSIDriverByLabel(arg0 string) (*v14.CSIDriver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCSIDriverByLabel", arg0)
	ret0, _ := ret[0].(*v14.CSIDriver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSIDriverByLabel indicates an expected call of GetCSIDriverByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetCSIDriverByLabel(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSIDriverByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetCSIDriverByLabel), arg0)
}

// GetCSIDriversByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetCSIDriversByLabel(arg0 string) ([]v14.CSIDriver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCSIDriversByLabel", arg0)
	ret0, _ := ret[0].([]v14.CSIDriver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSIDriversByLabel indicates an expected call of GetCSIDriversByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetCSIDriversByLabel(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSIDriversByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetCSIDriversByLabel), arg0)
}

// GetClusterRoleBindingByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetClusterRoleBindingByLabel(arg0 string) (*v13.ClusterRoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterRoleBindingByLabel", arg0)
	ret0, _ := ret[0].(*v13.ClusterRoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterRoleBindingByLabel indicates an expected call of GetClusterRoleBindingByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetClusterRoleBindingByLabel(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterRoleBindingByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetClusterRoleBindingByLabel), arg0)
}

// GetClusterRoleBindingByLabelAndName mocks base method.
func (m *MockExtendedK8sClientInterface) GetClusterRoleBindingByLabelAndName(arg0, arg1 string) (*v13.ClusterRoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterRoleBindingByLabelAndName", arg0, arg1)
	ret0, _ := ret[0].(*v13.ClusterRoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterRoleBindingByLabelAndName indicates an expected call of GetClusterRoleBindingByLabelAndName.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetClusterRoleBindingByLabelAndName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterRoleBindingByLabelAndName", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetClusterRoleBindingByLabelAndName), arg0, arg1)
}

// GetClusterRoleBindingsByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetClusterRoleBindingsByLabel(arg0 string) ([]v13.ClusterRoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterRoleBindingsByLabel", arg0)
	ret0, _ := ret[0].([]v13.ClusterRoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterRoleBindingsByLabel indicates an expected call of GetClusterRoleBindingsByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetClusterRoleBindingsByLabel(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterRoleBindingsByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetClusterRoleBindingsByLabel), arg0)
}

// GetClusterRoleByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetClusterRoleByLabel(arg0 string) (*v13.ClusterRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterRoleByLabel", arg0)
	ret0, _ := ret[0].(*v13.ClusterRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterRoleByLabel indicates an expected call of GetClusterRoleByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetClusterRoleByLabel(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterRoleByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetClusterRoleByLabel), arg0)
}

// GetClusterRoleByLabelAndName mocks base method.
func (m *MockExtendedK8sClientInterface) GetClusterRoleByLabelAndName(arg0, arg1 string) (*v13.ClusterRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterRoleByLabelAndName", arg0, arg1)
	ret0, _ := ret[0].(*v13.ClusterRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterRoleByLabelAndName indicates an expected call of GetClusterRoleByLabelAndName.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetClusterRoleByLabelAndName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterRoleByLabelAndName", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetClusterRoleByLabelAndName), arg0, arg1)
}

// GetClusterRolesByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetClusterRolesByLabel(arg0 string) ([]v13.ClusterRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterRolesByLabel", arg0)
	ret0, _ := ret[0].([]v13.ClusterRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterRolesByLabel indicates an expected call of GetClusterRolesByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetClusterRolesByLabel(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterRolesByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetClusterRolesByLabel), arg0)
}

// GetDaemonSetByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetDaemonSetByLabel(arg0 string, arg1 bool) (*v11.DaemonSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDaemonSetByLabel", arg0, arg1)
	ret0, _ := ret[0].(*v11.DaemonSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDaemonSetByLabel indicates an expected call of GetDaemonSetByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetDaemonSetByLabel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDaemonSetByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetDaemonSetByLabel), arg0, arg1)
}

// GetDaemonSetByLabelAndName mocks base method.
func (m *MockExtendedK8sClientInterface) GetDaemonSetByLabelAndName(arg0, arg1 string, arg2 bool) (*v11.DaemonSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDaemonSetByLabelAndName", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v11.DaemonSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDaemonSetByLabelAndName indicates an expected call of GetDaemonSetByLabelAndName.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetDaemonSetByLabelAndName(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDaemonSetByLabelAndName", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetDaemonSetByLabelAndName), arg0, arg1, arg2)
}

// GetDaemonSetsByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetDaemonSetsByLabel(arg0 string, arg1 bool) ([]v11.DaemonSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDaemonSetsByLabel", arg0, arg1)
	ret0, _ := ret[0].([]v11.DaemonSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDaemonSetsByLabel indicates an expected call of GetDaemonSetsByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetDaemonSetsByLabel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDaemonSetsByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetDaemonSetsByLabel), arg0, arg1)
}

// GetDeploymentByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetDeploymentByLabel(arg0 string, arg1 bool) (*v11.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentByLabel", arg0, arg1)
	ret0, _ := ret[0].(*v11.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentByLabel indicates an expected call of GetDeploymentByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetDeploymentByLabel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetDeploymentByLabel), arg0, arg1)
}

// GetDeploymentsByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetDeploymentsByLabel(arg0 string, arg1 bool) ([]v11.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentsByLabel", arg0, arg1)
	ret0, _ := ret[0].([]v11.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentsByLabel indicates an expected call of GetDeploymentsByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetDeploymentsByLabel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentsByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetDeploymentsByLabel), arg0, arg1)
}

// GetNamespace mocks base method.
func (m *MockExtendedK8sClientInterface) GetNamespace(arg0 string) (*v12.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace", arg0)
	ret0, _ := ret[0].(*v12.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespace indicates an expected call of GetNamespace.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetNamespace(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetNamespace), arg0)
}

// GetOpenShiftSCCByName mocks base method.
func (m *MockExtendedK8sClientInterface) GetOpenShiftSCCByName(arg0, arg1 string) (bool, bool, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenShiftSCCByName", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].([]byte)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetOpenShiftSCCByName indicates an expected call of GetOpenShiftSCCByName.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetOpenShiftSCCByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenShiftSCCByName", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetOpenShiftSCCByName), arg0, arg1)
}

// GetPersistentVolumeClaims mocks base method.
func (m *MockExtendedK8sClientInterface) GetPersistentVolumeClaims(arg0 bool) ([]v12.PersistentVolumeClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersistentVolumeClaims", arg0)
	ret0, _ := ret[0].([]v12.PersistentVolumeClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersistentVolumeClaims indicates an expected call of GetPersistentVolumeClaims.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetPersistentVolumeClaims(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersistentVolumeClaims", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetPersistentVolumeClaims), arg0)
}

// GetPersistentVolumes mocks base method.
func (m *MockExtendedK8sClientInterface) GetPersistentVolumes() ([]v12.PersistentVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersistentVolumes")
	ret0, _ := ret[0].([]v12.PersistentVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersistentVolumes indicates an expected call of GetPersistentVolumes.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetPersistentVolumes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersistentVolumes", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetPersistentVolumes))
}

// GetPodByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetPodByLabel(arg0 string, arg1 bool) (*v12.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodByLabel", arg0, arg1)
	ret0, _ := ret[0].(*v12.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodByLabel indicates an expected call of GetPodByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetPodByLabel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetPodByLabel), arg0, arg1)
}

// GetPodSecurityPoliciesByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetPodSecurityPoliciesByLabel(arg0 string) ([]v1beta1.PodSecurityPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodSecurityPoliciesByLabel", arg0)
	ret0, _ := ret[0].([]v1beta1.PodSecurityPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodSecurityPoliciesByLabel indicates an expected call of GetPodSecurityPoliciesByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetPodSecurityPoliciesByLabel(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodSecurityPoliciesByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetPodSecurityPoliciesByLabel), arg0)
}

// GetPodSecurityPolicyByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetPodSecurityPolicyByLabel(arg0 string) (*v1beta1.PodSecurityPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodSecurityPolicyByLabel", arg0)
	ret0, _ := ret[0].(*v1beta1.PodSecurityPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodSecurityPolicyByLabel indicates an expected call of GetPodSecurityPolicyByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetPodSecurityPolicyByLabel(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodSecurityPolicyByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetPodSecurityPolicyByLabel), arg0)
}

// GetPodsByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetPodsByLabel(arg0 string, arg1 bool) ([]v12.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodsByLabel", arg0, arg1)
	ret0, _ := ret[0].([]v12.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodsByLabel indicates an expected call of GetPodsByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetPodsByLabel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodsByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetPodsByLabel), arg0, arg1)
}

// GetResourceQuota mocks base method.
func (m *MockExtendedK8sClientInterface) GetResourceQuota(arg0 string) (*v12.ResourceQuota, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceQuota", arg0)
	ret0, _ := ret[0].(*v12.ResourceQuota)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceQuota indicates an expected call of GetResourceQuota.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetResourceQuota(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceQuota", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetResourceQuota), arg0)
}

// GetResourceQuotaByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetResourceQuotaByLabel(arg0 string) (*v12.ResourceQuota, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceQuotaByLabel", arg0)
	ret0, _ := ret[0].(*v12.ResourceQuota)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceQuotaByLabel indicates an expected call of GetResourceQuotaByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetResourceQuotaByLabel(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceQuotaByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetResourceQuotaByLabel), arg0)
}

// GetResourceQuotasByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetResourceQuotasByLabel(arg0 string) ([]v12.ResourceQuota, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceQuotasByLabel", arg0)
	ret0, _ := ret[0].([]v12.ResourceQuota)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceQuotasByLabel indicates an expected call of GetResourceQuotasByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetResourceQuotasByLabel(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceQuotasByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetResourceQuotasByLabel), arg0)
}

// GetRoleBindingByLabelAndName mocks base method.
func (m *MockExtendedK8sClientInterface) GetRoleBindingByLabelAndName(arg0, arg1 string) (*v13.RoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleBindingByLabelAndName", arg0, arg1)
	ret0, _ := ret[0].(*v13.RoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleBindingByLabelAndName indicates an expected call of GetRoleBindingByLabelAndName.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetRoleBindingByLabelAndName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleBindingByLabelAndName", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetRoleBindingByLabelAndName), arg0, arg1)
}

// GetRoleBindingsByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetRoleBindingsByLabel(arg0 string) ([]v13.RoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleBindingsByLabel", arg0)
	ret0, _ := ret[0].([]v13.RoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleBindingsByLabel indicates an expected call of GetRoleBindingsByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetRoleBindingsByLabel(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleBindingsByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetRoleBindingsByLabel), arg0)
}

// GetRolesByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetRolesByLabel(arg0 string) ([]v13.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRolesByLabel", arg0)
	ret0, _ := ret[0].([]v13.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRolesByLabel indicates an expected call of GetRolesByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetRolesByLabel(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRolesByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetRolesByLabel), arg0)
}

// GetSecret mocks base method.
func (m *MockExtendedK8sClientInterface) GetSecret(arg0 string) (*v12.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", arg0)
	ret0, _ := ret[0].(*v12.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetSecret(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetSecret), arg0)
}

// GetSecretByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetSecretByLabel(arg0 string, arg1 bool) (*v12.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretByLabel", arg0, arg1)
	ret0, _ := ret[0].(*v12.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretByLabel indicates an expected call of GetSecretByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetSecretByLabel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetSecretByLabel), arg0, arg1)
}

// GetSecretsByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetSecretsByLabel(arg0 string, arg1 bool) ([]v12.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretsByLabel", arg0, arg1)
	ret0, _ := ret[0].([]v12.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretsByLabel indicates an expected call of GetSecretsByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetSecretsByLabel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretsByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetSecretsByLabel), arg0, arg1)
}

// GetServiceAccountByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetServiceAccountByLabel(arg0 string, arg1 bool) (*v12.ServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceAccountByLabel", arg0, arg1)
	ret0, _ := ret[0].(*v12.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceAccountByLabel indicates an expected call of GetServiceAccountByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetServiceAccountByLabel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceAccountByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetServiceAccountByLabel), arg0, arg1)
}

// GetServiceAccountByLabelAndName mocks base method.
func (m *MockExtendedK8sClientInterface) GetServiceAccountByLabelAndName(arg0, arg1 string, arg2 bool) (*v12.ServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceAccountByLabelAndName", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v12.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceAccountByLabelAndName indicates an expected call of GetServiceAccountByLabelAndName.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetServiceAccountByLabelAndName(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceAccountByLabelAndName", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetServiceAccountByLabelAndName), arg0, arg1, arg2)
}

// GetServiceAccountsByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetServiceAccountsByLabel(arg0 string, arg1 bool) ([]v12.ServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceAccountsByLabel", arg0, arg1)
	ret0, _ := ret[0].([]v12.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceAccountsByLabel indicates an expected call of GetServiceAccountsByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetServiceAccountsByLabel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceAccountsByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetServiceAccountsByLabel), arg0, arg1)
}

// GetServiceByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetServiceByLabel(arg0 string, arg1 bool) (*v12.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceByLabel", arg0, arg1)
	ret0, _ := ret[0].(*v12.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceByLabel indicates an expected call of GetServiceByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetServiceByLabel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetServiceByLabel), arg0, arg1)
}

// GetServicesByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetServicesByLabel(arg0 string, arg1 bool) ([]v12.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServicesByLabel", arg0, arg1)
	ret0, _ := ret[0].([]v12.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServicesByLabel indicates an expected call of GetServicesByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetServicesByLabel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServicesByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetServicesByLabel), arg0, arg1)
}

// GetStorageClass mocks base method.
func (m *MockExtendedK8sClientInterface) GetStorageClass(arg0 string) (*v14.StorageClass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageClass", arg0)
	ret0, _ := ret[0].(*v14.StorageClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageClass indicates an expected call of GetStorageClass.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetStorageClass(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageClass", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetStorageClass), arg0)
}

// GetVolumeSnapshotClasses mocks base method.
func (m *MockExtendedK8sClientInterface) GetVolumeSnapshotClasses() ([]v1.VolumeSnapshotClass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeSnapshotClasses")
	ret0, _ := ret[0].([]v1.VolumeSnapshotClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeSnapshotClasses indicates an expected call of GetVolumeSnapshotClasses.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetVolumeSnapshotClasses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeSnapshotClasses", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetVolumeSnapshotClasses))
}

// GetVolumeSnapshotContents mocks base method.
func (m *MockExtendedK8sClientInterface) GetVolumeSnapshotContents() ([]v1.VolumeSnapshotContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeSnapshotContents")
	ret0, _ := ret[0].([]v1.VolumeSnapshotContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeSnapshotContents indicates an expected call of GetVolumeSnapshotContents.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetVolumeSnapshotContents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeSnapshotContents", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetVolumeSnapshotContents))
}

// GetVolumeSnapshots mocks base method.
func (m *MockExtendedK8sClientInterface) GetVolumeSnapshots(arg0 bool) ([]v1.VolumeSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeSnapshots", arg0)
	ret0, _ := ret[0].([]v1.VolumeSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeSnapshots indicates an expected call of GetVolumeSnapshots.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetVolumeSnapshots(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeSnapshots", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetVolumeSnapshots), arg0)
}

// Namespace mocks base method.
func (m *MockExtendedK8sClientInterface) Namespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Namespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// Namespace indicates an expected call of Namespace.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) Namespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Namespace", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).Namespace))
}

// PatchCRD mocks base method.
func (m *MockExtendedK8sClientInterface) PatchCRD(arg0 string, arg1 []byte, arg2 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchCRD", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchCRD indicates an expected call of PatchCRD.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchCRD(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCRD", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchCRD), arg0, arg1, arg2)
}

// PatchCSIDriverByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) PatchCSIDriverByLabel(arg0 string, arg1 []byte, arg2 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchCSIDriverByLabel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchCSIDriverByLabel indicates an expected call of PatchCSIDriverByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchCSIDriverByLabel(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCSIDriverByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchCSIDriverByLabel), arg0, arg1, arg2)
}

// PatchClusterRoleBindingByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) PatchClusterRoleBindingByLabel(arg0 string, arg1 []byte, arg2 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchClusterRoleBindingByLabel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchClusterRoleBindingByLabel indicates an expected call of PatchClusterRoleBindingByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchClusterRoleBindingByLabel(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchClusterRoleBindingByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchClusterRoleBindingByLabel), arg0, arg1, arg2)
}

// PatchClusterRoleBindingByLabelAndName mocks base method.
func (m *MockExtendedK8sClientInterface) PatchClusterRoleBindingByLabelAndName(arg0, arg1 string, arg2 []byte, arg3 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchClusterRoleBindingByLabelAndName", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchClusterRoleBindingByLabelAndName indicates an expected call of PatchClusterRoleBindingByLabelAndName.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchClusterRoleBindingByLabelAndName(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchClusterRoleBindingByLabelAndName", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchClusterRoleBindingByLabelAndName), arg0, arg1, arg2, arg3)
}

// PatchClusterRoleByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) PatchClusterRoleByLabel(arg0 string, arg1 []byte, arg2 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchClusterRoleByLabel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchClusterRoleByLabel indicates an expected call of PatchClusterRoleByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchClusterRoleByLabel(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchClusterRoleByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchClusterRoleByLabel), arg0, arg1, arg2)
}

// PatchClusterRoleByLabelAndName mocks base method.
func (m *MockExtendedK8sClientInterface) PatchClusterRoleByLabelAndName(arg0, arg1 string, arg2 []byte, arg3 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchClusterRoleByLabelAndName", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchClusterRoleByLabelAndName indicates an expected call of PatchClusterRoleByLabelAndName.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchClusterRoleByLabelAndName(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchClusterRoleByLabelAndName", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchClusterRoleByLabelAndName), arg0, arg1, arg2, arg3)
}

// PatchDaemonSetByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) PatchDaemonSetByLabel(arg0 string, arg1 []byte, arg2 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchDaemonSetByLabel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDaemonSetByLabel indicates an expected call of PatchDaemonSetByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchDaemonSetByLabel(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDaemonSetByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchDaemonSetByLabel), arg0, arg1, arg2)
}

// PatchDaemonSetByLabelAndName mocks base method.
func (m *MockExtendedK8sClientInterface) PatchDaemonSetByLabelAndName(arg0, arg1 string, arg2 []byte, arg3 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchDaemonSetByLabelAndName", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDaemonSetByLabelAndName indicates an expected call of PatchDaemonSetByLabelAndName.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchDaemonSetByLabelAndName(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDaemonSetByLabelAndName", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchDaemonSetByLabelAndName), arg0, arg1, arg2, arg3)
}

// PatchDeploymentByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) PatchDeploymentByLabel(arg0 string, arg1 []byte, arg2 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchDeploymentByLabel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDeploymentByLabel indicates an expected call of PatchDeploymentByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchDeploymentByLabel(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDeploymentByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchDeploymentByLabel), arg0, arg1, arg2)
}

// PatchNamespace mocks base method.
func (m *MockExtendedK8sClientInterface) PatchNamespace(arg0 string, arg1 []byte, arg2 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchNamespace", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchNamespace indicates an expected call of PatchNamespace.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchNamespace(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchNamespace", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchNamespace), arg0, arg1, arg2)
}

// PatchNamespaceLabels mocks base method.
func (m *MockExtendedK8sClientInterface) PatchNamespaceLabels(arg0 string, arg1 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchNamespaceLabels", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchNamespaceLabels indicates an expected call of PatchNamespaceLabels.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchNamespaceLabels(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchNamespaceLabels", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchNamespaceLabels), arg0, arg1)
}

// PatchOpenShiftSCC mocks base method.
func (m *MockExtendedK8sClientInterface) PatchOpenShiftSCC(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchOpenShiftSCC", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchOpenShiftSCC indicates an expected call of PatchOpenShiftSCC.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchOpenShiftSCC(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchOpenShiftSCC", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchOpenShiftSCC), arg0)
}

// PatchPodSecurityPolicyByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) PatchPodSecurityPolicyByLabel(arg0 string, arg1 []byte, arg2 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchPodSecurityPolicyByLabel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchPodSecurityPolicyByLabel indicates an expected call of PatchPodSecurityPolicyByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchPodSecurityPolicyByLabel(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchPodSecurityPolicyByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchPodSecurityPolicyByLabel), arg0, arg1, arg2)
}

// PatchPodSecurityPolicyByLabelAndName mocks base method.
func (m *MockExtendedK8sClientInterface) PatchPodSecurityPolicyByLabelAndName(arg0, arg1 string, arg2 []byte, arg3 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchPodSecurityPolicyByLabelAndName", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchPodSecurityPolicyByLabelAndName indicates an expected call of PatchPodSecurityPolicyByLabelAndName.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchPodSecurityPolicyByLabelAndName(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchPodSecurityPolicyByLabelAndName", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchPodSecurityPolicyByLabelAndName), arg0, arg1, arg2, arg3)
}

// PatchResourceQuotaByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) PatchResourceQuotaByLabel(arg0 string, arg1 []byte, arg2 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchResourceQuotaByLabel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchResourceQuotaByLabel indicates an expected call of PatchResourceQuotaByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchResourceQuotaByLabel(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchResourceQuotaByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchResourceQuotaByLabel), arg0, arg1, arg2)
}

// PatchRoleBindingByLabelAndName mocks base method.
func (m *MockExtendedK8sClientInterface) PatchRoleBindingByLabelAndName(arg0, arg1 string, arg2 []byte, arg3 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchRoleBindingByLabelAndName", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRoleBindingByLabelAndName indicates an expected call of PatchRoleBindingByLabelAndName.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchRoleBindingByLabelAndName(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRoleBindingByLabelAndName", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchRoleBindingByLabelAndName), arg0, arg1, arg2, arg3)
}

// PatchRoleByLabelAndName mocks base method.
func (m *MockExtendedK8sClientInterface) PatchRoleByLabelAndName(arg0, arg1 string, arg2 []byte, arg3 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchRoleByLabelAndName", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRoleByLabelAndName indicates an expected call of PatchRoleByLabelAndName.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchRoleByLabelAndName(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRoleByLabelAndName", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchRoleByLabelAndName), arg0, arg1, arg2, arg3)
}

// PatchSecretByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) PatchSecretByLabel(arg0 string, arg1 []byte, arg2 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchSecretByLabel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchSecretByLabel indicates an expected call of PatchSecretByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchSecretByLabel(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchSecretByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchSecretByLabel), arg0, arg1, arg2)
}

// PatchServiceAccountByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) PatchServiceAccountByLabel(arg0 string, arg1 []byte, arg2 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchServiceAccountByLabel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchServiceAccountByLabel indicates an expected call of PatchServiceAccountByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchServiceAccountByLabel(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchServiceAccountByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchServiceAccountByLabel), arg0, arg1, arg2)
}

// PatchServiceAccountByLabelAndName mocks base method.
func (m *MockExtendedK8sClientInterface) PatchServiceAccountByLabelAndName(arg0, arg1 string, arg2 []byte, arg3 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchServiceAccountByLabelAndName", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchServiceAccountByLabelAndName indicates an expected call of PatchServiceAccountByLabelAndName.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchServiceAccountByLabelAndName(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchServiceAccountByLabelAndName", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchServiceAccountByLabelAndName), arg0, arg1, arg2, arg3)
}

// PatchServiceByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) PatchServiceByLabel(arg0 string, arg1 []byte, arg2 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchServiceByLabel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchServiceByLabel indicates an expected call of PatchServiceByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchServiceByLabel(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchServiceByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchServiceByLabel), arg0, arg1, arg2)
}

// PatchStorageClass mocks base method.
func (m *MockExtendedK8sClientInterface) PatchStorageClass(arg0 string, arg1 []byte, arg2 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchStorageClass", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchStorageClass indicates an expected call of PatchStorageClass.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchStorageClass(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchStorageClass", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchStorageClass), arg0, arg1, arg2)
}

// RemoveFinalizerFromCRD mocks base method.
func (m *MockExtendedK8sClientInterface) RemoveFinalizerFromCRD(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFinalizerFromCRD", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFinalizerFromCRD indicates an expected call of RemoveFinalizerFromCRD.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) RemoveFinalizerFromCRD(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFinalizerFromCRD", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).RemoveFinalizerFromCRD), arg0)
}

// RemoveTridentUserFromOpenShiftSCC mocks base method.
func (m *MockExtendedK8sClientInterface) RemoveTridentUserFromOpenShiftSCC(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTridentUserFromOpenShiftSCC", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTridentUserFromOpenShiftSCC indicates an expected call of RemoveTridentUserFromOpenShiftSCC.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) RemoveTridentUserFromOpenShiftSCC(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTridentUserFromOpenShiftSCC", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).RemoveTridentUserFromOpenShiftSCC), arg0, arg1)
}

// ServerVersion mocks base method.
func (m *MockExtendedK8sClientInterface) ServerVersion() *version.Version {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerVersion")
	ret0, _ := ret[0].(*version.Version)
	return ret0
}

// ServerVersion indicates an expected call of ServerVersion.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) ServerVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerVersion", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).ServerVersion))
}

// SetNamespace mocks base method.
func (m *MockExtendedK8sClientInterface) SetNamespace(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNamespace", arg0)
}

// SetNamespace indicates an expected call of SetNamespace.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) SetNamespace(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNamespace", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).SetNamespace), arg0)
}

// SetTimeout mocks base method.
func (m *MockExtendedK8sClientInterface) SetTimeout(arg0 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTimeout", arg0)
}

// SetTimeout indicates an expected call of SetTimeout.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) SetTimeout(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimeout", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).SetTimeout), arg0)
}

// UpdateSecret mocks base method.
func (m *MockExtendedK8sClientInterface) UpdateSecret(arg0 *v12.Secret) (*v12.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecret", arg0)
	ret0, _ := ret[0].(*v12.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSecret indicates an expected call of UpdateSecret.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) UpdateSecret(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecret", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).UpdateSecret), arg0)
}

// Version mocks base method.
func (m *MockExtendedK8sClientInterface) Version() *version0.Info {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(*version0.Info)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).Version))
}
